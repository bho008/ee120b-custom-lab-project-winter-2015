
bho008_CustomLabProject_328p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ca  00800100  00002efc  00002f90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002efc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000692  008001ca  008001ca  0000305a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000305a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001b0  00000000  00000000  000030b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002acb  00000000  00000000  00003266  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004c5  00000000  00000000  00005d31  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000bcc  00000000  00000000  000061f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000738  00000000  00000000  00006dc4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000008ea  00000000  00000000  000074fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001c92  00000000  00000000  00007de6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000330  00000000  00000000  00009a78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ba 02 	jmp	0x574	; 0x574 <__ctors_end>
       4:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <__bad_interrupt>
       8:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <__bad_interrupt>
       c:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <__bad_interrupt>
      10:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <__bad_interrupt>
      14:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <__bad_interrupt>
      18:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <__bad_interrupt>
      1c:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <__bad_interrupt>
      20:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <__bad_interrupt>
      24:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <__bad_interrupt>
      28:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <__bad_interrupt>
      2c:	0c 94 0f 0c 	jmp	0x181e	; 0x181e <__vector_11>
      30:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <__bad_interrupt>
      34:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <__bad_interrupt>
      38:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <__bad_interrupt>
      3c:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <__bad_interrupt>
      40:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <__bad_interrupt>
      44:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <__bad_interrupt>
      48:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <__bad_interrupt>
      4c:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <__bad_interrupt>
      50:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <__bad_interrupt>
      54:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <__bad_interrupt>
      58:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <__bad_interrupt>
      5c:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <__bad_interrupt>
      60:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <__bad_interrupt>
      64:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <__bad_interrupt>
      68:	b4 0d       	add	r27, r4
      6a:	a9 0e       	add	r10, r25
      6c:	6d 10       	cpse	r6, r13
      6e:	1c 0e       	add	r1, r28
      70:	75 10       	cpse	r7, r5
      72:	0f 11       	cpse	r16, r15
      74:	d5 11       	cpse	r29, r5
      76:	05 11       	cpse	r16, r5

00000078 <__trampolines_end>:
      78:	00 00       	nop
      7a:	00 00       	nop
      7c:	00 3e       	cpi	r16, 0xE0	; 224
      7e:	5b 4f       	sbci	r21, 0xFB	; 251
      80:	5b 3e       	cpi	r21, 0xEB	; 235
      82:	3e 6b       	ori	r19, 0xBE	; 190
      84:	4f 6b       	ori	r20, 0xBF	; 191
      86:	3e 1c       	adc	r3, r14
      88:	3e 7c       	andi	r19, 0xCE	; 206
      8a:	3e 1c       	adc	r3, r14
      8c:	18 3c       	cpi	r17, 0xC8	; 200
      8e:	7e 3c       	cpi	r23, 0xCE	; 206
      90:	18 1c       	adc	r1, r8
      92:	57 7d       	andi	r21, 0xD7	; 215
      94:	57 1c       	adc	r5, r7
      96:	1c 5e       	subi	r17, 0xEC	; 236
      98:	7f 5e       	subi	r23, 0xEF	; 239
      9a:	1c 00       	.word	0x001c	; ????
      9c:	18 3c       	cpi	r17, 0xC8	; 200
      9e:	18 00       	.word	0x0018	; ????
      a0:	ff e7       	ldi	r31, 0x7F	; 127
      a2:	c3 e7       	ldi	r28, 0x73	; 115
      a4:	ff 00       	.word	0x00ff	; ????
      a6:	18 24       	eor	r1, r8
      a8:	18 00       	.word	0x0018	; ????
      aa:	ff e7       	ldi	r31, 0x7F	; 127
      ac:	db e7       	ldi	r29, 0x7B	; 123
      ae:	ff 30       	cpi	r31, 0x0F	; 15
      b0:	48 3a       	cpi	r20, 0xA8	; 168
      b2:	06 0e       	add	r0, r22
      b4:	26 29       	or	r18, r6
      b6:	79 29       	or	r23, r9
      b8:	26 40       	sbci	r18, 0x06	; 6
      ba:	7f 05       	cpc	r23, r15
      bc:	05 07       	cpc	r16, r21
      be:	40 7f       	andi	r20, 0xF0	; 240
      c0:	05 25       	eor	r16, r5
      c2:	3f 5a       	subi	r19, 0xAF	; 175
      c4:	3c e7       	ldi	r19, 0x7C	; 124
      c6:	3c 5a       	subi	r19, 0xAC	; 172
      c8:	7f 3e       	cpi	r23, 0xEF	; 239
      ca:	1c 1c       	adc	r1, r12
      cc:	08 08       	sbc	r0, r8
      ce:	1c 1c       	adc	r1, r12
      d0:	3e 7f       	andi	r19, 0xFE	; 254
      d2:	14 22       	and	r1, r20
      d4:	7f 22       	and	r7, r31
      d6:	14 5f       	subi	r17, 0xF4	; 244
      d8:	5f 00       	.word	0x005f	; ????
      da:	5f 5f       	subi	r21, 0xFF	; 255
      dc:	06 09       	sbc	r16, r6
      de:	7f 01       	movw	r14, r30
      e0:	7f 00       	.word	0x007f	; ????
      e2:	66 89       	ldd	r22, Z+22	; 0x16
      e4:	95 6a       	ori	r25, 0xA5	; 165
      e6:	60 60       	ori	r22, 0x00	; 0
      e8:	60 60       	ori	r22, 0x00	; 0
      ea:	60 94       	com	r6
      ec:	a2 ff       	sbrs	r26, 2
      ee:	a2 94       	swap	r10
      f0:	08 04       	cpc	r0, r8
      f2:	7e 04       	cpc	r7, r14
      f4:	08 10       	cpse	r0, r8
      f6:	20 7e       	andi	r18, 0xE0	; 224
      f8:	20 10       	cpse	r2, r0
      fa:	08 08       	sbc	r0, r8
      fc:	2a 1c       	adc	r2, r10
      fe:	08 08       	sbc	r0, r8
     100:	1c 2a       	or	r1, r28
     102:	08 08       	sbc	r0, r8
     104:	1e 10       	cpse	r1, r14
     106:	10 10       	cpse	r1, r0
     108:	10 0c       	add	r1, r0
     10a:	1e 0c       	add	r1, r14
     10c:	1e 0c       	add	r1, r14
     10e:	30 38       	cpi	r19, 0x80	; 128
     110:	3e 38       	cpi	r19, 0x8E	; 142
     112:	30 06       	cpc	r3, r16
     114:	0e 3e       	cpi	r16, 0xEE	; 238
     116:	0e 06       	cpc	r0, r30
     118:	00 00       	nop
     11a:	00 00       	nop
     11c:	00 00       	nop
     11e:	00 5f       	subi	r16, 0xF0	; 240
     120:	00 00       	nop
     122:	00 07       	cpc	r16, r16
     124:	00 07       	cpc	r16, r16
     126:	00 14       	cp	r0, r0
     128:	7f 14       	cp	r7, r15
     12a:	7f 14       	cp	r7, r15
     12c:	24 2a       	or	r2, r20
     12e:	7f 2a       	or	r7, r31
     130:	12 23       	and	r17, r18
     132:	13 08       	sbc	r1, r3
     134:	64 62       	ori	r22, 0x24	; 36
     136:	36 49       	sbci	r19, 0x96	; 150
     138:	56 20       	and	r5, r6
     13a:	50 00       	.word	0x0050	; ????
     13c:	08 07       	cpc	r16, r24
     13e:	03 00       	.word	0x0003	; ????
     140:	00 1c       	adc	r0, r0
     142:	22 41       	sbci	r18, 0x12	; 18
     144:	00 00       	nop
     146:	41 22       	and	r4, r17
     148:	1c 00       	.word	0x001c	; ????
     14a:	2a 1c       	adc	r2, r10
     14c:	7f 1c       	adc	r7, r15
     14e:	2a 08       	sbc	r2, r10
     150:	08 3e       	cpi	r16, 0xE8	; 232
     152:	08 08       	sbc	r0, r8
     154:	00 80       	ld	r0, Z
     156:	70 30       	cpi	r23, 0x00	; 0
     158:	00 08       	sbc	r0, r0
     15a:	08 08       	sbc	r0, r8
     15c:	08 08       	sbc	r0, r8
     15e:	00 00       	nop
     160:	60 60       	ori	r22, 0x00	; 0
     162:	00 20       	and	r0, r0
     164:	10 08       	sbc	r1, r0
     166:	04 02       	muls	r16, r20
     168:	3e 51       	subi	r19, 0x1E	; 30
     16a:	49 45       	sbci	r20, 0x59	; 89
     16c:	3e 00       	.word	0x003e	; ????
     16e:	42 7f       	andi	r20, 0xF2	; 242
     170:	40 00       	.word	0x0040	; ????
     172:	72 49       	sbci	r23, 0x92	; 146
     174:	49 49       	sbci	r20, 0x99	; 153
     176:	46 21       	and	r20, r6
     178:	41 49       	sbci	r20, 0x91	; 145
     17a:	4d 33       	cpi	r20, 0x3D	; 61
     17c:	18 14       	cp	r1, r8
     17e:	12 7f       	andi	r17, 0xF2	; 242
     180:	10 27       	eor	r17, r16
     182:	45 45       	sbci	r20, 0x55	; 85
     184:	45 39       	cpi	r20, 0x95	; 149
     186:	3c 4a       	sbci	r19, 0xAC	; 172
     188:	49 49       	sbci	r20, 0x99	; 153
     18a:	31 41       	sbci	r19, 0x11	; 17
     18c:	21 11       	cpse	r18, r1
     18e:	09 07       	cpc	r16, r25
     190:	36 49       	sbci	r19, 0x96	; 150
     192:	49 49       	sbci	r20, 0x99	; 153
     194:	36 46       	sbci	r19, 0x66	; 102
     196:	49 49       	sbci	r20, 0x99	; 153
     198:	29 1e       	adc	r2, r25
     19a:	00 00       	nop
     19c:	14 00       	.word	0x0014	; ????
     19e:	00 00       	nop
     1a0:	40 34       	cpi	r20, 0x40	; 64
     1a2:	00 00       	nop
     1a4:	00 08       	sbc	r0, r0
     1a6:	14 22       	and	r1, r20
     1a8:	41 14       	cp	r4, r1
     1aa:	14 14       	cp	r1, r4
     1ac:	14 14       	cp	r1, r4
     1ae:	00 41       	sbci	r16, 0x10	; 16
     1b0:	22 14       	cp	r2, r2
     1b2:	08 02       	muls	r16, r24
     1b4:	01 59       	subi	r16, 0x91	; 145
     1b6:	09 06       	cpc	r0, r25
     1b8:	3e 41       	sbci	r19, 0x1E	; 30
     1ba:	5d 59       	subi	r21, 0x9D	; 157
     1bc:	4e 7c       	andi	r20, 0xCE	; 206
     1be:	12 11       	cpse	r17, r2
     1c0:	12 7c       	andi	r17, 0xC2	; 194
     1c2:	7f 49       	sbci	r23, 0x9F	; 159
     1c4:	49 49       	sbci	r20, 0x99	; 153
     1c6:	36 3e       	cpi	r19, 0xE6	; 230
     1c8:	41 41       	sbci	r20, 0x11	; 17
     1ca:	41 22       	and	r4, r17
     1cc:	7f 41       	sbci	r23, 0x1F	; 31
     1ce:	41 41       	sbci	r20, 0x11	; 17
     1d0:	3e 7f       	andi	r19, 0xFE	; 254
     1d2:	49 49       	sbci	r20, 0x99	; 153
     1d4:	49 41       	sbci	r20, 0x19	; 25
     1d6:	7f 09       	sbc	r23, r15
     1d8:	09 09       	sbc	r16, r9
     1da:	01 3e       	cpi	r16, 0xE1	; 225
     1dc:	41 41       	sbci	r20, 0x11	; 17
     1de:	51 73       	andi	r21, 0x31	; 49
     1e0:	7f 08       	sbc	r7, r15
     1e2:	08 08       	sbc	r0, r8
     1e4:	7f 00       	.word	0x007f	; ????
     1e6:	41 7f       	andi	r20, 0xF1	; 241
     1e8:	41 00       	.word	0x0041	; ????
     1ea:	20 40       	sbci	r18, 0x00	; 0
     1ec:	41 3f       	cpi	r20, 0xF1	; 241
     1ee:	01 7f       	andi	r16, 0xF1	; 241
     1f0:	08 14       	cp	r0, r8
     1f2:	22 41       	sbci	r18, 0x12	; 18
     1f4:	7f 40       	sbci	r23, 0x0F	; 15
     1f6:	40 40       	sbci	r20, 0x00	; 0
     1f8:	40 7f       	andi	r20, 0xF0	; 240
     1fa:	02 1c       	adc	r0, r2
     1fc:	02 7f       	andi	r16, 0xF2	; 242
     1fe:	7f 04       	cpc	r7, r15
     200:	08 10       	cpse	r0, r8
     202:	7f 3e       	cpi	r23, 0xEF	; 239
     204:	41 41       	sbci	r20, 0x11	; 17
     206:	41 3e       	cpi	r20, 0xE1	; 225
     208:	7f 09       	sbc	r23, r15
     20a:	09 09       	sbc	r16, r9
     20c:	06 3e       	cpi	r16, 0xE6	; 230
     20e:	41 51       	subi	r20, 0x11	; 17
     210:	21 5e       	subi	r18, 0xE1	; 225
     212:	7f 09       	sbc	r23, r15
     214:	19 29       	or	r17, r9
     216:	46 26       	eor	r4, r22
     218:	49 49       	sbci	r20, 0x99	; 153
     21a:	49 32       	cpi	r20, 0x29	; 41
     21c:	03 01       	movw	r0, r6
     21e:	7f 01       	movw	r14, r30
     220:	03 3f       	cpi	r16, 0xF3	; 243
     222:	40 40       	sbci	r20, 0x00	; 0
     224:	40 3f       	cpi	r20, 0xF0	; 240
     226:	1f 20       	and	r1, r15
     228:	40 20       	and	r4, r0
     22a:	1f 3f       	cpi	r17, 0xFF	; 255
     22c:	40 38       	cpi	r20, 0x80	; 128
     22e:	40 3f       	cpi	r20, 0xF0	; 240
     230:	63 14       	cp	r6, r3
     232:	08 14       	cp	r0, r8
     234:	63 03       	mulsu	r22, r19
     236:	04 78       	andi	r16, 0x84	; 132
     238:	04 03       	mulsu	r16, r20
     23a:	61 59       	subi	r22, 0x91	; 145
     23c:	49 4d       	sbci	r20, 0xD9	; 217
     23e:	43 00       	.word	0x0043	; ????
     240:	7f 41       	sbci	r23, 0x1F	; 31
     242:	41 41       	sbci	r20, 0x11	; 17
     244:	02 04       	cpc	r0, r2
     246:	08 10       	cpse	r0, r8
     248:	20 00       	.word	0x0020	; ????
     24a:	41 41       	sbci	r20, 0x11	; 17
     24c:	41 7f       	andi	r20, 0xF1	; 241
     24e:	04 02       	muls	r16, r20
     250:	01 02       	muls	r16, r17
     252:	04 40       	sbci	r16, 0x04	; 4
     254:	40 40       	sbci	r20, 0x00	; 0
     256:	40 40       	sbci	r20, 0x00	; 0
     258:	00 03       	mulsu	r16, r16
     25a:	07 08       	sbc	r0, r7
     25c:	00 20       	and	r0, r0
     25e:	54 54       	subi	r21, 0x44	; 68
     260:	78 40       	sbci	r23, 0x08	; 8
     262:	7f 28       	or	r7, r15
     264:	44 44       	sbci	r20, 0x44	; 68
     266:	38 38       	cpi	r19, 0x88	; 136
     268:	44 44       	sbci	r20, 0x44	; 68
     26a:	44 28       	or	r4, r4
     26c:	38 44       	sbci	r19, 0x48	; 72
     26e:	44 28       	or	r4, r4
     270:	7f 38       	cpi	r23, 0x8F	; 143
     272:	54 54       	subi	r21, 0x44	; 68
     274:	54 18       	sub	r5, r4
     276:	00 08       	sbc	r0, r0
     278:	7e 09       	sbc	r23, r14
     27a:	02 18       	sub	r0, r2
     27c:	a4 a4       	ldd	r10, Z+44	; 0x2c
     27e:	9c 78       	andi	r25, 0x8C	; 140
     280:	7f 08       	sbc	r7, r15
     282:	04 04       	cpc	r0, r4
     284:	78 00       	.word	0x0078	; ????
     286:	44 7d       	andi	r20, 0xD4	; 212
     288:	40 00       	.word	0x0040	; ????
     28a:	20 40       	sbci	r18, 0x00	; 0
     28c:	40 3d       	cpi	r20, 0xD0	; 208
     28e:	00 7f       	andi	r16, 0xF0	; 240
     290:	10 28       	or	r1, r0
     292:	44 00       	.word	0x0044	; ????
     294:	00 41       	sbci	r16, 0x10	; 16
     296:	7f 40       	sbci	r23, 0x0F	; 15
     298:	00 7c       	andi	r16, 0xC0	; 192
     29a:	04 78       	andi	r16, 0x84	; 132
     29c:	04 78       	andi	r16, 0x84	; 132
     29e:	7c 08       	sbc	r7, r12
     2a0:	04 04       	cpc	r0, r4
     2a2:	78 38       	cpi	r23, 0x88	; 136
     2a4:	44 44       	sbci	r20, 0x44	; 68
     2a6:	44 38       	cpi	r20, 0x84	; 132
     2a8:	fc 18       	sub	r15, r12
     2aa:	24 24       	eor	r2, r4
     2ac:	18 18       	sub	r1, r8
     2ae:	24 24       	eor	r2, r4
     2b0:	18 fc       	.word	0xfc18	; ????
     2b2:	7c 08       	sbc	r7, r12
     2b4:	04 04       	cpc	r0, r4
     2b6:	08 48       	sbci	r16, 0x88	; 136
     2b8:	54 54       	subi	r21, 0x44	; 68
     2ba:	54 24       	eor	r5, r4
     2bc:	04 04       	cpc	r0, r4
     2be:	3f 44       	sbci	r19, 0x4F	; 79
     2c0:	24 3c       	cpi	r18, 0xC4	; 196
     2c2:	40 40       	sbci	r20, 0x00	; 0
     2c4:	20 7c       	andi	r18, 0xC0	; 192
     2c6:	1c 20       	and	r1, r12
     2c8:	40 20       	and	r4, r0
     2ca:	1c 3c       	cpi	r17, 0xCC	; 204
     2cc:	40 30       	cpi	r20, 0x00	; 0
     2ce:	40 3c       	cpi	r20, 0xC0	; 192
     2d0:	44 28       	or	r4, r4
     2d2:	10 28       	or	r1, r0
     2d4:	44 4c       	sbci	r20, 0xC4	; 196
     2d6:	90 90 90 7c 	lds	r9, 0x7C90
     2da:	44 64       	ori	r20, 0x44	; 68
     2dc:	54 4c       	sbci	r21, 0xC4	; 196
     2de:	44 00       	.word	0x0044	; ????
     2e0:	08 36       	cpi	r16, 0x68	; 104
     2e2:	41 00       	.word	0x0041	; ????
     2e4:	00 00       	nop
     2e6:	77 00       	.word	0x0077	; ????
     2e8:	00 00       	nop
     2ea:	41 36       	cpi	r20, 0x61	; 97
     2ec:	08 00       	.word	0x0008	; ????
     2ee:	02 01       	movw	r0, r4
     2f0:	02 04       	cpc	r0, r2
     2f2:	02 3c       	cpi	r16, 0xC2	; 194
     2f4:	26 23       	and	r18, r22
     2f6:	26 3c       	cpi	r18, 0xC6	; 198
     2f8:	1e a1       	ldd	r17, Y+38	; 0x26
     2fa:	a1 61       	ori	r26, 0x11	; 17
     2fc:	12 3a       	cpi	r17, 0xA2	; 162
     2fe:	40 40       	sbci	r20, 0x00	; 0
     300:	20 7a       	andi	r18, 0xA0	; 160
     302:	38 54       	subi	r19, 0x48	; 72
     304:	54 55       	subi	r21, 0x54	; 84
     306:	59 21       	and	r21, r9
     308:	55 55       	subi	r21, 0x55	; 85
     30a:	79 41       	sbci	r23, 0x19	; 25
     30c:	21 54       	subi	r18, 0x41	; 65
     30e:	54 78       	andi	r21, 0x84	; 132
     310:	41 21       	and	r20, r1
     312:	55 54       	subi	r21, 0x45	; 69
     314:	78 40       	sbci	r23, 0x08	; 8
     316:	20 54       	subi	r18, 0x40	; 64
     318:	55 79       	andi	r21, 0x95	; 149
     31a:	40 0c       	add	r4, r0
     31c:	1e 52       	subi	r17, 0x2E	; 46
     31e:	72 12       	cpse	r7, r18
     320:	39 55       	subi	r19, 0x59	; 89
     322:	55 55       	subi	r21, 0x55	; 85
     324:	59 39       	cpi	r21, 0x99	; 153
     326:	54 54       	subi	r21, 0x44	; 68
     328:	54 59       	subi	r21, 0x94	; 148
     32a:	39 55       	subi	r19, 0x59	; 89
     32c:	54 54       	subi	r21, 0x44	; 68
     32e:	58 00       	.word	0x0058	; ????
     330:	00 45       	sbci	r16, 0x50	; 80
     332:	7c 41       	sbci	r23, 0x1C	; 28
     334:	00 02       	muls	r16, r16
     336:	45 7d       	andi	r20, 0xD5	; 213
     338:	42 00       	.word	0x0042	; ????
     33a:	01 45       	sbci	r16, 0x51	; 81
     33c:	7c 40       	sbci	r23, 0x0C	; 12
     33e:	f0 29       	or	r31, r0
     340:	24 29       	or	r18, r4
     342:	f0 f0       	brcs	.+60     	; 0x380 <__trampolines_end+0x308>
     344:	28 25       	eor	r18, r8
     346:	28 f0       	brcs	.+10     	; 0x352 <__trampolines_end+0x2da>
     348:	7c 54       	subi	r23, 0x4C	; 76
     34a:	55 45       	sbci	r21, 0x55	; 85
     34c:	00 20       	and	r0, r0
     34e:	54 54       	subi	r21, 0x44	; 68
     350:	7c 54       	subi	r23, 0x4C	; 76
     352:	7c 0a       	sbc	r7, r28
     354:	09 7f       	andi	r16, 0xF9	; 249
     356:	49 32       	cpi	r20, 0x29	; 41
     358:	49 49       	sbci	r20, 0x99	; 153
     35a:	49 32       	cpi	r20, 0x29	; 41
     35c:	32 48       	sbci	r19, 0x82	; 130
     35e:	48 48       	sbci	r20, 0x88	; 136
     360:	32 32       	cpi	r19, 0x22	; 34
     362:	4a 48       	sbci	r20, 0x8A	; 138
     364:	48 30       	cpi	r20, 0x08	; 8
     366:	3a 41       	sbci	r19, 0x1A	; 26
     368:	41 21       	and	r20, r1
     36a:	7a 3a       	cpi	r23, 0xAA	; 170
     36c:	42 40       	sbci	r20, 0x02	; 2
     36e:	20 78       	andi	r18, 0x80	; 128
     370:	00 9d       	mul	r16, r0
     372:	a0 a0       	ldd	r10, Z+32	; 0x20
     374:	7d 39       	cpi	r23, 0x9D	; 157
     376:	44 44       	sbci	r20, 0x44	; 68
     378:	44 39       	cpi	r20, 0x94	; 148
     37a:	3d 40       	sbci	r19, 0x0D	; 13
     37c:	40 40       	sbci	r20, 0x00	; 0
     37e:	3d 3c       	cpi	r19, 0xCD	; 205
     380:	24 ff       	sbrs	r18, 4
     382:	24 24       	eor	r2, r4
     384:	48 7e       	andi	r20, 0xE8	; 232
     386:	49 43       	sbci	r20, 0x39	; 57
     388:	66 2b       	or	r22, r22
     38a:	2f fc       	.word	0xfc2f	; ????
     38c:	2f 2b       	or	r18, r31
     38e:	ff 09       	sbc	r31, r15
     390:	29 f6       	brne	.-118    	; 0x31c <__trampolines_end+0x2a4>
     392:	20 c0       	rjmp	.+64     	; 0x3d4 <__trampolines_end+0x35c>
     394:	88 7e       	andi	r24, 0xE8	; 232
     396:	09 03       	fmul	r16, r17
     398:	20 54       	subi	r18, 0x40	; 64
     39a:	54 79       	andi	r21, 0x94	; 148
     39c:	41 00       	.word	0x0041	; ????
     39e:	00 44       	sbci	r16, 0x40	; 64
     3a0:	7d 41       	sbci	r23, 0x1D	; 29
     3a2:	30 48       	sbci	r19, 0x80	; 128
     3a4:	48 4a       	sbci	r20, 0xA8	; 168
     3a6:	32 38       	cpi	r19, 0x82	; 130
     3a8:	40 40       	sbci	r20, 0x00	; 0
     3aa:	22 7a       	andi	r18, 0xA2	; 162
     3ac:	00 7a       	andi	r16, 0xA0	; 160
     3ae:	0a 0a       	sbc	r0, r26
     3b0:	72 7d       	andi	r23, 0xD2	; 210
     3b2:	0d 19       	sub	r16, r13
     3b4:	31 7d       	andi	r19, 0xD1	; 209
     3b6:	26 29       	or	r18, r6
     3b8:	29 2f       	mov	r18, r25
     3ba:	28 26       	eor	r2, r24
     3bc:	29 29       	or	r18, r9
     3be:	29 26       	eor	r2, r25
     3c0:	30 48       	sbci	r19, 0x80	; 128
     3c2:	4d 40       	sbci	r20, 0x0D	; 13
     3c4:	20 38       	cpi	r18, 0x80	; 128
     3c6:	08 08       	sbc	r0, r8
     3c8:	08 08       	sbc	r0, r8
     3ca:	08 08       	sbc	r0, r8
     3cc:	08 08       	sbc	r0, r8
     3ce:	38 2f       	mov	r19, r24
     3d0:	10 c8       	rjmp	.-4064   	; 0xfffff3f2 <__eeprom_end+0xff7ef3f2>
     3d2:	ac ba       	out	0x1c, r10	; 28
     3d4:	2f 10       	cpse	r2, r15
     3d6:	28 34       	cpi	r18, 0x48	; 72
     3d8:	fa 00       	.word	0x00fa	; ????
     3da:	00 7b       	andi	r16, 0xB0	; 176
     3dc:	00 00       	nop
     3de:	08 14       	cp	r0, r8
     3e0:	2a 14       	cp	r2, r10
     3e2:	22 22       	and	r2, r18
     3e4:	14 2a       	or	r1, r20
     3e6:	14 08       	sbc	r1, r4
     3e8:	aa 00       	.word	0x00aa	; ????
     3ea:	55 00       	.word	0x0055	; ????
     3ec:	aa aa       	std	Y+50, r10	; 0x32
     3ee:	55 aa       	std	Z+53, r5	; 0x35
     3f0:	55 aa       	std	Z+53, r5	; 0x35
     3f2:	00 00       	nop
     3f4:	00 ff       	sbrs	r16, 0
     3f6:	00 10       	cpse	r0, r0
     3f8:	10 10       	cpse	r1, r0
     3fa:	ff 00       	.word	0x00ff	; ????
     3fc:	14 14       	cp	r1, r4
     3fe:	14 ff       	sbrs	r17, 4
     400:	00 10       	cpse	r0, r0
     402:	10 ff       	sbrs	r17, 0
     404:	00 ff       	sbrs	r16, 0
     406:	10 10       	cpse	r1, r0
     408:	f0 10       	cpse	r15, r0
     40a:	f0 14       	cp	r15, r0
     40c:	14 14       	cp	r1, r4
     40e:	fc 00       	.word	0x00fc	; ????
     410:	14 14       	cp	r1, r4
     412:	f7 00       	.word	0x00f7	; ????
     414:	ff 00       	.word	0x00ff	; ????
     416:	00 ff       	sbrs	r16, 0
     418:	00 ff       	sbrs	r16, 0
     41a:	14 14       	cp	r1, r4
     41c:	f4 04       	cpc	r15, r4
     41e:	fc 14       	cp	r15, r12
     420:	14 17       	cp	r17, r20
     422:	10 1f       	adc	r17, r16
     424:	10 10       	cpse	r1, r0
     426:	1f 10       	cpse	r1, r15
     428:	1f 14       	cp	r1, r15
     42a:	14 14       	cp	r1, r4
     42c:	1f 00       	.word	0x001f	; ????
     42e:	10 10       	cpse	r1, r0
     430:	10 f0       	brcs	.+4      	; 0x436 <__trampolines_end+0x3be>
     432:	00 00       	nop
     434:	00 00       	nop
     436:	1f 10       	cpse	r1, r15
     438:	10 10       	cpse	r1, r0
     43a:	10 1f       	adc	r17, r16
     43c:	10 10       	cpse	r1, r0
     43e:	10 10       	cpse	r1, r0
     440:	f0 10       	cpse	r15, r0
     442:	00 00       	nop
     444:	00 ff       	sbrs	r16, 0
     446:	10 10       	cpse	r1, r0
     448:	10 10       	cpse	r1, r0
     44a:	10 10       	cpse	r1, r0
     44c:	10 10       	cpse	r1, r0
     44e:	10 ff       	sbrs	r17, 0
     450:	10 00       	.word	0x0010	; ????
     452:	00 00       	nop
     454:	ff 14       	cp	r15, r15
     456:	00 00       	nop
     458:	ff 00       	.word	0x00ff	; ????
     45a:	ff 00       	.word	0x00ff	; ????
     45c:	00 1f       	adc	r16, r16
     45e:	10 17       	cp	r17, r16
     460:	00 00       	nop
     462:	fc 04       	cpc	r15, r12
     464:	f4 14       	cp	r15, r4
     466:	14 17       	cp	r17, r20
     468:	10 17       	cp	r17, r16
     46a:	14 14       	cp	r1, r4
     46c:	f4 04       	cpc	r15, r4
     46e:	f4 00       	.word	0x00f4	; ????
     470:	00 ff       	sbrs	r16, 0
     472:	00 f7       	brcc	.-64     	; 0x434 <__trampolines_end+0x3bc>
     474:	14 14       	cp	r1, r4
     476:	14 14       	cp	r1, r4
     478:	14 14       	cp	r1, r4
     47a:	14 f7       	brge	.-60     	; 0x440 <__trampolines_end+0x3c8>
     47c:	00 f7       	brcc	.-64     	; 0x43e <__trampolines_end+0x3c6>
     47e:	14 14       	cp	r1, r4
     480:	14 17       	cp	r17, r20
     482:	14 10       	cpse	r1, r4
     484:	10 1f       	adc	r17, r16
     486:	10 1f       	adc	r17, r16
     488:	14 14       	cp	r1, r4
     48a:	14 f4       	brge	.+4      	; 0x490 <__trampolines_end+0x418>
     48c:	14 10       	cpse	r1, r4
     48e:	10 f0       	brcs	.+4      	; 0x494 <__trampolines_end+0x41c>
     490:	10 f0       	brcs	.+4      	; 0x496 <__trampolines_end+0x41e>
     492:	00 00       	nop
     494:	1f 10       	cpse	r1, r15
     496:	1f 00       	.word	0x001f	; ????
     498:	00 00       	nop
     49a:	1f 14       	cp	r1, r15
     49c:	00 00       	nop
     49e:	00 fc       	sbrc	r0, 0
     4a0:	14 00       	.word	0x0014	; ????
     4a2:	00 f0       	brcs	.+0      	; 0x4a4 <__trampolines_end+0x42c>
     4a4:	10 f0       	brcs	.+4      	; 0x4aa <__trampolines_end+0x432>
     4a6:	10 10       	cpse	r1, r0
     4a8:	ff 10       	cpse	r15, r15
     4aa:	ff 14       	cp	r15, r15
     4ac:	14 14       	cp	r1, r4
     4ae:	ff 14       	cp	r15, r15
     4b0:	10 10       	cpse	r1, r0
     4b2:	10 1f       	adc	r17, r16
     4b4:	00 00       	nop
     4b6:	00 00       	nop
     4b8:	f0 10       	cpse	r15, r0
     4ba:	ff ff       	.word	0xffff	; ????
     4bc:	ff ff       	.word	0xffff	; ????
     4be:	ff f0       	brie	.+62     	; 0x4fe <__trampolines_end+0x486>
     4c0:	f0 f0       	brcs	.+60     	; 0x4fe <__trampolines_end+0x486>
     4c2:	f0 f0       	brcs	.+60     	; 0x500 <__trampolines_end+0x488>
     4c4:	ff ff       	.word	0xffff	; ????
     4c6:	ff 00       	.word	0x00ff	; ????
     4c8:	00 00       	nop
     4ca:	00 00       	nop
     4cc:	ff ff       	.word	0xffff	; ????
     4ce:	0f 0f       	add	r16, r31
     4d0:	0f 0f       	add	r16, r31
     4d2:	0f 38       	cpi	r16, 0x8F	; 143
     4d4:	44 44       	sbci	r20, 0x44	; 68
     4d6:	38 44       	sbci	r19, 0x48	; 72
     4d8:	7c 2a       	or	r7, r28
     4da:	2a 3e       	cpi	r18, 0xEA	; 234
     4dc:	14 7e       	andi	r17, 0xE4	; 228
     4de:	02 02       	muls	r16, r18
     4e0:	06 06       	cpc	r0, r22
     4e2:	02 7e       	andi	r16, 0xE2	; 226
     4e4:	02 7e       	andi	r16, 0xE2	; 226
     4e6:	02 63       	ori	r16, 0x32	; 50
     4e8:	55 49       	sbci	r21, 0x95	; 149
     4ea:	41 63       	ori	r20, 0x31	; 49
     4ec:	38 44       	sbci	r19, 0x48	; 72
     4ee:	44 3c       	cpi	r20, 0xC4	; 196
     4f0:	04 40       	sbci	r16, 0x04	; 4
     4f2:	7e 20       	and	r7, r14
     4f4:	1e 20       	and	r1, r14
     4f6:	06 02       	muls	r16, r22
     4f8:	7e 02       	muls	r23, r30
     4fa:	02 99       	sbic	0x00, 2	; 0
     4fc:	a5 e7       	ldi	r26, 0x75	; 117
     4fe:	a5 99       	sbic	0x14, 5	; 20
     500:	1c 2a       	or	r1, r28
     502:	49 2a       	or	r4, r25
     504:	1c 4c       	sbci	r17, 0xCC	; 204
     506:	72 01       	movw	r14, r4
     508:	72 4c       	sbci	r23, 0xC2	; 194
     50a:	30 4a       	sbci	r19, 0xA0	; 160
     50c:	4d 4d       	sbci	r20, 0xDD	; 221
     50e:	30 30       	cpi	r19, 0x00	; 0
     510:	48 78       	andi	r20, 0x88	; 136
     512:	48 30       	cpi	r20, 0x08	; 8
     514:	bc 62       	ori	r27, 0x2C	; 44
     516:	5a 46       	sbci	r21, 0x6A	; 106
     518:	3d 3e       	cpi	r19, 0xED	; 237
     51a:	49 49       	sbci	r20, 0x99	; 153
     51c:	49 00       	.word	0x0049	; ????
     51e:	7e 01       	movw	r14, r28
     520:	01 01       	movw	r0, r2
     522:	7e 2a       	or	r7, r30
     524:	2a 2a       	or	r2, r26
     526:	2a 2a       	or	r2, r26
     528:	44 44       	sbci	r20, 0x44	; 68
     52a:	5f 44       	sbci	r21, 0x4F	; 79
     52c:	44 40       	sbci	r20, 0x04	; 4
     52e:	51 4a       	sbci	r21, 0xA1	; 161
     530:	44 40       	sbci	r20, 0x04	; 4
     532:	40 44       	sbci	r20, 0x40	; 64
     534:	4a 51       	subi	r20, 0x1A	; 26
     536:	40 00       	.word	0x0040	; ????
     538:	00 ff       	sbrs	r16, 0
     53a:	01 03       	mulsu	r16, r17
     53c:	e0 80       	ld	r14, Z
     53e:	ff 00       	.word	0x00ff	; ????
     540:	00 08       	sbc	r0, r0
     542:	08 6b       	ori	r16, 0xB8	; 184
     544:	6b 08       	sbc	r6, r11
     546:	36 12       	cpse	r3, r22
     548:	36 24       	eor	r3, r6
     54a:	36 06       	cpc	r3, r22
     54c:	0f 09       	sbc	r16, r15
     54e:	0f 06       	cpc	r0, r31
     550:	00 00       	nop
     552:	18 18       	sub	r1, r8
     554:	00 00       	nop
     556:	00 10       	cpse	r0, r0
     558:	10 00       	.word	0x0010	; ????
     55a:	30 40       	sbci	r19, 0x00	; 0
     55c:	ff 01       	movw	r30, r30
     55e:	01 00       	.word	0x0001	; ????
     560:	1f 01       	movw	r2, r30
     562:	01 1e       	adc	r0, r17
     564:	00 19       	sub	r16, r0
     566:	1d 17       	cp	r17, r29
     568:	12 00       	.word	0x0012	; ????
     56a:	3c 3c       	cpi	r19, 0xCC	; 204
     56c:	3c 3c       	cpi	r19, 0xCC	; 204
     56e:	00 00       	nop
     570:	00 00       	nop
	...

00000574 <__ctors_end>:
     574:	11 24       	eor	r1, r1
     576:	1f be       	out	0x3f, r1	; 63
     578:	cf ef       	ldi	r28, 0xFF	; 255
     57a:	d8 e0       	ldi	r29, 0x08	; 8
     57c:	de bf       	out	0x3e, r29	; 62
     57e:	cd bf       	out	0x3d, r28	; 61

00000580 <__do_copy_data>:
     580:	11 e0       	ldi	r17, 0x01	; 1
     582:	a0 e0       	ldi	r26, 0x00	; 0
     584:	b1 e0       	ldi	r27, 0x01	; 1
     586:	ec ef       	ldi	r30, 0xFC	; 252
     588:	fe e2       	ldi	r31, 0x2E	; 46
     58a:	02 c0       	rjmp	.+4      	; 0x590 <__do_copy_data+0x10>
     58c:	05 90       	lpm	r0, Z+
     58e:	0d 92       	st	X+, r0
     590:	aa 3c       	cpi	r26, 0xCA	; 202
     592:	b1 07       	cpc	r27, r17
     594:	d9 f7       	brne	.-10     	; 0x58c <__do_copy_data+0xc>

00000596 <__do_clear_bss>:
     596:	28 e0       	ldi	r18, 0x08	; 8
     598:	aa ec       	ldi	r26, 0xCA	; 202
     59a:	b1 e0       	ldi	r27, 0x01	; 1
     59c:	01 c0       	rjmp	.+2      	; 0x5a0 <.do_clear_bss_start>

0000059e <.do_clear_bss_loop>:
     59e:	1d 92       	st	X+, r1

000005a0 <.do_clear_bss_start>:
     5a0:	ac 35       	cpi	r26, 0x5C	; 92
     5a2:	b2 07       	cpc	r27, r18
     5a4:	e1 f7       	brne	.-8      	; 0x59e <.do_clear_bss_loop>
     5a6:	0e 94 2e 13 	call	0x265c	; 0x265c <main>
     5aa:	0c 94 7c 17 	jmp	0x2ef8	; 0x2ef8 <_exit>

000005ae <__bad_interrupt>:
     5ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000005b2 <SPI_MasterInit>:
#define RES 1			// reset pin
void SPI_MasterInit(void)
{
	/* Set MOSI and SCK output, all others input */
	//PORTB = (1<<DDRB5)|(1<<DDRB7);
	DDRB = 0xFF; 
     5b2:	8f ef       	ldi	r24, 0xFF	; 255
     5b4:	84 b9       	out	0x04, r24	; 4
	// initialization for 1284
	//PORTB |= (1 << 0) | (1 << 1);
	//PORTB |= (1 << 5) | (1 << 7);

	//initialization for 328p
	PORTB |= (1 << 0) | (1 << 1);
     5b6:	85 b1       	in	r24, 0x05	; 5
     5b8:	83 60       	ori	r24, 0x03	; 3
     5ba:	85 b9       	out	0x05, r24	; 5
	PORTB |= (1 << 3) | (1 << 5);
     5bc:	85 b1       	in	r24, 0x05	; 5
     5be:	88 62       	ori	r24, 0x28	; 40
     5c0:	85 b9       	out	0x05, r24	; 5
	
	/* Enable SPI, Master, set clock rate fck/2 */
	SPCR = (1<<SPE)|(1<<MSTR)|(0<<SPR1)|(0 << SPR0);
     5c2:	80 e5       	ldi	r24, 0x50	; 80
     5c4:	8c bd       	out	0x2c, r24	; 44
	SPSR = (1 << SPI2X);
     5c6:	81 e0       	ldi	r24, 0x01	; 1
     5c8:	8d bd       	out	0x2d, r24	; 45
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5ca:	87 ea       	ldi	r24, 0xA7	; 167
     5cc:	91 e6       	ldi	r25, 0x61	; 97
     5ce:	01 97       	sbiw	r24, 0x01	; 1
     5d0:	f1 f7       	brne	.-4      	; 0x5ce <SPI_MasterInit+0x1c>
     5d2:	00 c0       	rjmp	.+0      	; 0x5d4 <SPI_MasterInit+0x22>
     5d4:	00 00       	nop
     5d6:	08 95       	ret

000005d8 <SoftwareReset>:
	_delay_ms(100);
}

void SoftwareReset(){
	RSPORT |= (1 << RES);
     5d8:	29 9a       	sbi	0x05, 1	; 5
     5da:	81 ee       	ldi	r24, 0xE1	; 225
     5dc:	94 e0       	ldi	r25, 0x04	; 4
     5de:	01 97       	sbiw	r24, 0x01	; 1
     5e0:	f1 f7       	brne	.-4      	; 0x5de <SoftwareReset+0x6>
     5e2:	00 c0       	rjmp	.+0      	; 0x5e4 <SoftwareReset+0xc>
     5e4:	00 00       	nop
	_delay_ms(5);
	RSPORT &= ~(1 << RES);
     5e6:	29 98       	cbi	0x05, 1	; 5
     5e8:	87 e8       	ldi	r24, 0x87	; 135
     5ea:	93 e1       	ldi	r25, 0x13	; 19
     5ec:	01 97       	sbiw	r24, 0x01	; 1
     5ee:	f1 f7       	brne	.-4      	; 0x5ec <SoftwareReset+0x14>
     5f0:	00 c0       	rjmp	.+0      	; 0x5f2 <SoftwareReset+0x1a>
     5f2:	00 00       	nop
	_delay_ms(20);
	RSPORT |= (1 << RES);
     5f4:	29 9a       	sbi	0x05, 1	; 5
     5f6:	8b e7       	ldi	r24, 0x7B	; 123
     5f8:	92 e9       	ldi	r25, 0x92	; 146
     5fa:	01 97       	sbiw	r24, 0x01	; 1
     5fc:	f1 f7       	brne	.-4      	; 0x5fa <SoftwareReset+0x22>
     5fe:	00 c0       	rjmp	.+0      	; 0x600 <SoftwareReset+0x28>
     600:	00 00       	nop
     602:	08 95       	ret

00000604 <writedata>:
}



void writedata(uint8_t c) {
	RSPORT |= (1 << RS);
     604:	28 9a       	sbi	0x05, 0	; 5
	RSPORT |= (1 << RES);
	_delay_ms(150);
}

inline void spiwrite(uint8_t c) {
	SPDR = c;
     606:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1 << SPIF))) ;
     608:	0d b4       	in	r0, 0x2d	; 45
     60a:	07 fe       	sbrs	r0, 7
     60c:	fd cf       	rjmp	.-6      	; 0x608 <writedata+0x4>


void writedata(uint8_t c) {
	RSPORT |= (1 << RS);
	spiwrite(c);
}
     60e:	08 95       	ret

00000610 <writecommand>:


void writecommand(uint8_t c) {
	RSPORT &= ~(1 << RS);
     610:	28 98       	cbi	0x05, 0	; 5
	RSPORT |= (1 << RES);
	_delay_ms(150);
}

inline void spiwrite(uint8_t c) {
	SPDR = c;
     612:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1 << SPIF))) ;
     614:	0d b4       	in	r0, 0x2d	; 45
     616:	07 fe       	sbrs	r0, 7
     618:	fd cf       	rjmp	.-6      	; 0x614 <writecommand+0x4>


void writecommand(uint8_t c) {
	RSPORT &= ~(1 << RS);
	spiwrite(c);
}
     61a:	08 95       	ret

0000061c <InitDisplay>:
#define COLOR_MAGENTA 0xF81F
#define COLOR_YELLOW  0xFFE0
#define COLOR_WHITE   0xFFFF

void InitDisplay(){
	SoftwareReset();
     61c:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <SoftwareReset>
	writecommand(ST7735_SLPOUT);
     620:	81 e1       	ldi	r24, 0x11	; 17
     622:	0e 94 08 03 	call	0x610	; 0x610 <writecommand>
     626:	8b e7       	ldi	r24, 0x7B	; 123
     628:	92 e9       	ldi	r25, 0x92	; 146
     62a:	01 97       	sbiw	r24, 0x01	; 1
     62c:	f1 f7       	brne	.-4      	; 0x62a <InitDisplay+0xe>
     62e:	00 c0       	rjmp	.+0      	; 0x630 <InitDisplay+0x14>
     630:	00 00       	nop
	_delay_ms(150);
	
	writecommand(ST7735_FRMCTR1);  // frame rate control - normal mode
     632:	81 eb       	ldi	r24, 0xB1	; 177
     634:	0e 94 08 03 	call	0x610	; 0x610 <writecommand>
	writedata(0x01);  // frame rate = fosc / (1 x 2 + 40) * (LINE + 2C + 2D)
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	0e 94 02 03 	call	0x604	; 0x604 <writedata>
	writedata(0x2C);
     63e:	8c e2       	ldi	r24, 0x2C	; 44
     640:	0e 94 02 03 	call	0x604	; 0x604 <writedata>
	writedata(0x2D);
     644:	8d e2       	ldi	r24, 0x2D	; 45
     646:	0e 94 02 03 	call	0x604	; 0x604 <writedata>

	writecommand(ST7735_FRMCTR2);  // frame rate control - idle mode
     64a:	82 eb       	ldi	r24, 0xB2	; 178
     64c:	0e 94 08 03 	call	0x610	; 0x610 <writecommand>
	writedata(0x01);  // frame rate = fosc / (1 x 2 + 40) * (LINE + 2C + 2D)
     650:	81 e0       	ldi	r24, 0x01	; 1
     652:	0e 94 02 03 	call	0x604	; 0x604 <writedata>
	writedata(0x2C);
     656:	8c e2       	ldi	r24, 0x2C	; 44
     658:	0e 94 02 03 	call	0x604	; 0x604 <writedata>
	writedata(0x2D);
     65c:	8d e2       	ldi	r24, 0x2D	; 45
     65e:	0e 94 02 03 	call	0x604	; 0x604 <writedata>

	writecommand(ST7735_FRMCTR3);  // frame rate control - partial mode
     662:	83 eb       	ldi	r24, 0xB3	; 179
     664:	0e 94 08 03 	call	0x610	; 0x610 <writecommand>
	writedata(0x01); // dot inversion mode
     668:	81 e0       	ldi	r24, 0x01	; 1
     66a:	0e 94 02 03 	call	0x604	; 0x604 <writedata>
	writedata(0x2C);
     66e:	8c e2       	ldi	r24, 0x2C	; 44
     670:	0e 94 02 03 	call	0x604	; 0x604 <writedata>
	writedata(0x2D);
     674:	8d e2       	ldi	r24, 0x2D	; 45
     676:	0e 94 02 03 	call	0x604	; 0x604 <writedata>
	writedata(0x01); // line inversion mode
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	0e 94 02 03 	call	0x604	; 0x604 <writedata>
	writedata(0x2C);
     680:	8c e2       	ldi	r24, 0x2C	; 44
     682:	0e 94 02 03 	call	0x604	; 0x604 <writedata>
	writedata(0x2D);
     686:	8d e2       	ldi	r24, 0x2D	; 45
     688:	0e 94 02 03 	call	0x604	; 0x604 <writedata>
	
	writecommand(ST7735_INVCTR);  // display inversion control
     68c:	84 eb       	ldi	r24, 0xB4	; 180
     68e:	0e 94 08 03 	call	0x610	; 0x610 <writecommand>
	writedata(0x07);  // no inversion
     692:	87 e0       	ldi	r24, 0x07	; 7
     694:	0e 94 02 03 	call	0x604	; 0x604 <writedata>

	writecommand(ST7735_PWCTR1);  // power control
     698:	80 ec       	ldi	r24, 0xC0	; 192
     69a:	0e 94 08 03 	call	0x610	; 0x610 <writecommand>
	writedata(0xA2);
     69e:	82 ea       	ldi	r24, 0xA2	; 162
     6a0:	0e 94 02 03 	call	0x604	; 0x604 <writedata>
	writedata(0x02);      // -4.6V
     6a4:	82 e0       	ldi	r24, 0x02	; 2
     6a6:	0e 94 02 03 	call	0x604	; 0x604 <writedata>
	writedata(0x84);      // AUTO mode
     6aa:	84 e8       	ldi	r24, 0x84	; 132
     6ac:	0e 94 02 03 	call	0x604	; 0x604 <writedata>

	writecommand(ST7735_PWCTR2);  // power control
     6b0:	81 ec       	ldi	r24, 0xC1	; 193
     6b2:	0e 94 08 03 	call	0x610	; 0x610 <writecommand>
	writedata(0xC5);      // VGH25 = 2.4C VGSEL = -10 VGH = 3 * AVDD
     6b6:	85 ec       	ldi	r24, 0xC5	; 197
     6b8:	0e 94 02 03 	call	0x604	; 0x604 <writedata>

	writecommand(ST7735_PWCTR3);  // power control
     6bc:	82 ec       	ldi	r24, 0xC2	; 194
     6be:	0e 94 08 03 	call	0x610	; 0x610 <writecommand>
	writedata(0x0A);      // Opamp current small
     6c2:	8a e0       	ldi	r24, 0x0A	; 10
     6c4:	0e 94 02 03 	call	0x604	; 0x604 <writedata>
	writedata(0x00);      // Boost frequency
     6c8:	80 e0       	ldi	r24, 0x00	; 0
     6ca:	0e 94 02 03 	call	0x604	; 0x604 <writedata>

	writecommand(ST7735_PWCTR4);  // power control
     6ce:	83 ec       	ldi	r24, 0xC3	; 195
     6d0:	0e 94 08 03 	call	0x610	; 0x610 <writecommand>
	writedata(0x8A);      // BCLK/2, Opamp current small & Medium low
     6d4:	8a e8       	ldi	r24, 0x8A	; 138
     6d6:	0e 94 02 03 	call	0x604	; 0x604 <writedata>
	writedata(0x2A);
     6da:	8a e2       	ldi	r24, 0x2A	; 42
     6dc:	0e 94 02 03 	call	0x604	; 0x604 <writedata>

	writecommand(ST7735_PWCTR5);  // power control
     6e0:	84 ec       	ldi	r24, 0xC4	; 196
     6e2:	0e 94 08 03 	call	0x610	; 0x610 <writecommand>
	writedata(0x8A);
     6e6:	8a e8       	ldi	r24, 0x8A	; 138
     6e8:	0e 94 02 03 	call	0x604	; 0x604 <writedata>
	writedata(0xEE);
     6ec:	8e ee       	ldi	r24, 0xEE	; 238
     6ee:	0e 94 02 03 	call	0x604	; 0x604 <writedata>

	writecommand(ST7735_VMCTR1);  // power control
     6f2:	85 ec       	ldi	r24, 0xC5	; 197
     6f4:	0e 94 08 03 	call	0x610	; 0x610 <writecommand>
	writedata(0x0E);
     6f8:	8e e0       	ldi	r24, 0x0E	; 14
     6fa:	0e 94 02 03 	call	0x604	; 0x604 <writedata>

	writecommand(ST7735_INVOFF);    // don't invert display
     6fe:	80 e2       	ldi	r24, 0x20	; 32
     700:	0e 94 08 03 	call	0x610	; 0x610 <writecommand>
	
	writecommand(ST7735_COLMOD);
     704:	8a e3       	ldi	r24, 0x3A	; 58
     706:	0e 94 08 03 	call	0x610	; 0x610 <writecommand>
	writedata(0x05);
     70a:	85 e0       	ldi	r24, 0x05	; 5
     70c:	0e 94 02 03 	call	0x604	; 0x604 <writedata>
	
	
	writecommand(ST7735_MADCTL);  // memory access control (directions)
     710:	86 e3       	ldi	r24, 0x36	; 54
     712:	0e 94 08 03 	call	0x610	; 0x610 <writecommand>
	writedata(0xC0);  // row address/col address, bottom to top refresh
     716:	80 ec       	ldi	r24, 0xC0	; 192
     718:	0e 94 02 03 	call	0x604	; 0x604 <writedata>
	
	writecommand(ST7735_CASET);  // column addr set
     71c:	8a e2       	ldi	r24, 0x2A	; 42
     71e:	0e 94 08 03 	call	0x610	; 0x610 <writecommand>
	writedata(0x00);
     722:	80 e0       	ldi	r24, 0x00	; 0
     724:	0e 94 02 03 	call	0x604	; 0x604 <writedata>
	writedata(0x00);   // XSTART = 0
     728:	80 e0       	ldi	r24, 0x00	; 0
     72a:	0e 94 02 03 	call	0x604	; 0x604 <writedata>
	writedata(0x00);
     72e:	80 e0       	ldi	r24, 0x00	; 0
     730:	0e 94 02 03 	call	0x604	; 0x604 <writedata>
	writedata(0x7F);   // XEND = 127
     734:	8f e7       	ldi	r24, 0x7F	; 127
     736:	0e 94 02 03 	call	0x604	; 0x604 <writedata>

	writecommand(ST7735_RASET);  // row addr set
     73a:	8b e2       	ldi	r24, 0x2B	; 43
     73c:	0e 94 08 03 	call	0x610	; 0x610 <writecommand>
	writedata(0x00);
     740:	80 e0       	ldi	r24, 0x00	; 0
     742:	0e 94 02 03 	call	0x604	; 0x604 <writedata>
	writedata(0x00);    // XSTART = 0
     746:	80 e0       	ldi	r24, 0x00	; 0
     748:	0e 94 02 03 	call	0x604	; 0x604 <writedata>
	writedata(0x00);
     74c:	80 e0       	ldi	r24, 0x00	; 0
     74e:	0e 94 02 03 	call	0x604	; 0x604 <writedata>
	writedata(0x9F);    // XEND = 159
     752:	8f e9       	ldi	r24, 0x9F	; 159
     754:	0e 94 02 03 	call	0x604	; 0x604 <writedata>
	
	writecommand(ST7735_GMCTRP1);
     758:	80 ee       	ldi	r24, 0xE0	; 224
     75a:	0e 94 08 03 	call	0x610	; 0x610 <writecommand>
	writedata(0x0f);
     75e:	8f e0       	ldi	r24, 0x0F	; 15
     760:	0e 94 02 03 	call	0x604	; 0x604 <writedata>
	writedata(0x1a);
     764:	8a e1       	ldi	r24, 0x1A	; 26
     766:	0e 94 02 03 	call	0x604	; 0x604 <writedata>
	writedata(0x0f);
     76a:	8f e0       	ldi	r24, 0x0F	; 15
     76c:	0e 94 02 03 	call	0x604	; 0x604 <writedata>
	writedata(0x18);
     770:	88 e1       	ldi	r24, 0x18	; 24
     772:	0e 94 02 03 	call	0x604	; 0x604 <writedata>
	writedata(0x2f);
     776:	8f e2       	ldi	r24, 0x2F	; 47
     778:	0e 94 02 03 	call	0x604	; 0x604 <writedata>
	writedata(0x28);
     77c:	88 e2       	ldi	r24, 0x28	; 40
     77e:	0e 94 02 03 	call	0x604	; 0x604 <writedata>
	writedata(0x20);
     782:	80 e2       	ldi	r24, 0x20	; 32
     784:	0e 94 02 03 	call	0x604	; 0x604 <writedata>
	writedata(0x22);
     788:	82 e2       	ldi	r24, 0x22	; 34
     78a:	0e 94 02 03 	call	0x604	; 0x604 <writedata>
	writedata(0x1f);
     78e:	8f e1       	ldi	r24, 0x1F	; 31
     790:	0e 94 02 03 	call	0x604	; 0x604 <writedata>
	writedata(0x1b);
     794:	8b e1       	ldi	r24, 0x1B	; 27
     796:	0e 94 02 03 	call	0x604	; 0x604 <writedata>
	writedata(0x23);
     79a:	83 e2       	ldi	r24, 0x23	; 35
     79c:	0e 94 02 03 	call	0x604	; 0x604 <writedata>
	writedata(0x37);
     7a0:	87 e3       	ldi	r24, 0x37	; 55
     7a2:	0e 94 02 03 	call	0x604	; 0x604 <writedata>
	writedata(0x00);
     7a6:	80 e0       	ldi	r24, 0x00	; 0
     7a8:	0e 94 02 03 	call	0x604	; 0x604 <writedata>
	writedata(0x07);
     7ac:	87 e0       	ldi	r24, 0x07	; 7
     7ae:	0e 94 02 03 	call	0x604	; 0x604 <writedata>
	writedata(0x02);
     7b2:	82 e0       	ldi	r24, 0x02	; 2
     7b4:	0e 94 02 03 	call	0x604	; 0x604 <writedata>
	writedata(0x10);
     7b8:	80 e1       	ldi	r24, 0x10	; 16
     7ba:	0e 94 02 03 	call	0x604	; 0x604 <writedata>
	writecommand(ST7735_GMCTRN1);
     7be:	81 ee       	ldi	r24, 0xE1	; 225
     7c0:	0e 94 08 03 	call	0x610	; 0x610 <writecommand>
	writedata(0x0f);
     7c4:	8f e0       	ldi	r24, 0x0F	; 15
     7c6:	0e 94 02 03 	call	0x604	; 0x604 <writedata>
	writedata(0x1b);
     7ca:	8b e1       	ldi	r24, 0x1B	; 27
     7cc:	0e 94 02 03 	call	0x604	; 0x604 <writedata>
	writedata(0x0f);
     7d0:	8f e0       	ldi	r24, 0x0F	; 15
     7d2:	0e 94 02 03 	call	0x604	; 0x604 <writedata>
	writedata(0x17);
     7d6:	87 e1       	ldi	r24, 0x17	; 23
     7d8:	0e 94 02 03 	call	0x604	; 0x604 <writedata>
	writedata(0x33);
     7dc:	83 e3       	ldi	r24, 0x33	; 51
     7de:	0e 94 02 03 	call	0x604	; 0x604 <writedata>
	writedata(0x2c);
     7e2:	8c e2       	ldi	r24, 0x2C	; 44
     7e4:	0e 94 02 03 	call	0x604	; 0x604 <writedata>
	writedata(0x29);
     7e8:	89 e2       	ldi	r24, 0x29	; 41
     7ea:	0e 94 02 03 	call	0x604	; 0x604 <writedata>
	writedata(0x2e);
     7ee:	8e e2       	ldi	r24, 0x2E	; 46
     7f0:	0e 94 02 03 	call	0x604	; 0x604 <writedata>
	writedata(0x30);
     7f4:	80 e3       	ldi	r24, 0x30	; 48
     7f6:	0e 94 02 03 	call	0x604	; 0x604 <writedata>
	writedata(0x30);
     7fa:	80 e3       	ldi	r24, 0x30	; 48
     7fc:	0e 94 02 03 	call	0x604	; 0x604 <writedata>
	writedata(0x39);
     800:	89 e3       	ldi	r24, 0x39	; 57
     802:	0e 94 02 03 	call	0x604	; 0x604 <writedata>
	writedata(0x3f);
     806:	8f e3       	ldi	r24, 0x3F	; 63
     808:	0e 94 02 03 	call	0x604	; 0x604 <writedata>
	writedata(0x00);
     80c:	80 e0       	ldi	r24, 0x00	; 0
     80e:	0e 94 02 03 	call	0x604	; 0x604 <writedata>
	writedata(0x07);
     812:	87 e0       	ldi	r24, 0x07	; 7
     814:	0e 94 02 03 	call	0x604	; 0x604 <writedata>
	writedata(0x03);
     818:	83 e0       	ldi	r24, 0x03	; 3
     81a:	0e 94 02 03 	call	0x604	; 0x604 <writedata>
	writedata(0x10);
     81e:	80 e1       	ldi	r24, 0x10	; 16
     820:	0e 94 02 03 	call	0x604	; 0x604 <writedata>
	
	writecommand(ST7735_DISPON);
     824:	89 e2       	ldi	r24, 0x29	; 41
     826:	0e 94 08 03 	call	0x610	; 0x610 <writecommand>
     82a:	87 ea       	ldi	r24, 0xA7	; 167
     82c:	91 e6       	ldi	r25, 0x61	; 97
     82e:	01 97       	sbiw	r24, 0x01	; 1
     830:	f1 f7       	brne	.-4      	; 0x82e <InitDisplay+0x212>
     832:	00 c0       	rjmp	.+0      	; 0x834 <InitDisplay+0x218>
     834:	00 00       	nop
	_delay_ms(100);
		writecommand(ST7735_NORON);  // normal display on
     836:	83 e1       	ldi	r24, 0x13	; 19
     838:	0e 94 08 03 	call	0x610	; 0x610 <writecommand>
     83c:	83 ec       	ldi	r24, 0xC3	; 195
     83e:	99 e0       	ldi	r25, 0x09	; 9
     840:	01 97       	sbiw	r24, 0x01	; 1
     842:	f1 f7       	brne	.-4      	; 0x840 <InitDisplay+0x224>
     844:	00 c0       	rjmp	.+0      	; 0x846 <InitDisplay+0x22a>
     846:	00 00       	nop
     848:	08 95       	ret

0000084a <setAddrWindow>:
	writecommand(ST7735_NORON);  // normal display on
	_delay_ms(10);
}

void setAddrWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
     84a:	0f 93       	push	r16
     84c:	1f 93       	push	r17
     84e:	cf 93       	push	r28
     850:	df 93       	push	r29
     852:	08 2f       	mov	r16, r24
     854:	d6 2f       	mov	r29, r22
     856:	14 2f       	mov	r17, r20
     858:	c2 2f       	mov	r28, r18
	writecommand(ST7735_CASET);  // column addr set
     85a:	8a e2       	ldi	r24, 0x2A	; 42
     85c:	0e 94 08 03 	call	0x610	; 0x610 <writecommand>
	writedata(0x00);
     860:	80 e0       	ldi	r24, 0x00	; 0
     862:	0e 94 02 03 	call	0x604	; 0x604 <writedata>
	writedata(x0+0);   // XSTART
     866:	80 2f       	mov	r24, r16
     868:	0e 94 02 03 	call	0x604	; 0x604 <writedata>
	writedata(0x00);
     86c:	80 e0       	ldi	r24, 0x00	; 0
     86e:	0e 94 02 03 	call	0x604	; 0x604 <writedata>
	writedata(x1+0);   // XEND
     872:	81 2f       	mov	r24, r17
     874:	0e 94 02 03 	call	0x604	; 0x604 <writedata>

	writecommand(ST7735_RASET);  // row addr set
     878:	8b e2       	ldi	r24, 0x2B	; 43
     87a:	0e 94 08 03 	call	0x610	; 0x610 <writecommand>
	writedata(0x00);
     87e:	80 e0       	ldi	r24, 0x00	; 0
     880:	0e 94 02 03 	call	0x604	; 0x604 <writedata>
	writedata(y0+0);    // YSTART
     884:	8d 2f       	mov	r24, r29
     886:	0e 94 02 03 	call	0x604	; 0x604 <writedata>
	writedata(0x00);
     88a:	80 e0       	ldi	r24, 0x00	; 0
     88c:	0e 94 02 03 	call	0x604	; 0x604 <writedata>
	writedata(y1+0);    // YEND
     890:	8c 2f       	mov	r24, r28
     892:	0e 94 02 03 	call	0x604	; 0x604 <writedata>

	writecommand(ST7735_RAMWR);  // write to RAM
     896:	8c e2       	ldi	r24, 0x2C	; 44
     898:	0e 94 08 03 	call	0x610	; 0x610 <writecommand>
}
     89c:	df 91       	pop	r29
     89e:	cf 91       	pop	r28
     8a0:	1f 91       	pop	r17
     8a2:	0f 91       	pop	r16
     8a4:	08 95       	ret

000008a6 <fillScreen>:
  // Pass 8-bit (each) R,G,B, get back 16-bit packed color
  inline uint16_t Color565(uint8_t r, uint8_t g, uint8_t b) {
	  return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | (b >> 3);
  }

void fillScreen(uint16_t color) {
     8a6:	cf 93       	push	r28
     8a8:	df 93       	push	r29
     8aa:	c8 2f       	mov	r28, r24
     8ac:	d9 2f       	mov	r29, r25
	//width, height

	setAddrWindow(0, 0, width-1, height-1);
     8ae:	20 91 13 01 	lds	r18, 0x0113
     8b2:	21 50       	subi	r18, 0x01	; 1
     8b4:	40 91 14 01 	lds	r20, 0x0114
     8b8:	41 50       	subi	r20, 0x01	; 1
     8ba:	60 e0       	ldi	r22, 0x00	; 0
     8bc:	80 e0       	ldi	r24, 0x00	; 0
     8be:	0e 94 25 04 	call	0x84a	; 0x84a <setAddrWindow>

	// setup for data
	RSPORT |= (1 << RS);
     8c2:	28 9a       	sbi	0x05, 0	; 5
	//*portOutputRegister(csport) &= ~ cspin;

	for (uint8_t x=0; x < width; x++) {
     8c4:	80 91 14 01 	lds	r24, 0x0114
     8c8:	88 23       	and	r24, r24
     8ca:	e1 f0       	breq	.+56     	; 0x904 <__stack+0x5>
		for (uint8_t y=0; y < height; y++) {
			spiwrite(color >> 8);
     8cc:	8d 2f       	mov	r24, r29

	// setup for data
	RSPORT |= (1 << RS);
	//*portOutputRegister(csport) &= ~ cspin;

	for (uint8_t x=0; x < width; x++) {
     8ce:	30 e0       	ldi	r19, 0x00	; 0
		for (uint8_t y=0; y < height; y++) {
     8d0:	40 e0       	ldi	r20, 0x00	; 0
     8d2:	12 c0       	rjmp	.+36     	; 0x8f8 <fillScreen+0x52>
	RSPORT |= (1 << RES);
	_delay_ms(150);
}

inline void spiwrite(uint8_t c) {
	SPDR = c;
     8d4:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1 << SPIF))) ;
     8d6:	0d b4       	in	r0, 0x2d	; 45
     8d8:	07 fe       	sbrs	r0, 7
     8da:	fd cf       	rjmp	.-6      	; 0x8d6 <fillScreen+0x30>
	RSPORT |= (1 << RES);
	_delay_ms(150);
}

inline void spiwrite(uint8_t c) {
	SPDR = c;
     8dc:	ce bd       	out	0x2e, r28	; 46
	while (!(SPSR & (1 << SPIF))) ;
     8de:	0d b4       	in	r0, 0x2d	; 45
     8e0:	07 fe       	sbrs	r0, 7
     8e2:	fd cf       	rjmp	.-6      	; 0x8de <fillScreen+0x38>
     8e4:	9f 5f       	subi	r25, 0xFF	; 255
     8e6:	20 91 13 01 	lds	r18, 0x0113
     8ea:	92 17       	cp	r25, r18
     8ec:	98 f3       	brcs	.-26     	; 0x8d4 <fillScreen+0x2e>

	// setup for data
	RSPORT |= (1 << RS);
	//*portOutputRegister(csport) &= ~ cspin;

	for (uint8_t x=0; x < width; x++) {
     8ee:	3f 5f       	subi	r19, 0xFF	; 255
     8f0:	90 91 14 01 	lds	r25, 0x0114
     8f4:	39 17       	cp	r19, r25
     8f6:	30 f4       	brcc	.+12     	; 0x904 <__stack+0x5>
		for (uint8_t y=0; y < height; y++) {
     8f8:	90 91 13 01 	lds	r25, 0x0113
     8fc:	99 23       	and	r25, r25
     8fe:	b9 f3       	breq	.-18     	; 0x8ee <fillScreen+0x48>
     900:	94 2f       	mov	r25, r20
     902:	e8 cf       	rjmp	.-48     	; 0x8d4 <fillScreen+0x2e>
			spiwrite(color);
		}
	}

	//*portOutputRegister(csport) |= cspin;
}
     904:	df 91       	pop	r29
     906:	cf 91       	pop	r28
     908:	08 95       	ret

0000090a <drawPixel>:

void drawPixel(int16_t x, int16_t y, uint16_t color) {
     90a:	cf 93       	push	r28
     90c:	df 93       	push	r29
     90e:	c4 2f       	mov	r28, r20
     910:	d5 2f       	mov	r29, r21
	if((x < 0) ||(x >= width) || (y < 0) || (y >= height)) return;
     912:	99 23       	and	r25, r25
     914:	ec f0       	brlt	.+58     	; 0x950 <drawPixel+0x46>
     916:	20 91 14 01 	lds	r18, 0x0114
     91a:	30 e0       	ldi	r19, 0x00	; 0
     91c:	82 17       	cp	r24, r18
     91e:	93 07       	cpc	r25, r19
     920:	bc f4       	brge	.+46     	; 0x950 <drawPixel+0x46>
     922:	77 23       	and	r23, r23
     924:	ac f0       	brlt	.+42     	; 0x950 <drawPixel+0x46>
     926:	20 91 13 01 	lds	r18, 0x0113
     92a:	30 e0       	ldi	r19, 0x00	; 0
     92c:	62 17       	cp	r22, r18
     92e:	73 07       	cpc	r23, r19
     930:	7c f4       	brge	.+30     	; 0x950 <drawPixel+0x46>

	setAddrWindow(x,y,x+1,y+1);
     932:	21 e0       	ldi	r18, 0x01	; 1
     934:	26 0f       	add	r18, r22
     936:	41 e0       	ldi	r20, 0x01	; 1
     938:	48 0f       	add	r20, r24
     93a:	0e 94 25 04 	call	0x84a	; 0x84a <setAddrWindow>
	
	//RSPORT |= (1 << RS);
	RSPORT |= (1 << RS);
     93e:	28 9a       	sbi	0x05, 0	; 5
	RSPORT |= (1 << RES);
	_delay_ms(150);
}

inline void spiwrite(uint8_t c) {
	SPDR = c;
     940:	de bd       	out	0x2e, r29	; 46
	while (!(SPSR & (1 << SPIF))) ;
     942:	0d b4       	in	r0, 0x2d	; 45
     944:	07 fe       	sbrs	r0, 7
     946:	fd cf       	rjmp	.-6      	; 0x942 <drawPixel+0x38>
	RSPORT |= (1 << RES);
	_delay_ms(150);
}

inline void spiwrite(uint8_t c) {
	SPDR = c;
     948:	ce bd       	out	0x2e, r28	; 46
	while (!(SPSR & (1 << SPIF))) ;
     94a:	0d b4       	in	r0, 0x2d	; 45
     94c:	07 fe       	sbrs	r0, 7
     94e:	fd cf       	rjmp	.-6      	; 0x94a <drawPixel+0x40>

	spiwrite(color >> 8);
	spiwrite(color);

}
     950:	df 91       	pop	r29
     952:	cf 91       	pop	r28
     954:	08 95       	ret

00000956 <fillRect>:
        spiwrite(lo);
    }
}

// fill a rectangle
void fillRect(int16_t x, int16_t y, int16_t w, int16_t h,uint16_t color) {
     956:	ef 92       	push	r14
     958:	ff 92       	push	r15
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	cf 93       	push	r28
     960:	df 93       	push	r29
     962:	ea 01       	movw	r28, r20
     964:	79 01       	movw	r14, r18
	// rudimentary clipping (drawChar w/big text requires this)
	if((x >= width) || (y >= height)) return;
     966:	20 91 14 01 	lds	r18, 0x0114
     96a:	30 e0       	ldi	r19, 0x00	; 0
     96c:	82 17       	cp	r24, r18
     96e:	93 07       	cpc	r25, r19
     970:	0c f0       	brlt	.+2      	; 0x974 <fillRect+0x1e>
     972:	41 c0       	rjmp	.+130    	; 0x9f6 <fillRect+0xa0>
     974:	40 91 13 01 	lds	r20, 0x0113
     978:	50 e0       	ldi	r21, 0x00	; 0
     97a:	64 17       	cp	r22, r20
     97c:	75 07       	cpc	r23, r21
     97e:	dc f5       	brge	.+118    	; 0x9f6 <fillRect+0xa0>
	if((x + w - 1) >= width)  w = width  - x;
     980:	fc 01       	movw	r30, r24
     982:	ec 0f       	add	r30, r28
     984:	fd 1f       	adc	r31, r29
     986:	31 97       	sbiw	r30, 0x01	; 1
     988:	e2 17       	cp	r30, r18
     98a:	f3 07       	cpc	r31, r19
     98c:	1c f0       	brlt	.+6      	; 0x994 <fillRect+0x3e>
     98e:	e9 01       	movw	r28, r18
     990:	c8 1b       	sub	r28, r24
     992:	d9 0b       	sbc	r29, r25
	if((y + h - 1) >= height) h = height - y;
     994:	9b 01       	movw	r18, r22
     996:	2e 0d       	add	r18, r14
     998:	3f 1d       	adc	r19, r15
     99a:	21 50       	subi	r18, 0x01	; 1
     99c:	31 09       	sbc	r19, r1
     99e:	24 17       	cp	r18, r20
     9a0:	35 07       	cpc	r19, r21
     9a2:	1c f0       	brlt	.+6      	; 0x9aa <fillRect+0x54>
     9a4:	7a 01       	movw	r14, r20
     9a6:	e6 1a       	sub	r14, r22
     9a8:	f7 0a       	sbc	r15, r23

	setAddrWindow(x, y, x+w-1, y+h-1);
     9aa:	2f ef       	ldi	r18, 0xFF	; 255
     9ac:	26 0f       	add	r18, r22
     9ae:	2e 0d       	add	r18, r14
     9b0:	4f ef       	ldi	r20, 0xFF	; 255
     9b2:	48 0f       	add	r20, r24
     9b4:	4c 0f       	add	r20, r28
     9b6:	0e 94 25 04 	call	0x84a	; 0x84a <setAddrWindow>

	uint8_t hi = color >> 8, lo = color;
	RSPORT |= (1 << RS);
     9ba:	28 9a       	sbi	0x05, 0	; 5

	for(y=h; y>0; y--) {
     9bc:	1e 14       	cp	r1, r14
     9be:	1f 04       	cpc	r1, r15
     9c0:	d4 f4       	brge	.+52     	; 0x9f6 <fillRect+0xa0>
     9c2:	97 01       	movw	r18, r14
		for(x=w; x>0; x--) {
     9c4:	5c 2f       	mov	r21, r28
     9c6:	4d 2f       	mov	r20, r29
     9c8:	10 c0       	rjmp	.+32     	; 0x9ea <fillRect+0x94>
	RSPORT |= (1 << RES);
	_delay_ms(150);
}

inline void spiwrite(uint8_t c) {
	SPDR = c;
     9ca:	1e bd       	out	0x2e, r17	; 46
	while (!(SPSR & (1 << SPIF))) ;
     9cc:	0d b4       	in	r0, 0x2d	; 45
     9ce:	07 fe       	sbrs	r0, 7
     9d0:	fd cf       	rjmp	.-6      	; 0x9cc <fillRect+0x76>
	RSPORT |= (1 << RES);
	_delay_ms(150);
}

inline void spiwrite(uint8_t c) {
	SPDR = c;
     9d2:	0e bd       	out	0x2e, r16	; 46
	while (!(SPSR & (1 << SPIF))) ;
     9d4:	0d b4       	in	r0, 0x2d	; 45
     9d6:	07 fe       	sbrs	r0, 7
     9d8:	fd cf       	rjmp	.-6      	; 0x9d4 <fillRect+0x7e>
     9da:	01 97       	sbiw	r24, 0x01	; 1
     9dc:	00 97       	sbiw	r24, 0x00	; 0
     9de:	a9 f7       	brne	.-22     	; 0x9ca <fillRect+0x74>
	setAddrWindow(x, y, x+w-1, y+h-1);

	uint8_t hi = color >> 8, lo = color;
	RSPORT |= (1 << RS);

	for(y=h; y>0; y--) {
     9e0:	21 50       	subi	r18, 0x01	; 1
     9e2:	31 09       	sbc	r19, r1
     9e4:	21 15       	cp	r18, r1
     9e6:	31 05       	cpc	r19, r1
     9e8:	31 f0       	breq	.+12     	; 0x9f6 <fillRect+0xa0>
		for(x=w; x>0; x--) {
     9ea:	1c 16       	cp	r1, r28
     9ec:	1d 06       	cpc	r1, r29
     9ee:	c4 f7       	brge	.-16     	; 0x9e0 <fillRect+0x8a>
     9f0:	85 2f       	mov	r24, r21
     9f2:	94 2f       	mov	r25, r20
     9f4:	ea cf       	rjmp	.-44     	; 0x9ca <fillRect+0x74>
			spiwrite(hi);
			spiwrite(lo);
		}
	}
}
     9f6:	df 91       	pop	r29
     9f8:	cf 91       	pop	r28
     9fa:	1f 91       	pop	r17
     9fc:	0f 91       	pop	r16
     9fe:	ff 90       	pop	r15
     a00:	ef 90       	pop	r14
     a02:	08 95       	ret

00000a04 <drawChar>:
// draw a character
void drawChar(uint8_t x, uint8_t y, char c,
uint16_t color, uint8_t size) {
     a04:	2f 92       	push	r2
     a06:	3f 92       	push	r3
     a08:	4f 92       	push	r4
     a0a:	5f 92       	push	r5
     a0c:	6f 92       	push	r6
     a0e:	7f 92       	push	r7
     a10:	8f 92       	push	r8
     a12:	9f 92       	push	r9
     a14:	af 92       	push	r10
     a16:	bf 92       	push	r11
     a18:	cf 92       	push	r12
     a1a:	df 92       	push	r13
     a1c:	ef 92       	push	r14
     a1e:	ff 92       	push	r15
     a20:	0f 93       	push	r16
     a22:	1f 93       	push	r17
     a24:	cf 93       	push	r28
     a26:	df 93       	push	r29
     a28:	cd b7       	in	r28, 0x3d	; 61
     a2a:	de b7       	in	r29, 0x3e	; 62
     a2c:	2a 97       	sbiw	r28, 0x0a	; 10
     a2e:	0f b6       	in	r0, 0x3f	; 63
     a30:	f8 94       	cli
     a32:	de bf       	out	0x3e, r29	; 62
     a34:	0f be       	out	0x3f, r0	; 63
     a36:	cd bf       	out	0x3d, r28	; 61
     a38:	39 01       	movw	r6, r18
	for (uint8_t i =0; i<5; i++ ) {
		uint8_t line = pgm_read_byte(font+(c*5)+i);
     a3a:	50 e0       	ldi	r21, 0x00	; 0
     a3c:	9a 01       	movw	r18, r20
     a3e:	22 0f       	add	r18, r18
     a40:	33 1f       	adc	r19, r19
     a42:	22 0f       	add	r18, r18
     a44:	33 1f       	adc	r19, r19
     a46:	d9 01       	movw	r26, r18
     a48:	a4 0f       	add	r26, r20
     a4a:	b5 1f       	adc	r27, r21
     a4c:	b8 87       	std	Y+8, r27	; 0x08
     a4e:	af 83       	std	Y+7, r26	; 0x07
     a50:	15 e0       	ldi	r17, 0x05	; 5
	}
}
// draw a character
void drawChar(uint8_t x, uint8_t y, char c,
uint16_t color, uint8_t size) {
	for (uint8_t i =0; i<5; i++ ) {
     a52:	41 2c       	mov	r4, r1
		for (uint8_t j = 0; j<8; j++) {
			if (line & 0x1) {
				if (size == 1) // default size
				drawPixel(x+i, y+j, color);
				else {  // big size
					fillRect(x+i*size, y+j*size, size, size, color);
     a54:	e0 2f       	mov	r30, r16
     a56:	f0 e0       	ldi	r31, 0x00	; 0
     a58:	fe 83       	std	Y+6, r31	; 0x06
     a5a:	ed 83       	std	Y+5, r30	; 0x05
     a5c:	28 2f       	mov	r18, r24
     a5e:	30 e0       	ldi	r19, 0x00	; 0
     a60:	3a 83       	std	Y+2, r19	; 0x02
     a62:	29 83       	std	Y+1, r18	; 0x01
     a64:	6f 01       	movw	r12, r30
     a66:	26 2e       	mov	r2, r22
     a68:	31 2c       	mov	r3, r1
     a6a:	51 2e       	mov	r5, r17
}
// draw a character
void drawChar(uint8_t x, uint8_t y, char c,
uint16_t color, uint8_t size) {
	for (uint8_t i =0; i<5; i++ ) {
		uint8_t line = pgm_read_byte(font+(c*5)+i);
     a6c:	ef 81       	ldd	r30, Y+7	; 0x07
     a6e:	f8 85       	ldd	r31, Y+8	; 0x08
     a70:	e4 0d       	add	r30, r4
     a72:	f1 1d       	adc	r31, r1
     a74:	e8 58       	subi	r30, 0x88	; 136
     a76:	ff 4f       	sbci	r31, 0xFF	; 255
     a78:	14 91       	lpm	r17, Z
		for (uint8_t j = 0; j<8; j++) {
			if (line & 0x1) {
				if (size == 1) // default size
				drawPixel(x+i, y+j, color);
				else {  // big size
					fillRect(x+i*size, y+j*size, size, size, color);
     a7a:	84 2d       	mov	r24, r4
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	ad 81       	ldd	r26, Y+5	; 0x05
     a80:	be 81       	ldd	r27, Y+6	; 0x06
     a82:	a8 9f       	mul	r26, r24
     a84:	40 01       	movw	r8, r0
     a86:	a9 9f       	mul	r26, r25
     a88:	90 0c       	add	r9, r0
     a8a:	b8 9f       	mul	r27, r24
     a8c:	90 0c       	add	r9, r0
     a8e:	11 24       	eor	r1, r1
     a90:	e9 81       	ldd	r30, Y+1	; 0x01
     a92:	fa 81       	ldd	r31, Y+2	; 0x02
     a94:	8e 0e       	add	r8, r30
     a96:	9f 1e       	adc	r9, r31
     a98:	a1 2c       	mov	r10, r1
     a9a:	b1 2c       	mov	r11, r1
     a9c:	e1 2c       	mov	r14, r1
     a9e:	f1 2c       	mov	r15, r1
	for (uint8_t i =0; i<5; i++ ) {
		uint8_t line = pgm_read_byte(font+(c*5)+i);
		for (uint8_t j = 0; j<8; j++) {
			if (line & 0x1) {
				if (size == 1) // default size
				drawPixel(x+i, y+j, color);
     aa0:	e8 0f       	add	r30, r24
     aa2:	f9 1f       	adc	r31, r25
     aa4:	fc 83       	std	Y+4, r31	; 0x04
     aa6:	eb 83       	std	Y+3, r30	; 0x03
     aa8:	1a 87       	std	Y+10, r17	; 0x0a
     aaa:	09 87       	std	Y+9, r16	; 0x09
void drawChar(uint8_t x, uint8_t y, char c,
uint16_t color, uint8_t size) {
	for (uint8_t i =0; i<5; i++ ) {
		uint8_t line = pgm_read_byte(font+(c*5)+i);
		for (uint8_t j = 0; j<8; j++) {
			if (line & 0x1) {
     aac:	fa 85       	ldd	r31, Y+10	; 0x0a
     aae:	f0 ff       	sbrs	r31, 0
     ab0:	15 c0       	rjmp	.+42     	; 0xadc <drawChar+0xd8>
				if (size == 1) // default size
     ab2:	29 85       	ldd	r18, Y+9	; 0x09
     ab4:	21 30       	cpi	r18, 0x01	; 1
     ab6:	49 f4       	brne	.+18     	; 0xaca <drawChar+0xc6>
				drawPixel(x+i, y+j, color);
     ab8:	a3 01       	movw	r20, r6
     aba:	b7 01       	movw	r22, r14
     abc:	62 0d       	add	r22, r2
     abe:	73 1d       	adc	r23, r3
     ac0:	8b 81       	ldd	r24, Y+3	; 0x03
     ac2:	9c 81       	ldd	r25, Y+4	; 0x04
     ac4:	0e 94 85 04 	call	0x90a	; 0x90a <drawPixel>
     ac8:	09 c0       	rjmp	.+18     	; 0xadc <drawChar+0xd8>
				else {  // big size
					fillRect(x+i*size, y+j*size, size, size, color);
     aca:	83 01       	movw	r16, r6
     acc:	96 01       	movw	r18, r12
     ace:	a6 01       	movw	r20, r12
     ad0:	b5 01       	movw	r22, r10
     ad2:	62 0d       	add	r22, r2
     ad4:	73 1d       	adc	r23, r3
     ad6:	c4 01       	movw	r24, r8
     ad8:	0e 94 ab 04 	call	0x956	; 0x956 <fillRect>
				}
			}
			line >>= 1;
     adc:	3a 85       	ldd	r19, Y+10	; 0x0a
     ade:	36 95       	lsr	r19
     ae0:	3a 87       	std	Y+10, r19	; 0x0a
     ae2:	8f ef       	ldi	r24, 0xFF	; 255
     ae4:	e8 1a       	sub	r14, r24
     ae6:	f8 0a       	sbc	r15, r24
     ae8:	ac 0c       	add	r10, r12
     aea:	bd 1c       	adc	r11, r13
// draw a character
void drawChar(uint8_t x, uint8_t y, char c,
uint16_t color, uint8_t size) {
	for (uint8_t i =0; i<5; i++ ) {
		uint8_t line = pgm_read_byte(font+(c*5)+i);
		for (uint8_t j = 0; j<8; j++) {
     aec:	a8 e0       	ldi	r26, 0x08	; 8
     aee:	ea 16       	cp	r14, r26
     af0:	f1 04       	cpc	r15, r1
     af2:	e1 f6       	brne	.-72     	; 0xaac <drawChar+0xa8>
     af4:	09 85       	ldd	r16, Y+9	; 0x09
	}
}
// draw a character
void drawChar(uint8_t x, uint8_t y, char c,
uint16_t color, uint8_t size) {
	for (uint8_t i =0; i<5; i++ ) {
     af6:	43 94       	inc	r4
     af8:	5a 94       	dec	r5
     afa:	09 f0       	breq	.+2      	; 0xafe <drawChar+0xfa>
     afc:	b7 cf       	rjmp	.-146    	; 0xa6c <drawChar+0x68>
				}
			}
			line >>= 1;
		}
	}
}
     afe:	2a 96       	adiw	r28, 0x0a	; 10
     b00:	0f b6       	in	r0, 0x3f	; 63
     b02:	f8 94       	cli
     b04:	de bf       	out	0x3e, r29	; 62
     b06:	0f be       	out	0x3f, r0	; 63
     b08:	cd bf       	out	0x3d, r28	; 61
     b0a:	df 91       	pop	r29
     b0c:	cf 91       	pop	r28
     b0e:	1f 91       	pop	r17
     b10:	0f 91       	pop	r16
     b12:	ff 90       	pop	r15
     b14:	ef 90       	pop	r14
     b16:	df 90       	pop	r13
     b18:	cf 90       	pop	r12
     b1a:	bf 90       	pop	r11
     b1c:	af 90       	pop	r10
     b1e:	9f 90       	pop	r9
     b20:	8f 90       	pop	r8
     b22:	7f 90       	pop	r7
     b24:	6f 90       	pop	r6
     b26:	5f 90       	pop	r5
     b28:	4f 90       	pop	r4
     b2a:	3f 90       	pop	r3
     b2c:	2f 90       	pop	r2
     b2e:	08 95       	ret

00000b30 <drawString>:

void drawString(uint8_t x, uint8_t y, char *c,
uint16_t color, uint8_t size) {
     b30:	af 92       	push	r10
     b32:	bf 92       	push	r11
     b34:	cf 92       	push	r12
     b36:	df 92       	push	r13
     b38:	ef 92       	push	r14
     b3a:	ff 92       	push	r15
     b3c:	0f 93       	push	r16
     b3e:	1f 93       	push	r17
     b40:	cf 93       	push	r28
     b42:	df 93       	push	r29
     b44:	18 2f       	mov	r17, r24
     b46:	d6 2e       	mov	r13, r22
     b48:	79 01       	movw	r14, r18
     b4a:	c0 2e       	mov	r12, r16
	while (c[0] != 0) {
		drawChar(x, y, c[0], color, size);
		x += size*6;
     b4c:	b0 2e       	mov	r11, r16
     b4e:	bb 0c       	add	r11, r11
     b50:	b0 0e       	add	r11, r16
     b52:	bb 0c       	add	r11, r11
     b54:	c4 2f       	mov	r28, r20
     b56:	d5 2f       	mov	r29, r21
		c++;
		if (x + 5 >= width) {
			y += 10;
			x = 0;
     b58:	a1 2c       	mov	r10, r1
	}
}

void drawString(uint8_t x, uint8_t y, char *c,
uint16_t color, uint8_t size) {
	while (c[0] != 0) {
     b5a:	13 c0       	rjmp	.+38     	; 0xb82 <drawString+0x52>
		drawChar(x, y, c[0], color, size);
     b5c:	0c 2d       	mov	r16, r12
     b5e:	97 01       	movw	r18, r14
     b60:	6d 2d       	mov	r22, r13
     b62:	81 2f       	mov	r24, r17
     b64:	0e 94 02 05 	call	0xa04	; 0xa04 <drawChar>
		x += size*6;
     b68:	1b 0d       	add	r17, r11
		c++;
		if (x + 5 >= width) {
     b6a:	e1 2f       	mov	r30, r17
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	35 96       	adiw	r30, 0x05	; 5
     b70:	40 91 14 01 	lds	r20, 0x0114
     b74:	50 e0       	ldi	r21, 0x00	; 0
     b76:	e4 17       	cp	r30, r20
     b78:	f5 07       	cpc	r31, r21
     b7a:	1c f0       	brlt	.+6      	; 0xb82 <drawString+0x52>
			y += 10;
     b7c:	8a e0       	ldi	r24, 0x0A	; 10
     b7e:	d8 0e       	add	r13, r24
			x = 0;
     b80:	1a 2d       	mov	r17, r10
	}
}

void drawString(uint8_t x, uint8_t y, char *c,
uint16_t color, uint8_t size) {
	while (c[0] != 0) {
     b82:	49 91       	ld	r20, Y+
     b84:	41 11       	cpse	r20, r1
     b86:	ea cf       	rjmp	.-44     	; 0xb5c <drawString+0x2c>
		if (x + 5 >= width) {
			y += 10;
			x = 0;
		}
	}
}
     b88:	df 91       	pop	r29
     b8a:	cf 91       	pop	r28
     b8c:	1f 91       	pop	r17
     b8e:	0f 91       	pop	r16
     b90:	ff 90       	pop	r15
     b92:	ef 90       	pop	r14
     b94:	df 90       	pop	r13
     b96:	cf 90       	pop	r12
     b98:	bf 90       	pop	r11
     b9a:	af 90       	pop	r10
     b9c:	08 95       	ret

00000b9e <init_Snake1>:
	int x, y;
} ;
struct SnakeSegment segments1[max_length];
struct SnakeSegment segments2[max_length];

void init_Snake1(uint8_t _length, uint8_t _pos){
     b9e:	ef 92       	push	r14
     ba0:	ff 92       	push	r15
     ba2:	0f 93       	push	r16
     ba4:	1f 93       	push	r17
     ba6:	cf 93       	push	r28
     ba8:	df 93       	push	r29
	game_over = 0;
     baa:	10 92 de 01 	sts	0x01DE, r1
	snake_score_1 = 0;
     bae:	10 92 dd 01 	sts	0x01DD, r1
	snake_score_2 = 0;
     bb2:	10 92 dc 01 	sts	0x01DC, r1
	xPos1 = width/2; yPos1 = _pos;
     bb6:	90 91 14 01 	lds	r25, 0x0114
     bba:	96 95       	lsr	r25
     bbc:	29 2f       	mov	r18, r25
     bbe:	30 e0       	ldi	r19, 0x00	; 0
     bc0:	30 93 3e 08 	sts	0x083E, r19
     bc4:	20 93 3d 08 	sts	0x083D, r18
     bc8:	26 2f       	mov	r18, r22
     bca:	30 e0       	ldi	r19, 0x00	; 0
     bcc:	30 93 15 05 	sts	0x0515, r19
     bd0:	20 93 14 05 	sts	0x0514, r18
     bd4:	49 e3       	ldi	r20, 0x39	; 57
     bd6:	58 e0       	ldi	r21, 0x08	; 8
     bd8:	e9 e1       	ldi	r30, 0x19	; 25
     bda:	f5 e0       	ldi	r31, 0x05	; 5
	
	//initialize x and y pos to -1
	for(int i = 0; i < max_length; i++){
		segments1[i].x = -1;
     bdc:	2f ef       	ldi	r18, 0xFF	; 255
     bde:	3f ef       	ldi	r19, 0xFF	; 255
     be0:	31 83       	std	Z+1, r19	; 0x01
     be2:	20 83       	st	Z, r18
		segments1[i].y = -1;
     be4:	33 83       	std	Z+3, r19	; 0x03
     be6:	22 83       	std	Z+2, r18	; 0x02
     be8:	34 96       	adiw	r30, 0x04	; 4
	snake_score_1 = 0;
	snake_score_2 = 0;
	xPos1 = width/2; yPos1 = _pos;
	
	//initialize x and y pos to -1
	for(int i = 0; i < max_length; i++){
     bea:	e4 17       	cp	r30, r20
     bec:	f5 07       	cpc	r31, r21
     bee:	c1 f7       	brne	.-16     	; 0xbe0 <init_Snake1+0x42>
		segments1[i].x = -1;
		segments1[i].y = -1;
	}
	
	//initialize with length
	for(int i = 0; i < _length; i++){
     bf0:	a8 2f       	mov	r26, r24
     bf2:	b0 e0       	ldi	r27, 0x00	; 0
     bf4:	1a 16       	cp	r1, r26
     bf6:	1b 06       	cpc	r1, r27
     bf8:	9c f5       	brge	.+102    	; 0xc60 <init_Snake1+0xc2>
		segments1[i].x = width/2 - i;
		segments1[i].y = _pos/2;// -i;
     bfa:	66 95       	lsr	r22
     bfc:	c6 2f       	mov	r28, r22
     bfe:	d0 e0       	ldi	r29, 0x00	; 0
     c00:	e9 e1       	ldi	r30, 0x19	; 25
     c02:	f5 e0       	ldi	r31, 0x05	; 5
     c04:	20 e0       	ldi	r18, 0x00	; 0
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	69 2f       	mov	r22, r25
     c0a:	70 e0       	ldi	r23, 0x00	; 0
     c0c:	ab 01       	movw	r20, r22
     c0e:	42 1b       	sub	r20, r18
     c10:	53 0b       	sbc	r21, r19
		segments1[i].y = -1;
	}
	
	//initialize with length
	for(int i = 0; i < _length; i++){
		segments1[i].x = width/2 - i;
     c12:	51 83       	std	Z+1, r21	; 0x01
     c14:	40 83       	st	Z, r20
		segments1[i].y = _pos/2;// -i;
     c16:	d3 83       	std	Z+3, r29	; 0x03
     c18:	c2 83       	std	Z+2, r28	; 0x02
		segments1[i].x = -1;
		segments1[i].y = -1;
	}
	
	//initialize with length
	for(int i = 0; i < _length; i++){
     c1a:	2f 5f       	subi	r18, 0xFF	; 255
     c1c:	3f 4f       	sbci	r19, 0xFF	; 255
     c1e:	34 96       	adiw	r30, 0x04	; 4
     c20:	2a 17       	cp	r18, r26
     c22:	3b 07       	cpc	r19, r27
     c24:	99 f7       	brne	.-26     	; 0xc0c <init_Snake1+0x6e>
		segments1[i].x = width/2 - i;
		segments1[i].y = _pos/2;// -i;
	}
	current_segment1 = _length;
     c26:	80 93 e0 01 	sts	0x01E0, r24
     c2a:	c9 e1       	ldi	r28, 0x19	; 25
     c2c:	d5 e0       	ldi	r29, 0x05	; 5
	
	for(int i = 0; i < current_segment1; i++){
     c2e:	e1 2c       	mov	r14, r1
     c30:	f1 2c       	mov	r15, r1
		fillRect(segments1[i].x, segments1[i].y, 1, 1, 0xFF);
     c32:	6a 81       	ldd	r22, Y+2	; 0x02
     c34:	7b 81       	ldd	r23, Y+3	; 0x03
     c36:	0f ef       	ldi	r16, 0xFF	; 255
     c38:	10 e0       	ldi	r17, 0x00	; 0
     c3a:	21 e0       	ldi	r18, 0x01	; 1
     c3c:	30 e0       	ldi	r19, 0x00	; 0
     c3e:	41 e0       	ldi	r20, 0x01	; 1
     c40:	50 e0       	ldi	r21, 0x00	; 0
     c42:	88 81       	ld	r24, Y
     c44:	99 81       	ldd	r25, Y+1	; 0x01
     c46:	0e 94 ab 04 	call	0x956	; 0x956 <fillRect>
		segments1[i].x = width/2 - i;
		segments1[i].y = _pos/2;// -i;
	}
	current_segment1 = _length;
	
	for(int i = 0; i < current_segment1; i++){
     c4a:	8f ef       	ldi	r24, 0xFF	; 255
     c4c:	e8 1a       	sub	r14, r24
     c4e:	f8 0a       	sbc	r15, r24
     c50:	24 96       	adiw	r28, 0x04	; 4
     c52:	80 91 e0 01 	lds	r24, 0x01E0
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	e8 16       	cp	r14, r24
     c5a:	f9 06       	cpc	r15, r25
     c5c:	54 f3       	brlt	.-44     	; 0xc32 <init_Snake1+0x94>
     c5e:	02 c0       	rjmp	.+4      	; 0xc64 <init_Snake1+0xc6>
	//initialize with length
	for(int i = 0; i < _length; i++){
		segments1[i].x = width/2 - i;
		segments1[i].y = _pos/2;// -i;
	}
	current_segment1 = _length;
     c60:	80 93 e0 01 	sts	0x01E0, r24
	
	for(int i = 0; i < current_segment1; i++){
		fillRect(segments1[i].x, segments1[i].y, 1, 1, 0xFF);
		//fillRect(xLast, yLast, 1, 1, 0x0000);
	}
}
     c64:	df 91       	pop	r29
     c66:	cf 91       	pop	r28
     c68:	1f 91       	pop	r17
     c6a:	0f 91       	pop	r16
     c6c:	ff 90       	pop	r15
     c6e:	ef 90       	pop	r14
     c70:	08 95       	ret

00000c72 <init_Snake2>:

void init_Snake2(uint8_t _length, uint8_t _pos){
     c72:	ef 92       	push	r14
     c74:	ff 92       	push	r15
     c76:	0f 93       	push	r16
     c78:	1f 93       	push	r17
     c7a:	cf 93       	push	r28
     c7c:	df 93       	push	r29
	xPos2 = width/2; yPos2 = _pos;
     c7e:	90 91 14 01 	lds	r25, 0x0114
     c82:	96 95       	lsr	r25
     c84:	29 2f       	mov	r18, r25
     c86:	30 e0       	ldi	r19, 0x00	; 0
     c88:	30 93 40 08 	sts	0x0840, r19
     c8c:	20 93 3f 08 	sts	0x083F, r18
     c90:	26 2f       	mov	r18, r22
     c92:	30 e0       	ldi	r19, 0x00	; 0
     c94:	30 93 ec 01 	sts	0x01EC, r19
     c98:	20 93 eb 01 	sts	0x01EB, r18
     c9c:	41 e1       	ldi	r20, 0x11	; 17
     c9e:	55 e0       	ldi	r21, 0x05	; 5
     ca0:	e1 ef       	ldi	r30, 0xF1	; 241
     ca2:	f1 e0       	ldi	r31, 0x01	; 1
	
	//initialize x and y pos to -1
	for(int i = 0; i < max_length; i++){
		segments2[i].x = -1;
     ca4:	2f ef       	ldi	r18, 0xFF	; 255
     ca6:	3f ef       	ldi	r19, 0xFF	; 255
     ca8:	31 83       	std	Z+1, r19	; 0x01
     caa:	20 83       	st	Z, r18
		segments2[i].y = -1;
     cac:	33 83       	std	Z+3, r19	; 0x03
     cae:	22 83       	std	Z+2, r18	; 0x02
     cb0:	34 96       	adiw	r30, 0x04	; 4

void init_Snake2(uint8_t _length, uint8_t _pos){
	xPos2 = width/2; yPos2 = _pos;
	
	//initialize x and y pos to -1
	for(int i = 0; i < max_length; i++){
     cb2:	e4 17       	cp	r30, r20
     cb4:	f5 07       	cpc	r31, r21
     cb6:	c1 f7       	brne	.-16     	; 0xca8 <init_Snake2+0x36>
		segments2[i].x = -1;
		segments2[i].y = -1;
	}
	
	//initialize with length
	for(int i = 0; i < _length; i++){
     cb8:	a8 2f       	mov	r26, r24
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	1a 16       	cp	r1, r26
     cbe:	1b 06       	cpc	r1, r27
     cc0:	9c f5       	brge	.+102    	; 0xd28 <init_Snake2+0xb6>
		segments2[i].x = width/2 - i;
		segments2[i].y = _pos/2;// -i;
     cc2:	66 95       	lsr	r22
     cc4:	c6 2f       	mov	r28, r22
     cc6:	d0 e0       	ldi	r29, 0x00	; 0
     cc8:	e1 ef       	ldi	r30, 0xF1	; 241
     cca:	f1 e0       	ldi	r31, 0x01	; 1
     ccc:	20 e0       	ldi	r18, 0x00	; 0
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	69 2f       	mov	r22, r25
     cd2:	70 e0       	ldi	r23, 0x00	; 0
     cd4:	ab 01       	movw	r20, r22
     cd6:	42 1b       	sub	r20, r18
     cd8:	53 0b       	sbc	r21, r19
		segments2[i].y = -1;
	}
	
	//initialize with length
	for(int i = 0; i < _length; i++){
		segments2[i].x = width/2 - i;
     cda:	51 83       	std	Z+1, r21	; 0x01
     cdc:	40 83       	st	Z, r20
		segments2[i].y = _pos/2;// -i;
     cde:	d3 83       	std	Z+3, r29	; 0x03
     ce0:	c2 83       	std	Z+2, r28	; 0x02
		segments2[i].x = -1;
		segments2[i].y = -1;
	}
	
	//initialize with length
	for(int i = 0; i < _length; i++){
     ce2:	2f 5f       	subi	r18, 0xFF	; 255
     ce4:	3f 4f       	sbci	r19, 0xFF	; 255
     ce6:	34 96       	adiw	r30, 0x04	; 4
     ce8:	2a 17       	cp	r18, r26
     cea:	3b 07       	cpc	r19, r27
     cec:	99 f7       	brne	.-26     	; 0xcd4 <init_Snake2+0x62>
		segments2[i].x = width/2 - i;
		segments2[i].y = _pos/2;// -i;
	}
	current_segment2 = _length;
     cee:	80 93 df 01 	sts	0x01DF, r24
     cf2:	c1 ef       	ldi	r28, 0xF1	; 241
     cf4:	d1 e0       	ldi	r29, 0x01	; 1
	
	for(int i = 0; i < current_segment2; i++){
     cf6:	e1 2c       	mov	r14, r1
     cf8:	f1 2c       	mov	r15, r1
		fillRect(segments2[i].x, segments2[i].y, 1, 1, COLOR_GREEN);
     cfa:	6a 81       	ldd	r22, Y+2	; 0x02
     cfc:	7b 81       	ldd	r23, Y+3	; 0x03
     cfe:	00 ee       	ldi	r16, 0xE0	; 224
     d00:	17 e0       	ldi	r17, 0x07	; 7
     d02:	21 e0       	ldi	r18, 0x01	; 1
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	41 e0       	ldi	r20, 0x01	; 1
     d08:	50 e0       	ldi	r21, 0x00	; 0
     d0a:	88 81       	ld	r24, Y
     d0c:	99 81       	ldd	r25, Y+1	; 0x01
     d0e:	0e 94 ab 04 	call	0x956	; 0x956 <fillRect>
		segments2[i].x = width/2 - i;
		segments2[i].y = _pos/2;// -i;
	}
	current_segment2 = _length;
	
	for(int i = 0; i < current_segment2; i++){
     d12:	8f ef       	ldi	r24, 0xFF	; 255
     d14:	e8 1a       	sub	r14, r24
     d16:	f8 0a       	sbc	r15, r24
     d18:	24 96       	adiw	r28, 0x04	; 4
     d1a:	80 91 df 01 	lds	r24, 0x01DF
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	e8 16       	cp	r14, r24
     d22:	f9 06       	cpc	r15, r25
     d24:	54 f3       	brlt	.-44     	; 0xcfa <init_Snake2+0x88>
     d26:	02 c0       	rjmp	.+4      	; 0xd2c <init_Snake2+0xba>
	//initialize with length
	for(int i = 0; i < _length; i++){
		segments2[i].x = width/2 - i;
		segments2[i].y = _pos/2;// -i;
	}
	current_segment2 = _length;
     d28:	80 93 df 01 	sts	0x01DF, r24
	
	for(int i = 0; i < current_segment2; i++){
		fillRect(segments2[i].x, segments2[i].y, 1, 1, COLOR_GREEN);
		//fillRect(xLast, yLast, 1, 1, 0x0000);
	}
}
     d2c:	df 91       	pop	r29
     d2e:	cf 91       	pop	r28
     d30:	1f 91       	pop	r17
     d32:	0f 91       	pop	r16
     d34:	ff 90       	pop	r15
     d36:	ef 90       	pop	r14
     d38:	08 95       	ret

00000d3a <update_Snake1>:

enum Directions1{still1, right1, up1, down1, left1  }direction1;
void update_Snake1(uint8_t direction1){
	xLast1 = segments1[current_segment1-1].x;
     d3a:	40 91 e0 01 	lds	r20, 0x01E0
     d3e:	50 e0       	ldi	r21, 0x00	; 0
     d40:	9a 01       	movw	r18, r20
     d42:	21 50       	subi	r18, 0x01	; 1
     d44:	31 09       	sbc	r19, r1
     d46:	f9 01       	movw	r30, r18
     d48:	ee 0f       	add	r30, r30
     d4a:	ff 1f       	adc	r31, r31
     d4c:	ee 0f       	add	r30, r30
     d4e:	ff 1f       	adc	r31, r31
     d50:	e7 5e       	subi	r30, 0xE7	; 231
     d52:	fa 4f       	sbci	r31, 0xFA	; 250
     d54:	60 81       	ld	r22, Z
     d56:	71 81       	ldd	r23, Z+1	; 0x01
     d58:	70 93 3a 08 	sts	0x083A, r23
     d5c:	60 93 39 08 	sts	0x0839, r22
	yLast1 = segments1[current_segment1-1].y;
     d60:	62 81       	ldd	r22, Z+2	; 0x02
     d62:	73 81       	ldd	r23, Z+3	; 0x03
     d64:	70 93 ea 01 	sts	0x01EA, r23
     d68:	60 93 e9 01 	sts	0x01E9, r22
	
	if(direction1){
     d6c:	88 23       	and	r24, r24
     d6e:	09 f4       	brne	.+2      	; 0xd72 <update_Snake1+0x38>
     d70:	90 c0       	rjmp	.+288    	; 0xe92 <update_Snake1+0x158>
		for(int i = current_segment1-1; i > 0; i--){
     d72:	12 16       	cp	r1, r18
     d74:	13 06       	cpc	r1, r19
     d76:	ac f4       	brge	.+42     	; 0xda2 <update_Snake1+0x68>
     d78:	fa 01       	movw	r30, r20
     d7a:	ee 0f       	add	r30, r30
     d7c:	ff 1f       	adc	r31, r31
     d7e:	ee 0f       	add	r30, r30
     d80:	ff 1f       	adc	r31, r31
     d82:	ef 5e       	subi	r30, 0xEF	; 239
     d84:	fa 4f       	sbci	r31, 0xFA	; 250
     d86:	45 e1       	ldi	r20, 0x15	; 21
     d88:	55 e0       	ldi	r21, 0x05	; 5
			segments1[i].x = segments1[i-1].x;
     d8a:	20 81       	ld	r18, Z
     d8c:	31 81       	ldd	r19, Z+1	; 0x01
     d8e:	35 83       	std	Z+5, r19	; 0x05
     d90:	24 83       	std	Z+4, r18	; 0x04
			segments1[i].y = segments1[i-1].y;
     d92:	22 81       	ldd	r18, Z+2	; 0x02
     d94:	33 81       	ldd	r19, Z+3	; 0x03
     d96:	37 83       	std	Z+7, r19	; 0x07
     d98:	26 83       	std	Z+6, r18	; 0x06
     d9a:	34 97       	sbiw	r30, 0x04	; 4
void update_Snake1(uint8_t direction1){
	xLast1 = segments1[current_segment1-1].x;
	yLast1 = segments1[current_segment1-1].y;
	
	if(direction1){
		for(int i = current_segment1-1; i > 0; i--){
     d9c:	e4 17       	cp	r30, r20
     d9e:	f5 07       	cpc	r31, r21
     da0:	a1 f7       	brne	.-24     	; 0xd8a <update_Snake1+0x50>
			segments1[i].x = segments1[i-1].x;
			segments1[i].y = segments1[i-1].y;
		}
	
	
		switch(direction1){
     da2:	82 30       	cpi	r24, 0x02	; 2
     da4:	21 f1       	breq	.+72     	; 0xdee <update_Snake1+0xb4>
     da6:	18 f4       	brcc	.+6      	; 0xdae <update_Snake1+0x74>
     da8:	81 30       	cpi	r24, 0x01	; 1
     daa:	39 f0       	breq	.+14     	; 0xdba <update_Snake1+0x80>
     dac:	08 95       	ret
     dae:	83 30       	cpi	r24, 0x03	; 3
     db0:	d1 f1       	breq	.+116    	; 0xe26 <update_Snake1+0xec>
     db2:	84 30       	cpi	r24, 0x04	; 4
     db4:	09 f4       	brne	.+2      	; 0xdb8 <update_Snake1+0x7e>
     db6:	53 c0       	rjmp	.+166    	; 0xe5e <update_Snake1+0x124>
     db8:	08 95       	ret
			case right1:
				xPos1 = segments1[0].x+1;
     dba:	80 91 19 05 	lds	r24, 0x0519
     dbe:	90 91 1a 05 	lds	r25, 0x051A
     dc2:	01 96       	adiw	r24, 0x01	; 1
				if(xPos1 >= 127)
     dc4:	8f 37       	cpi	r24, 0x7F	; 127
     dc6:	91 05       	cpc	r25, r1
     dc8:	2c f4       	brge	.+10     	; 0xdd4 <update_Snake1+0x9a>
		}
	
	
		switch(direction1){
			case right1:
				xPos1 = segments1[0].x+1;
     dca:	90 93 3e 08 	sts	0x083E, r25
     dce:	80 93 3d 08 	sts	0x083D, r24
     dd2:	04 c0       	rjmp	.+8      	; 0xddc <update_Snake1+0xa2>
				if(xPos1 >= 127)
					xPos1 = 0;
     dd4:	10 92 3e 08 	sts	0x083E, r1
     dd8:	10 92 3d 08 	sts	0x083D, r1
				segments1[0].x = xPos1;
     ddc:	80 91 3d 08 	lds	r24, 0x083D
     de0:	90 91 3e 08 	lds	r25, 0x083E
     de4:	90 93 1a 05 	sts	0x051A, r25
     de8:	80 93 19 05 	sts	0x0519, r24
				break;
     dec:	08 95       	ret
		
			case up1:
				yPos1 = segments1[0].y-1;
     dee:	80 91 1b 05 	lds	r24, 0x051B
     df2:	90 91 1c 05 	lds	r25, 0x051C
     df6:	01 97       	sbiw	r24, 0x01	; 1
				if(yPos1 < 10)
     df8:	8a 30       	cpi	r24, 0x0A	; 10
     dfa:	91 05       	cpc	r25, r1
     dfc:	2c f0       	brlt	.+10     	; 0xe08 <update_Snake1+0xce>
					xPos1 = 0;
				segments1[0].x = xPos1;
				break;
		
			case up1:
				yPos1 = segments1[0].y-1;
     dfe:	90 93 15 05 	sts	0x0515, r25
     e02:	80 93 14 05 	sts	0x0514, r24
     e06:	06 c0       	rjmp	.+12     	; 0xe14 <update_Snake1+0xda>
				if(yPos1 < 10)
					yPos1 = 159;
     e08:	8f e9       	ldi	r24, 0x9F	; 159
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	90 93 15 05 	sts	0x0515, r25
     e10:	80 93 14 05 	sts	0x0514, r24
				segments1[0].y = yPos1;
     e14:	80 91 14 05 	lds	r24, 0x0514
     e18:	90 91 15 05 	lds	r25, 0x0515
     e1c:	90 93 1c 05 	sts	0x051C, r25
     e20:	80 93 1b 05 	sts	0x051B, r24
			break;
     e24:	08 95       	ret
		
			case down1:
				yPos1 = segments1[0].y+1;
     e26:	80 91 1b 05 	lds	r24, 0x051B
     e2a:	90 91 1c 05 	lds	r25, 0x051C
     e2e:	01 96       	adiw	r24, 0x01	; 1
				if(yPos1 > 159)
     e30:	80 3a       	cpi	r24, 0xA0	; 160
     e32:	91 05       	cpc	r25, r1
     e34:	2c f4       	brge	.+10     	; 0xe40 <update_Snake1+0x106>
					yPos1 = 159;
				segments1[0].y = yPos1;
			break;
		
			case down1:
				yPos1 = segments1[0].y+1;
     e36:	90 93 15 05 	sts	0x0515, r25
     e3a:	80 93 14 05 	sts	0x0514, r24
     e3e:	06 c0       	rjmp	.+12     	; 0xe4c <update_Snake1+0x112>
				if(yPos1 > 159)
					yPos1 = 10;
     e40:	8a e0       	ldi	r24, 0x0A	; 10
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	90 93 15 05 	sts	0x0515, r25
     e48:	80 93 14 05 	sts	0x0514, r24
				segments1[0].y = yPos1;
     e4c:	80 91 14 05 	lds	r24, 0x0514
     e50:	90 91 15 05 	lds	r25, 0x0515
     e54:	90 93 1c 05 	sts	0x051C, r25
     e58:	80 93 1b 05 	sts	0x051B, r24
			break;
     e5c:	08 95       	ret
		
			case left1:
				xPos1 = segments1[0].x-1;
     e5e:	80 91 19 05 	lds	r24, 0x0519
     e62:	90 91 1a 05 	lds	r25, 0x051A
     e66:	01 97       	sbiw	r24, 0x01	; 1
					if(xPos1 < 0)
     e68:	99 23       	and	r25, r25
     e6a:	2c f0       	brlt	.+10     	; 0xe76 <update_Snake1+0x13c>
					yPos1 = 10;
				segments1[0].y = yPos1;
			break;
		
			case left1:
				xPos1 = segments1[0].x-1;
     e6c:	90 93 3e 08 	sts	0x083E, r25
     e70:	80 93 3d 08 	sts	0x083D, r24
     e74:	06 c0       	rjmp	.+12     	; 0xe82 <update_Snake1+0x148>
					if(xPos1 < 0)
				xPos1 = 127;
     e76:	8f e7       	ldi	r24, 0x7F	; 127
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	90 93 3e 08 	sts	0x083E, r25
     e7e:	80 93 3d 08 	sts	0x083D, r24
				segments1[0].x = xPos1;
     e82:	80 91 3d 08 	lds	r24, 0x083D
     e86:	90 91 3e 08 	lds	r25, 0x083E
     e8a:	90 93 1a 05 	sts	0x051A, r25
     e8e:	80 93 19 05 	sts	0x0519, r24
     e92:	08 95       	ret

00000e94 <update_Snake2>:
	}
}

enum Directions2{still2, right2, up2, down2, left2  }direction2;
void update_Snake2(uint8_t direction2){
	xLast2 = segments2[current_segment2-1].x;
     e94:	40 91 df 01 	lds	r20, 0x01DF
     e98:	50 e0       	ldi	r21, 0x00	; 0
     e9a:	9a 01       	movw	r18, r20
     e9c:	21 50       	subi	r18, 0x01	; 1
     e9e:	31 09       	sbc	r19, r1
     ea0:	f9 01       	movw	r30, r18
     ea2:	ee 0f       	add	r30, r30
     ea4:	ff 1f       	adc	r31, r31
     ea6:	ee 0f       	add	r30, r30
     ea8:	ff 1f       	adc	r31, r31
     eaa:	ef 50       	subi	r30, 0x0F	; 15
     eac:	fe 4f       	sbci	r31, 0xFE	; 254
     eae:	60 81       	ld	r22, Z
     eb0:	71 81       	ldd	r23, Z+1	; 0x01
     eb2:	70 93 ee 01 	sts	0x01EE, r23
     eb6:	60 93 ed 01 	sts	0x01ED, r22
	yLast2 = segments2[current_segment2-1].y;
     eba:	62 81       	ldd	r22, Z+2	; 0x02
     ebc:	73 81       	ldd	r23, Z+3	; 0x03
     ebe:	70 93 3c 08 	sts	0x083C, r23
     ec2:	60 93 3b 08 	sts	0x083B, r22
	
	if(direction2){
     ec6:	88 23       	and	r24, r24
     ec8:	09 f4       	brne	.+2      	; 0xecc <update_Snake2+0x38>
     eca:	90 c0       	rjmp	.+288    	; 0xfec <update_Snake2+0x158>
		for(int i = current_segment2-1; i > 0; i--){
     ecc:	12 16       	cp	r1, r18
     ece:	13 06       	cpc	r1, r19
     ed0:	ac f4       	brge	.+42     	; 0xefc <update_Snake2+0x68>
     ed2:	fa 01       	movw	r30, r20
     ed4:	ee 0f       	add	r30, r30
     ed6:	ff 1f       	adc	r31, r31
     ed8:	ee 0f       	add	r30, r30
     eda:	ff 1f       	adc	r31, r31
     edc:	e7 51       	subi	r30, 0x17	; 23
     ede:	fe 4f       	sbci	r31, 0xFE	; 254
     ee0:	4d ee       	ldi	r20, 0xED	; 237
     ee2:	51 e0       	ldi	r21, 0x01	; 1
			segments2[i].x = segments2[i-1].x;
     ee4:	20 81       	ld	r18, Z
     ee6:	31 81       	ldd	r19, Z+1	; 0x01
     ee8:	35 83       	std	Z+5, r19	; 0x05
     eea:	24 83       	std	Z+4, r18	; 0x04
			segments2[i].y = segments2[i-1].y;
     eec:	22 81       	ldd	r18, Z+2	; 0x02
     eee:	33 81       	ldd	r19, Z+3	; 0x03
     ef0:	37 83       	std	Z+7, r19	; 0x07
     ef2:	26 83       	std	Z+6, r18	; 0x06
     ef4:	34 97       	sbiw	r30, 0x04	; 4
void update_Snake2(uint8_t direction2){
	xLast2 = segments2[current_segment2-1].x;
	yLast2 = segments2[current_segment2-1].y;
	
	if(direction2){
		for(int i = current_segment2-1; i > 0; i--){
     ef6:	e4 17       	cp	r30, r20
     ef8:	f5 07       	cpc	r31, r21
     efa:	a1 f7       	brne	.-24     	; 0xee4 <update_Snake2+0x50>
			segments2[i].x = segments2[i-1].x;
			segments2[i].y = segments2[i-1].y;
		}
		
		
		switch(direction2){
     efc:	82 30       	cpi	r24, 0x02	; 2
     efe:	21 f1       	breq	.+72     	; 0xf48 <update_Snake2+0xb4>
     f00:	18 f4       	brcc	.+6      	; 0xf08 <update_Snake2+0x74>
     f02:	81 30       	cpi	r24, 0x01	; 1
     f04:	39 f0       	breq	.+14     	; 0xf14 <update_Snake2+0x80>
     f06:	08 95       	ret
     f08:	83 30       	cpi	r24, 0x03	; 3
     f0a:	d1 f1       	breq	.+116    	; 0xf80 <update_Snake2+0xec>
     f0c:	84 30       	cpi	r24, 0x04	; 4
     f0e:	09 f4       	brne	.+2      	; 0xf12 <update_Snake2+0x7e>
     f10:	53 c0       	rjmp	.+166    	; 0xfb8 <update_Snake2+0x124>
     f12:	08 95       	ret
			case right2:
			xPos2 = segments2[0].x+1;
     f14:	80 91 f1 01 	lds	r24, 0x01F1
     f18:	90 91 f2 01 	lds	r25, 0x01F2
     f1c:	01 96       	adiw	r24, 0x01	; 1
			if(xPos2 >= 127)
     f1e:	8f 37       	cpi	r24, 0x7F	; 127
     f20:	91 05       	cpc	r25, r1
     f22:	2c f4       	brge	.+10     	; 0xf2e <update_Snake2+0x9a>
		}
		
		
		switch(direction2){
			case right2:
			xPos2 = segments2[0].x+1;
     f24:	90 93 40 08 	sts	0x0840, r25
     f28:	80 93 3f 08 	sts	0x083F, r24
     f2c:	04 c0       	rjmp	.+8      	; 0xf36 <update_Snake2+0xa2>
			if(xPos2 >= 127)
			xPos2 = 0;
     f2e:	10 92 40 08 	sts	0x0840, r1
     f32:	10 92 3f 08 	sts	0x083F, r1
			segments2[0].x = xPos2;
     f36:	80 91 3f 08 	lds	r24, 0x083F
     f3a:	90 91 40 08 	lds	r25, 0x0840
     f3e:	90 93 f2 01 	sts	0x01F2, r25
     f42:	80 93 f1 01 	sts	0x01F1, r24
			break;
     f46:	08 95       	ret
			
			case up2:
			yPos2 = segments2[0].y-1;
     f48:	80 91 f3 01 	lds	r24, 0x01F3
     f4c:	90 91 f4 01 	lds	r25, 0x01F4
     f50:	01 97       	sbiw	r24, 0x01	; 1
			if(yPos2 < 10)
     f52:	8a 30       	cpi	r24, 0x0A	; 10
     f54:	91 05       	cpc	r25, r1
     f56:	2c f0       	brlt	.+10     	; 0xf62 <update_Snake2+0xce>
			xPos2 = 0;
			segments2[0].x = xPos2;
			break;
			
			case up2:
			yPos2 = segments2[0].y-1;
     f58:	90 93 ec 01 	sts	0x01EC, r25
     f5c:	80 93 eb 01 	sts	0x01EB, r24
     f60:	06 c0       	rjmp	.+12     	; 0xf6e <update_Snake2+0xda>
			if(yPos2 < 10)
			yPos2 = 159;
     f62:	8f e9       	ldi	r24, 0x9F	; 159
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	90 93 ec 01 	sts	0x01EC, r25
     f6a:	80 93 eb 01 	sts	0x01EB, r24
			segments2[0].y = yPos2;
     f6e:	80 91 eb 01 	lds	r24, 0x01EB
     f72:	90 91 ec 01 	lds	r25, 0x01EC
     f76:	90 93 f4 01 	sts	0x01F4, r25
     f7a:	80 93 f3 01 	sts	0x01F3, r24
			break;
     f7e:	08 95       	ret
			
			case down2:
			yPos2 = segments2[0].y+1;
     f80:	80 91 f3 01 	lds	r24, 0x01F3
     f84:	90 91 f4 01 	lds	r25, 0x01F4
     f88:	01 96       	adiw	r24, 0x01	; 1
			if(yPos2 > 159)
     f8a:	80 3a       	cpi	r24, 0xA0	; 160
     f8c:	91 05       	cpc	r25, r1
     f8e:	2c f4       	brge	.+10     	; 0xf9a <update_Snake2+0x106>
			yPos2 = 159;
			segments2[0].y = yPos2;
			break;
			
			case down2:
			yPos2 = segments2[0].y+1;
     f90:	90 93 ec 01 	sts	0x01EC, r25
     f94:	80 93 eb 01 	sts	0x01EB, r24
     f98:	06 c0       	rjmp	.+12     	; 0xfa6 <update_Snake2+0x112>
			if(yPos2 > 159)
			yPos2 = 10;
     f9a:	8a e0       	ldi	r24, 0x0A	; 10
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	90 93 ec 01 	sts	0x01EC, r25
     fa2:	80 93 eb 01 	sts	0x01EB, r24
			segments2[0].y = yPos2;
     fa6:	80 91 eb 01 	lds	r24, 0x01EB
     faa:	90 91 ec 01 	lds	r25, 0x01EC
     fae:	90 93 f4 01 	sts	0x01F4, r25
     fb2:	80 93 f3 01 	sts	0x01F3, r24
			break;
     fb6:	08 95       	ret
			
			case left2:
			xPos2 = segments2[0].x-1;
     fb8:	80 91 f1 01 	lds	r24, 0x01F1
     fbc:	90 91 f2 01 	lds	r25, 0x01F2
     fc0:	01 97       	sbiw	r24, 0x01	; 1
			if(xPos2 < 0)
     fc2:	99 23       	and	r25, r25
     fc4:	2c f0       	brlt	.+10     	; 0xfd0 <update_Snake2+0x13c>
			yPos2 = 10;
			segments2[0].y = yPos2;
			break;
			
			case left2:
			xPos2 = segments2[0].x-1;
     fc6:	90 93 40 08 	sts	0x0840, r25
     fca:	80 93 3f 08 	sts	0x083F, r24
     fce:	06 c0       	rjmp	.+12     	; 0xfdc <update_Snake2+0x148>
			if(xPos2 < 0)
			xPos2 = 127;
     fd0:	8f e7       	ldi	r24, 0x7F	; 127
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	90 93 40 08 	sts	0x0840, r25
     fd8:	80 93 3f 08 	sts	0x083F, r24
			segments2[0].x = xPos2;
     fdc:	80 91 3f 08 	lds	r24, 0x083F
     fe0:	90 91 40 08 	lds	r25, 0x0840
     fe4:	90 93 f2 01 	sts	0x01F2, r25
     fe8:	80 93 f1 01 	sts	0x01F1, r24
     fec:	08 95       	ret

00000fee <add_segment1>:
		}
	}
}


void add_segment1(){
     fee:	cf 93       	push	r28
     ff0:	df 93       	push	r29
	
	if(current_segment1 < max_length){
     ff2:	e0 91 e0 01 	lds	r30, 0x01E0
     ff6:	e8 3c       	cpi	r30, 0xC8	; 200
     ff8:	08 f0       	brcs	.+2      	; 0xffc <add_segment1+0xe>
     ffa:	88 c0       	rjmp	.+272    	; 0x110c <add_segment1+0x11e>
		current_segment1++;
     ffc:	a1 e0       	ldi	r26, 0x01	; 1
     ffe:	ae 0f       	add	r26, r30
			segments1[current_segment1].x = segments1[current_segment1-1].x;
    1000:	b0 e0       	ldi	r27, 0x00	; 0
    1002:	ed 01       	movw	r28, r26
    1004:	cc 0f       	add	r28, r28
    1006:	dd 1f       	adc	r29, r29
    1008:	cc 0f       	add	r28, r28
    100a:	dd 1f       	adc	r29, r29
    100c:	cb 5e       	subi	r28, 0xEB	; 235
    100e:	da 4f       	sbci	r29, 0xFA	; 250
    1010:	88 81       	ld	r24, Y
    1012:	99 81       	ldd	r25, Y+1	; 0x01
    1014:	aa 0f       	add	r26, r26
    1016:	bb 1f       	adc	r27, r27
    1018:	aa 0f       	add	r26, r26
    101a:	bb 1f       	adc	r27, r27
    101c:	a7 5e       	subi	r26, 0xE7	; 231
    101e:	ba 4f       	sbci	r27, 0xFA	; 250
    1020:	11 96       	adiw	r26, 0x01	; 1
    1022:	9c 93       	st	X, r25
    1024:	8e 93       	st	-X, r24
			segments1[current_segment1].y = segments1[current_segment1-1].y;
    1026:	8a 81       	ldd	r24, Y+2	; 0x02
    1028:	9b 81       	ldd	r25, Y+3	; 0x03
    102a:	13 96       	adiw	r26, 0x03	; 3
    102c:	9c 93       	st	X, r25
    102e:	8e 93       	st	-X, r24
    1030:	12 97       	sbiw	r26, 0x02	; 2
		current_segment1++;
    1032:	a2 e0       	ldi	r26, 0x02	; 2
    1034:	ae 0f       	add	r26, r30
		segments1[current_segment1].x = segments1[current_segment1-1].x;
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	ed 01       	movw	r28, r26
    103a:	cc 0f       	add	r28, r28
    103c:	dd 1f       	adc	r29, r29
    103e:	cc 0f       	add	r28, r28
    1040:	dd 1f       	adc	r29, r29
    1042:	cb 5e       	subi	r28, 0xEB	; 235
    1044:	da 4f       	sbci	r29, 0xFA	; 250
    1046:	88 81       	ld	r24, Y
    1048:	99 81       	ldd	r25, Y+1	; 0x01
    104a:	aa 0f       	add	r26, r26
    104c:	bb 1f       	adc	r27, r27
    104e:	aa 0f       	add	r26, r26
    1050:	bb 1f       	adc	r27, r27
    1052:	a7 5e       	subi	r26, 0xE7	; 231
    1054:	ba 4f       	sbci	r27, 0xFA	; 250
    1056:	11 96       	adiw	r26, 0x01	; 1
    1058:	9c 93       	st	X, r25
    105a:	8e 93       	st	-X, r24
		segments1[current_segment1].y = segments1[current_segment1-1].y;
    105c:	8a 81       	ldd	r24, Y+2	; 0x02
    105e:	9b 81       	ldd	r25, Y+3	; 0x03
    1060:	13 96       	adiw	r26, 0x03	; 3
    1062:	9c 93       	st	X, r25
    1064:	8e 93       	st	-X, r24
    1066:	12 97       	sbiw	r26, 0x02	; 2
		current_segment1++;
    1068:	a3 e0       	ldi	r26, 0x03	; 3
    106a:	ae 0f       	add	r26, r30
		segments1[current_segment1].x = segments1[current_segment1-1].x;
    106c:	b0 e0       	ldi	r27, 0x00	; 0
    106e:	ed 01       	movw	r28, r26
    1070:	cc 0f       	add	r28, r28
    1072:	dd 1f       	adc	r29, r29
    1074:	cc 0f       	add	r28, r28
    1076:	dd 1f       	adc	r29, r29
    1078:	cb 5e       	subi	r28, 0xEB	; 235
    107a:	da 4f       	sbci	r29, 0xFA	; 250
    107c:	88 81       	ld	r24, Y
    107e:	99 81       	ldd	r25, Y+1	; 0x01
    1080:	aa 0f       	add	r26, r26
    1082:	bb 1f       	adc	r27, r27
    1084:	aa 0f       	add	r26, r26
    1086:	bb 1f       	adc	r27, r27
    1088:	a7 5e       	subi	r26, 0xE7	; 231
    108a:	ba 4f       	sbci	r27, 0xFA	; 250
    108c:	11 96       	adiw	r26, 0x01	; 1
    108e:	9c 93       	st	X, r25
    1090:	8e 93       	st	-X, r24
		segments1[current_segment1].y = segments1[current_segment1-1].y;
    1092:	8a 81       	ldd	r24, Y+2	; 0x02
    1094:	9b 81       	ldd	r25, Y+3	; 0x03
    1096:	13 96       	adiw	r26, 0x03	; 3
    1098:	9c 93       	st	X, r25
    109a:	8e 93       	st	-X, r24
    109c:	12 97       	sbiw	r26, 0x02	; 2
		current_segment1++;
    109e:	a4 e0       	ldi	r26, 0x04	; 4
    10a0:	ae 0f       	add	r26, r30
		segments1[current_segment1].x = segments1[current_segment1-1].x;
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	ed 01       	movw	r28, r26
    10a6:	cc 0f       	add	r28, r28
    10a8:	dd 1f       	adc	r29, r29
    10aa:	cc 0f       	add	r28, r28
    10ac:	dd 1f       	adc	r29, r29
    10ae:	cb 5e       	subi	r28, 0xEB	; 235
    10b0:	da 4f       	sbci	r29, 0xFA	; 250
    10b2:	88 81       	ld	r24, Y
    10b4:	99 81       	ldd	r25, Y+1	; 0x01
    10b6:	aa 0f       	add	r26, r26
    10b8:	bb 1f       	adc	r27, r27
    10ba:	aa 0f       	add	r26, r26
    10bc:	bb 1f       	adc	r27, r27
    10be:	a7 5e       	subi	r26, 0xE7	; 231
    10c0:	ba 4f       	sbci	r27, 0xFA	; 250
    10c2:	11 96       	adiw	r26, 0x01	; 1
    10c4:	9c 93       	st	X, r25
    10c6:	8e 93       	st	-X, r24
		segments1[current_segment1].y = segments1[current_segment1-1].y;
    10c8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ca:	9b 81       	ldd	r25, Y+3	; 0x03
    10cc:	13 96       	adiw	r26, 0x03	; 3
    10ce:	9c 93       	st	X, r25
    10d0:	8e 93       	st	-X, r24
    10d2:	12 97       	sbiw	r26, 0x02	; 2
		current_segment1++;
    10d4:	eb 5f       	subi	r30, 0xFB	; 251
    10d6:	e0 93 e0 01 	sts	0x01E0, r30
		segments1[current_segment1].x = segments1[current_segment1-1].x;
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	df 01       	movw	r26, r30
    10de:	aa 0f       	add	r26, r26
    10e0:	bb 1f       	adc	r27, r27
    10e2:	aa 0f       	add	r26, r26
    10e4:	bb 1f       	adc	r27, r27
    10e6:	ab 5e       	subi	r26, 0xEB	; 235
    10e8:	ba 4f       	sbci	r27, 0xFA	; 250
    10ea:	8d 91       	ld	r24, X+
    10ec:	9c 91       	ld	r25, X
    10ee:	11 97       	sbiw	r26, 0x01	; 1
    10f0:	ee 0f       	add	r30, r30
    10f2:	ff 1f       	adc	r31, r31
    10f4:	ee 0f       	add	r30, r30
    10f6:	ff 1f       	adc	r31, r31
    10f8:	e7 5e       	subi	r30, 0xE7	; 231
    10fa:	fa 4f       	sbci	r31, 0xFA	; 250
    10fc:	91 83       	std	Z+1, r25	; 0x01
    10fe:	80 83       	st	Z, r24
		segments1[current_segment1].y = segments1[current_segment1-1].y;
    1100:	12 96       	adiw	r26, 0x02	; 2
    1102:	8d 91       	ld	r24, X+
    1104:	9c 91       	ld	r25, X
    1106:	13 97       	sbiw	r26, 0x03	; 3
    1108:	93 83       	std	Z+3, r25	; 0x03
    110a:	82 83       	std	Z+2, r24	; 0x02
	}
}
    110c:	df 91       	pop	r29
    110e:	cf 91       	pop	r28
    1110:	08 95       	ret

00001112 <detect_collision_self1>:

void detect_collision_self1(){
    1112:	1f 93       	push	r17
    1114:	cf 93       	push	r28
    1116:	df 93       	push	r29
	for(uint8_t i = 2; i < current_segment1; i++){
    1118:	70 91 e0 01 	lds	r23, 0x01E0
    111c:	73 30       	cpi	r23, 0x03	; 3
    111e:	a0 f1       	brcs	.+104    	; 0x1188 <detect_collision_self1+0x76>
		if((segments1[0].x == segments1[i].x) && (segments1[0].y == segments1[i].y)){
    1120:	20 91 19 05 	lds	r18, 0x0519
    1124:	30 91 1a 05 	lds	r19, 0x051A
    1128:	40 91 1b 05 	lds	r20, 0x051B
    112c:	50 91 1c 05 	lds	r21, 0x051C
			game_over = 1;
		}
		if(is_multiplayer)
    1130:	c0 91 e6 01 	lds	r28, 0x01E6
    1134:	d0 91 de 01 	lds	r29, 0x01DE
    1138:	e1 e2       	ldi	r30, 0x21	; 33
    113a:	f5 e0       	ldi	r31, 0x05	; 5
    113c:	a9 ef       	ldi	r26, 0xF9	; 249
    113e:	b1 e0       	ldi	r27, 0x01	; 1
		segments1[current_segment1].y = segments1[current_segment1-1].y;
	}
}

void detect_collision_self1(){
	for(uint8_t i = 2; i < current_segment1; i++){
    1140:	62 e0       	ldi	r22, 0x02	; 2
		if((segments1[0].x == segments1[i].x) && (segments1[0].y == segments1[i].y)){
			game_over = 1;
    1142:	11 e0       	ldi	r17, 0x01	; 1
	}
}

void detect_collision_self1(){
	for(uint8_t i = 2; i < current_segment1; i++){
		if((segments1[0].x == segments1[i].x) && (segments1[0].y == segments1[i].y)){
    1144:	80 81       	ld	r24, Z
    1146:	91 81       	ldd	r25, Z+1	; 0x01
    1148:	28 17       	cp	r18, r24
    114a:	39 07       	cpc	r19, r25
    114c:	31 f4       	brne	.+12     	; 0x115a <detect_collision_self1+0x48>
    114e:	82 81       	ldd	r24, Z+2	; 0x02
    1150:	93 81       	ldd	r25, Z+3	; 0x03
    1152:	48 17       	cp	r20, r24
    1154:	59 07       	cpc	r21, r25
    1156:	09 f4       	brne	.+2      	; 0x115a <detect_collision_self1+0x48>
			game_over = 1;
    1158:	d1 2f       	mov	r29, r17
		}
		if(is_multiplayer)
    115a:	cc 23       	and	r28, r28
    115c:	71 f0       	breq	.+28     	; 0x117a <detect_collision_self1+0x68>
		if((segments1[0].x == segments2[i].x) && (segments1[0].y == segments2[i].y)){
    115e:	8d 91       	ld	r24, X+
    1160:	9c 91       	ld	r25, X
    1162:	11 97       	sbiw	r26, 0x01	; 1
    1164:	28 17       	cp	r18, r24
    1166:	39 07       	cpc	r19, r25
    1168:	41 f4       	brne	.+16     	; 0x117a <detect_collision_self1+0x68>
    116a:	12 96       	adiw	r26, 0x02	; 2
    116c:	8d 91       	ld	r24, X+
    116e:	9c 91       	ld	r25, X
    1170:	13 97       	sbiw	r26, 0x03	; 3
    1172:	48 17       	cp	r20, r24
    1174:	59 07       	cpc	r21, r25
    1176:	09 f4       	brne	.+2      	; 0x117a <detect_collision_self1+0x68>
			game_over = 1;
    1178:	d1 2f       	mov	r29, r17
		segments1[current_segment1].y = segments1[current_segment1-1].y;
	}
}

void detect_collision_self1(){
	for(uint8_t i = 2; i < current_segment1; i++){
    117a:	6f 5f       	subi	r22, 0xFF	; 255
    117c:	34 96       	adiw	r30, 0x04	; 4
    117e:	14 96       	adiw	r26, 0x04	; 4
    1180:	67 17       	cp	r22, r23
    1182:	00 f3       	brcs	.-64     	; 0x1144 <detect_collision_self1+0x32>
    1184:	d0 93 de 01 	sts	0x01DE, r29
		if(is_multiplayer)
		if((segments1[0].x == segments2[i].x) && (segments1[0].y == segments2[i].y)){
			game_over = 1;
		}
	}
}
    1188:	df 91       	pop	r29
    118a:	cf 91       	pop	r28
    118c:	1f 91       	pop	r17
    118e:	08 95       	ret

00001190 <add_segment2>:

void add_segment2(){
    1190:	cf 93       	push	r28
    1192:	df 93       	push	r29
	
	if(current_segment2 < max_length){
    1194:	e0 91 df 01 	lds	r30, 0x01DF
    1198:	e8 3c       	cpi	r30, 0xC8	; 200
    119a:	08 f0       	brcs	.+2      	; 0x119e <add_segment2+0xe>
    119c:	8b c0       	rjmp	.+278    	; 0x12b4 <add_segment2+0x124>
		current_segment2++;
    119e:	ef 5f       	subi	r30, 0xFF	; 255
    11a0:	e0 93 df 01 	sts	0x01DF, r30

			segments2[current_segment2].x = segments2[current_segment2-1].x;//-30;
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	df 01       	movw	r26, r30
    11a8:	aa 0f       	add	r26, r26
    11aa:	bb 1f       	adc	r27, r27
    11ac:	aa 0f       	add	r26, r26
    11ae:	bb 1f       	adc	r27, r27
    11b0:	a3 51       	subi	r26, 0x13	; 19
    11b2:	be 4f       	sbci	r27, 0xFE	; 254
    11b4:	8d 91       	ld	r24, X+
    11b6:	9c 91       	ld	r25, X
    11b8:	11 97       	sbiw	r26, 0x01	; 1
    11ba:	ee 0f       	add	r30, r30
    11bc:	ff 1f       	adc	r31, r31
    11be:	ee 0f       	add	r30, r30
    11c0:	ff 1f       	adc	r31, r31
    11c2:	ef 50       	subi	r30, 0x0F	; 15
    11c4:	fe 4f       	sbci	r31, 0xFE	; 254
    11c6:	91 83       	std	Z+1, r25	; 0x01
    11c8:	80 83       	st	Z, r24
			segments2[current_segment2].y = segments2[current_segment2-1].y;//+30;
    11ca:	12 96       	adiw	r26, 0x02	; 2
    11cc:	8d 91       	ld	r24, X+
    11ce:	9c 91       	ld	r25, X
    11d0:	13 97       	sbiw	r26, 0x03	; 3
    11d2:	93 83       	std	Z+3, r25	; 0x03
    11d4:	82 83       	std	Z+2, r24	; 0x02
		current_segment1++;
    11d6:	e0 91 e0 01 	lds	r30, 0x01E0
    11da:	a1 e0       	ldi	r26, 0x01	; 1
    11dc:	ae 0f       	add	r26, r30
		segments1[current_segment1].x = segments1[current_segment1-1].x;
    11de:	b0 e0       	ldi	r27, 0x00	; 0
    11e0:	ed 01       	movw	r28, r26
    11e2:	cc 0f       	add	r28, r28
    11e4:	dd 1f       	adc	r29, r29
    11e6:	cc 0f       	add	r28, r28
    11e8:	dd 1f       	adc	r29, r29
    11ea:	cb 5e       	subi	r28, 0xEB	; 235
    11ec:	da 4f       	sbci	r29, 0xFA	; 250
    11ee:	88 81       	ld	r24, Y
    11f0:	99 81       	ldd	r25, Y+1	; 0x01
    11f2:	aa 0f       	add	r26, r26
    11f4:	bb 1f       	adc	r27, r27
    11f6:	aa 0f       	add	r26, r26
    11f8:	bb 1f       	adc	r27, r27
    11fa:	a7 5e       	subi	r26, 0xE7	; 231
    11fc:	ba 4f       	sbci	r27, 0xFA	; 250
    11fe:	11 96       	adiw	r26, 0x01	; 1
    1200:	9c 93       	st	X, r25
    1202:	8e 93       	st	-X, r24
		segments1[current_segment1].y = segments1[current_segment1-1].y;
    1204:	8a 81       	ldd	r24, Y+2	; 0x02
    1206:	9b 81       	ldd	r25, Y+3	; 0x03
    1208:	13 96       	adiw	r26, 0x03	; 3
    120a:	9c 93       	st	X, r25
    120c:	8e 93       	st	-X, r24
    120e:	12 97       	sbiw	r26, 0x02	; 2
		current_segment1++;
    1210:	a2 e0       	ldi	r26, 0x02	; 2
    1212:	ae 0f       	add	r26, r30
		segments1[current_segment1].x = segments1[current_segment1-1].x;
    1214:	b0 e0       	ldi	r27, 0x00	; 0
    1216:	ed 01       	movw	r28, r26
    1218:	cc 0f       	add	r28, r28
    121a:	dd 1f       	adc	r29, r29
    121c:	cc 0f       	add	r28, r28
    121e:	dd 1f       	adc	r29, r29
    1220:	cb 5e       	subi	r28, 0xEB	; 235
    1222:	da 4f       	sbci	r29, 0xFA	; 250
    1224:	88 81       	ld	r24, Y
    1226:	99 81       	ldd	r25, Y+1	; 0x01
    1228:	aa 0f       	add	r26, r26
    122a:	bb 1f       	adc	r27, r27
    122c:	aa 0f       	add	r26, r26
    122e:	bb 1f       	adc	r27, r27
    1230:	a7 5e       	subi	r26, 0xE7	; 231
    1232:	ba 4f       	sbci	r27, 0xFA	; 250
    1234:	11 96       	adiw	r26, 0x01	; 1
    1236:	9c 93       	st	X, r25
    1238:	8e 93       	st	-X, r24
		segments1[current_segment1].y = segments1[current_segment1-1].y;
    123a:	8a 81       	ldd	r24, Y+2	; 0x02
    123c:	9b 81       	ldd	r25, Y+3	; 0x03
    123e:	13 96       	adiw	r26, 0x03	; 3
    1240:	9c 93       	st	X, r25
    1242:	8e 93       	st	-X, r24
    1244:	12 97       	sbiw	r26, 0x02	; 2
		current_segment1++;
    1246:	a3 e0       	ldi	r26, 0x03	; 3
    1248:	ae 0f       	add	r26, r30
		segments1[current_segment1].x = segments1[current_segment1-1].x;
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	ed 01       	movw	r28, r26
    124e:	cc 0f       	add	r28, r28
    1250:	dd 1f       	adc	r29, r29
    1252:	cc 0f       	add	r28, r28
    1254:	dd 1f       	adc	r29, r29
    1256:	cb 5e       	subi	r28, 0xEB	; 235
    1258:	da 4f       	sbci	r29, 0xFA	; 250
    125a:	88 81       	ld	r24, Y
    125c:	99 81       	ldd	r25, Y+1	; 0x01
    125e:	aa 0f       	add	r26, r26
    1260:	bb 1f       	adc	r27, r27
    1262:	aa 0f       	add	r26, r26
    1264:	bb 1f       	adc	r27, r27
    1266:	a7 5e       	subi	r26, 0xE7	; 231
    1268:	ba 4f       	sbci	r27, 0xFA	; 250
    126a:	11 96       	adiw	r26, 0x01	; 1
    126c:	9c 93       	st	X, r25
    126e:	8e 93       	st	-X, r24
		segments1[current_segment1].y = segments1[current_segment1-1].y;
    1270:	8a 81       	ldd	r24, Y+2	; 0x02
    1272:	9b 81       	ldd	r25, Y+3	; 0x03
    1274:	13 96       	adiw	r26, 0x03	; 3
    1276:	9c 93       	st	X, r25
    1278:	8e 93       	st	-X, r24
    127a:	12 97       	sbiw	r26, 0x02	; 2
		current_segment1++;
    127c:	ec 5f       	subi	r30, 0xFC	; 252
    127e:	e0 93 e0 01 	sts	0x01E0, r30
		segments1[current_segment1].x = segments1[current_segment1-1].x;
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	df 01       	movw	r26, r30
    1286:	aa 0f       	add	r26, r26
    1288:	bb 1f       	adc	r27, r27
    128a:	aa 0f       	add	r26, r26
    128c:	bb 1f       	adc	r27, r27
    128e:	ab 5e       	subi	r26, 0xEB	; 235
    1290:	ba 4f       	sbci	r27, 0xFA	; 250
    1292:	8d 91       	ld	r24, X+
    1294:	9c 91       	ld	r25, X
    1296:	11 97       	sbiw	r26, 0x01	; 1
    1298:	ee 0f       	add	r30, r30
    129a:	ff 1f       	adc	r31, r31
    129c:	ee 0f       	add	r30, r30
    129e:	ff 1f       	adc	r31, r31
    12a0:	e7 5e       	subi	r30, 0xE7	; 231
    12a2:	fa 4f       	sbci	r31, 0xFA	; 250
    12a4:	91 83       	std	Z+1, r25	; 0x01
    12a6:	80 83       	st	Z, r24
		segments1[current_segment1].y = segments1[current_segment1-1].y;
    12a8:	12 96       	adiw	r26, 0x02	; 2
    12aa:	8d 91       	ld	r24, X+
    12ac:	9c 91       	ld	r25, X
    12ae:	13 97       	sbiw	r26, 0x03	; 3
    12b0:	93 83       	std	Z+3, r25	; 0x03
    12b2:	82 83       	std	Z+2, r24	; 0x02
	}
}
    12b4:	df 91       	pop	r29
    12b6:	cf 91       	pop	r28
    12b8:	08 95       	ret

000012ba <detect_collision_self2>:

void detect_collision_self2(){
    12ba:	1f 93       	push	r17
    12bc:	cf 93       	push	r28
    12be:	df 93       	push	r29
	for(uint8_t i = 2; i < current_segment2; i++){
    12c0:	70 91 df 01 	lds	r23, 0x01DF
    12c4:	73 30       	cpi	r23, 0x03	; 3
    12c6:	a0 f1       	brcs	.+104    	; 0x1330 <detect_collision_self2+0x76>
		if((segments2[0].x == segments2[i].x) && (segments2[0].y == segments2[i].y)){
    12c8:	20 91 f1 01 	lds	r18, 0x01F1
    12cc:	30 91 f2 01 	lds	r19, 0x01F2
    12d0:	40 91 f3 01 	lds	r20, 0x01F3
    12d4:	50 91 f4 01 	lds	r21, 0x01F4
			game_over = 1;
		}
		if(is_multiplayer)
    12d8:	c0 91 e6 01 	lds	r28, 0x01E6
    12dc:	d0 91 de 01 	lds	r29, 0x01DE
    12e0:	e9 ef       	ldi	r30, 0xF9	; 249
    12e2:	f1 e0       	ldi	r31, 0x01	; 1
    12e4:	a1 e2       	ldi	r26, 0x21	; 33
    12e6:	b5 e0       	ldi	r27, 0x05	; 5
		segments1[current_segment1].y = segments1[current_segment1-1].y;
	}
}

void detect_collision_self2(){
	for(uint8_t i = 2; i < current_segment2; i++){
    12e8:	62 e0       	ldi	r22, 0x02	; 2
		if((segments2[0].x == segments2[i].x) && (segments2[0].y == segments2[i].y)){
			game_over = 1;
    12ea:	11 e0       	ldi	r17, 0x01	; 1
	}
}

void detect_collision_self2(){
	for(uint8_t i = 2; i < current_segment2; i++){
		if((segments2[0].x == segments2[i].x) && (segments2[0].y == segments2[i].y)){
    12ec:	80 81       	ld	r24, Z
    12ee:	91 81       	ldd	r25, Z+1	; 0x01
    12f0:	28 17       	cp	r18, r24
    12f2:	39 07       	cpc	r19, r25
    12f4:	31 f4       	brne	.+12     	; 0x1302 <detect_collision_self2+0x48>
    12f6:	82 81       	ldd	r24, Z+2	; 0x02
    12f8:	93 81       	ldd	r25, Z+3	; 0x03
    12fa:	48 17       	cp	r20, r24
    12fc:	59 07       	cpc	r21, r25
    12fe:	09 f4       	brne	.+2      	; 0x1302 <detect_collision_self2+0x48>
			game_over = 1;
    1300:	d1 2f       	mov	r29, r17
		}
		if(is_multiplayer)
    1302:	cc 23       	and	r28, r28
    1304:	71 f0       	breq	.+28     	; 0x1322 <detect_collision_self2+0x68>
		if((segments2[0].x == segments1[i].x) && (segments2[0].y == segments1[i].y)){
    1306:	8d 91       	ld	r24, X+
    1308:	9c 91       	ld	r25, X
    130a:	11 97       	sbiw	r26, 0x01	; 1
    130c:	28 17       	cp	r18, r24
    130e:	39 07       	cpc	r19, r25
    1310:	41 f4       	brne	.+16     	; 0x1322 <detect_collision_self2+0x68>
    1312:	12 96       	adiw	r26, 0x02	; 2
    1314:	8d 91       	ld	r24, X+
    1316:	9c 91       	ld	r25, X
    1318:	13 97       	sbiw	r26, 0x03	; 3
    131a:	48 17       	cp	r20, r24
    131c:	59 07       	cpc	r21, r25
    131e:	09 f4       	brne	.+2      	; 0x1322 <detect_collision_self2+0x68>
			game_over = 1;
    1320:	d1 2f       	mov	r29, r17
		segments1[current_segment1].y = segments1[current_segment1-1].y;
	}
}

void detect_collision_self2(){
	for(uint8_t i = 2; i < current_segment2; i++){
    1322:	6f 5f       	subi	r22, 0xFF	; 255
    1324:	34 96       	adiw	r30, 0x04	; 4
    1326:	14 96       	adiw	r26, 0x04	; 4
    1328:	67 17       	cp	r22, r23
    132a:	00 f3       	brcs	.-64     	; 0x12ec <detect_collision_self2+0x32>
    132c:	d0 93 de 01 	sts	0x01DE, r29
		if(is_multiplayer)
		if((segments2[0].x == segments1[i].x) && (segments2[0].y == segments1[i].y)){
			game_over = 1;
		}
	}
}
    1330:	df 91       	pop	r29
    1332:	cf 91       	pop	r28
    1334:	1f 91       	pop	r17
    1336:	08 95       	ret

00001338 <detect_collision_food_1>:

void detect_collision_both(){
	
}

void detect_collision_food_1(){
    1338:	9f 92       	push	r9
    133a:	af 92       	push	r10
    133c:	bf 92       	push	r11
    133e:	cf 92       	push	r12
    1340:	df 92       	push	r13
    1342:	ef 92       	push	r14
    1344:	ff 92       	push	r15
    1346:	0f 93       	push	r16
    1348:	1f 93       	push	r17
    134a:	cf 93       	push	r28
    134c:	df 93       	push	r29
	//check top
	for(uint8_t i = 0; i < foodSize; i++){
    134e:	b0 90 12 01 	lds	r11, 0x0112
    1352:	bb 20       	and	r11, r11
    1354:	09 f4       	brne	.+2      	; 0x1358 <detect_collision_food_1+0x20>
    1356:	cb c0       	rjmp	.+406    	; 0x14ee <detect_collision_food_1+0x1b6>
		if(segments1[0].x == (foodX+i) && segments1[0].y == (foodY)){
    1358:	a0 91 19 05 	lds	r26, 0x0519
    135c:	b0 91 1a 05 	lds	r27, 0x051A
    1360:	e0 91 e2 01 	lds	r30, 0x01E2
    1364:	8e 2f       	mov	r24, r30
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	60 91 1b 05 	lds	r22, 0x051B
    136c:	70 91 1c 05 	lds	r23, 0x051C
    1370:	c0 91 e1 01 	lds	r28, 0x01E1
    1374:	d0 e0       	ldi	r29, 0x00	; 0
    1376:	20 e0       	ldi	r18, 0x00	; 0
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	fc 01       	movw	r30, r24
    137c:	a9 01       	movw	r20, r18
    137e:	4e 0f       	add	r20, r30
    1380:	5f 1f       	adc	r21, r31
    1382:	a4 17       	cp	r26, r20
    1384:	b5 07       	cpc	r27, r21
    1386:	91 f4       	brne	.+36     	; 0x13ac <detect_collision_food_1+0x74>
    1388:	6c 17       	cp	r22, r28
    138a:	7d 07       	cpc	r23, r29
    138c:	79 f4       	brne	.+30     	; 0x13ac <detect_collision_food_1+0x74>
			fillRect(foodX, foodY, foodSize, foodSize, 0);
    138e:	4b 2d       	mov	r20, r11
    1390:	50 e0       	ldi	r21, 0x00	; 0
    1392:	00 e0       	ldi	r16, 0x00	; 0
    1394:	10 e0       	ldi	r17, 0x00	; 0
    1396:	9a 01       	movw	r18, r20
    1398:	0e 94 ab 04 	call	0x956	; 0x956 <fillRect>
			needFood = 1;
    139c:	81 e0       	ldi	r24, 0x01	; 1
    139e:	80 93 e3 01 	sts	0x01E3, r24
			//add_segment1();
			break;
		}
	}
	//check bottom
	for(uint8_t i = 0; i < foodSize; i++){
    13a2:	b0 90 12 01 	lds	r11, 0x0112
    13a6:	b1 10       	cpse	r11, r1
    13a8:	5b c0       	rjmp	.+182    	; 0x1460 <detect_collision_food_1+0x128>
    13aa:	a1 c0       	rjmp	.+322    	; 0x14ee <detect_collision_food_1+0x1b6>
    13ac:	2f 5f       	subi	r18, 0xFF	; 255
    13ae:	3f 4f       	sbci	r19, 0xFF	; 255
	
}

void detect_collision_food_1(){
	//check top
	for(uint8_t i = 0; i < foodSize; i++){
    13b0:	2b 15       	cp	r18, r11
    13b2:	20 f3       	brcs	.-56     	; 0x137c <detect_collision_food_1+0x44>
    13b4:	55 c0       	rjmp	.+170    	; 0x1460 <detect_collision_food_1+0x128>
    13b6:	9f 01       	movw	r18, r30
    13b8:	2a 0f       	add	r18, r26
    13ba:	3b 1f       	adc	r19, r27
			break;
		}
	}
	//check bottom
	for(uint8_t i = 0; i < foodSize; i++){
		if(segments1[0].x == (foodX+i) && segments1[0].y == (foodY+foodSize)){
    13bc:	c2 17       	cp	r28, r18
    13be:	d3 07       	cpc	r29, r19
    13c0:	99 f4       	brne	.+38     	; 0x13e8 <detect_collision_food_1+0xb0>
    13c2:	40 2f       	mov	r20, r16
    13c4:	51 2f       	mov	r21, r17
    13c6:	ce 14       	cp	r12, r14
    13c8:	df 04       	cpc	r13, r15
    13ca:	71 f4       	brne	.+28     	; 0x13e8 <detect_collision_food_1+0xb0>
			fillRect(foodX, foodY, foodSize, foodSize, 0);
    13cc:	00 e0       	ldi	r16, 0x00	; 0
    13ce:	10 e0       	ldi	r17, 0x00	; 0
    13d0:	24 2f       	mov	r18, r20
    13d2:	35 2f       	mov	r19, r21
    13d4:	0e 94 ab 04 	call	0x956	; 0x956 <fillRect>
			needFood = 1;
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	80 93 e3 01 	sts	0x01E3, r24
			//add_segment1();
			break;
		}
	}
	//check left
	for(uint8_t i = 0; i < foodSize; i++){
    13de:	10 91 12 01 	lds	r17, 0x0112
    13e2:	11 11       	cpse	r17, r1
    13e4:	57 c0       	rjmp	.+174    	; 0x1494 <detect_collision_food_1+0x15c>
    13e6:	83 c0       	rjmp	.+262    	; 0x14ee <detect_collision_food_1+0x1b6>
    13e8:	31 96       	adiw	r30, 0x01	; 1
			//add_segment1();
			break;
		}
	}
	//check bottom
	for(uint8_t i = 0; i < foodSize; i++){
    13ea:	eb 15       	cp	r30, r11
    13ec:	20 f3       	brcs	.-56     	; 0x13b6 <detect_collision_food_1+0x7e>
    13ee:	50 c0       	rjmp	.+160    	; 0x1490 <detect_collision_food_1+0x158>
			break;
		}
	}
	//check left
	for(uint8_t i = 0; i < foodSize; i++){
		if(segments1[0].x == (foodX) && segments1[0].y == (foodY+i)){
    13f0:	84 17       	cp	r24, r20
    13f2:	95 07       	cpc	r25, r21
    13f4:	a9 f4       	brne	.+42     	; 0x1420 <detect_collision_food_1+0xe8>
    13f6:	f9 01       	movw	r30, r18
    13f8:	ea 0f       	add	r30, r26
    13fa:	fb 1f       	adc	r31, r27
    13fc:	ce 17       	cp	r28, r30
    13fe:	df 07       	cpc	r29, r31
    1400:	79 f4       	brne	.+30     	; 0x1420 <detect_collision_food_1+0xe8>
			fillRect(foodX, foodY, foodSize, foodSize, 0);
    1402:	41 2f       	mov	r20, r17
    1404:	50 e0       	ldi	r21, 0x00	; 0
    1406:	00 e0       	ldi	r16, 0x00	; 0
    1408:	10 e0       	ldi	r17, 0x00	; 0
    140a:	9a 01       	movw	r18, r20
    140c:	0e 94 ab 04 	call	0x956	; 0x956 <fillRect>
			needFood = 1;
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	80 93 e3 01 	sts	0x01E3, r24
			//add_segment1();
			break;
		}
	}
	//check right
	for(uint8_t i = 0; i < foodSize; i++){
    1416:	90 90 12 01 	lds	r9, 0x0112
    141a:	91 10       	cpse	r9, r1
    141c:	50 c0       	rjmp	.+160    	; 0x14be <detect_collision_food_1+0x186>
    141e:	67 c0       	rjmp	.+206    	; 0x14ee <detect_collision_food_1+0x1b6>
    1420:	2f 5f       	subi	r18, 0xFF	; 255
    1422:	3f 4f       	sbci	r19, 0xFF	; 255
			//add_segment1();
			break;
		}
	}
	//check left
	for(uint8_t i = 0; i < foodSize; i++){
    1424:	21 17       	cp	r18, r17
    1426:	20 f3       	brcs	.-56     	; 0x13f0 <detect_collision_food_1+0xb8>
    1428:	48 c0       	rjmp	.+144    	; 0x14ba <detect_collision_food_1+0x182>
			break;
		}
	}
	//check right
	for(uint8_t i = 0; i < foodSize; i++){
		if(segments1[0].x == (foodX + foodSize) && segments1[0].y == (foodY+i)){
    142a:	4a 2f       	mov	r20, r26
    142c:	5b 2f       	mov	r21, r27
    142e:	0c 17       	cp	r16, r28
    1430:	1d 07       	cpc	r17, r29
    1432:	81 f4       	brne	.+32     	; 0x1454 <detect_collision_food_1+0x11c>
    1434:	7f 01       	movw	r14, r30
    1436:	ec 0c       	add	r14, r12
    1438:	fd 1c       	adc	r15, r13
    143a:	ae 14       	cp	r10, r14
    143c:	bf 04       	cpc	r11, r15
    143e:	51 f4       	brne	.+20     	; 0x1454 <detect_collision_food_1+0x11c>
			fillRect(foodX, foodY, foodSize, foodSize, 0);
    1440:	00 e0       	ldi	r16, 0x00	; 0
    1442:	10 e0       	ldi	r17, 0x00	; 0
    1444:	2a 2f       	mov	r18, r26
    1446:	3b 2f       	mov	r19, r27
    1448:	0e 94 ab 04 	call	0x956	; 0x956 <fillRect>
			needFood = 1;
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	80 93 e3 01 	sts	0x01E3, r24
			//add_segment1();
			break;
    1452:	4d c0       	rjmp	.+154    	; 0x14ee <detect_collision_food_1+0x1b6>
    1454:	21 e0       	ldi	r18, 0x01	; 1
    1456:	2e 0f       	add	r18, r30
    1458:	31 96       	adiw	r30, 0x01	; 1
			//add_segment1();
			break;
		}
	}
	//check right
	for(uint8_t i = 0; i < foodSize; i++){
    145a:	29 15       	cp	r18, r9
    145c:	30 f3       	brcs	.-52     	; 0x142a <detect_collision_food_1+0xf2>
    145e:	47 c0       	rjmp	.+142    	; 0x14ee <detect_collision_food_1+0x1b6>
			break;
		}
	}
	//check bottom
	for(uint8_t i = 0; i < foodSize; i++){
		if(segments1[0].x == (foodX+i) && segments1[0].y == (foodY+foodSize)){
    1460:	c0 91 19 05 	lds	r28, 0x0519
    1464:	d0 91 1a 05 	lds	r29, 0x051A
    1468:	a0 91 e2 01 	lds	r26, 0x01E2
    146c:	8a 2f       	mov	r24, r26
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	c0 90 1b 05 	lds	r12, 0x051B
    1474:	d0 90 1c 05 	lds	r13, 0x051C
    1478:	60 91 e1 01 	lds	r22, 0x01E1
    147c:	70 e0       	ldi	r23, 0x00	; 0
    147e:	e0 e0       	ldi	r30, 0x00	; 0
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	dc 01       	movw	r26, r24
    1484:	0b 2d       	mov	r16, r11
    1486:	10 e0       	ldi	r17, 0x00	; 0
    1488:	7b 01       	movw	r14, r22
    148a:	e0 0e       	add	r14, r16
    148c:	f1 1e       	adc	r15, r17
    148e:	93 cf       	rjmp	.-218    	; 0x13b6 <detect_collision_food_1+0x7e>
			//add_segment1();
			break;
		}
	}
	//check left
	for(uint8_t i = 0; i < foodSize; i++){
    1490:	10 91 12 01 	lds	r17, 0x0112
		if(segments1[0].x == (foodX) && segments1[0].y == (foodY+i)){
    1494:	80 91 19 05 	lds	r24, 0x0519
    1498:	90 91 1a 05 	lds	r25, 0x051A
    149c:	40 91 e2 01 	lds	r20, 0x01E2
    14a0:	50 e0       	ldi	r21, 0x00	; 0
    14a2:	c0 91 1b 05 	lds	r28, 0x051B
    14a6:	d0 91 1c 05 	lds	r29, 0x051C
    14aa:	a0 91 e1 01 	lds	r26, 0x01E1
    14ae:	6a 2f       	mov	r22, r26
    14b0:	70 e0       	ldi	r23, 0x00	; 0
    14b2:	20 e0       	ldi	r18, 0x00	; 0
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	db 01       	movw	r26, r22
    14b8:	9b cf       	rjmp	.-202    	; 0x13f0 <detect_collision_food_1+0xb8>
			//add_segment1();
			break;
		}
	}
	//check right
	for(uint8_t i = 0; i < foodSize; i++){
    14ba:	90 90 12 01 	lds	r9, 0x0112
		if(segments1[0].x == (foodX + foodSize) && segments1[0].y == (foodY+i)){
    14be:	00 91 19 05 	lds	r16, 0x0519
    14c2:	10 91 1a 05 	lds	r17, 0x051A
    14c6:	80 91 e2 01 	lds	r24, 0x01E2
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	a0 90 1b 05 	lds	r10, 0x051B
    14d0:	b0 90 1c 05 	lds	r11, 0x051C
    14d4:	c0 90 e1 01 	lds	r12, 0x01E1
    14d8:	6c 2d       	mov	r22, r12
    14da:	70 e0       	ldi	r23, 0x00	; 0
    14dc:	e0 e0       	ldi	r30, 0x00	; 0
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	a9 2d       	mov	r26, r9
    14e2:	b0 e0       	ldi	r27, 0x00	; 0
    14e4:	ec 01       	movw	r28, r24
    14e6:	ca 0f       	add	r28, r26
    14e8:	db 1f       	adc	r29, r27
    14ea:	6b 01       	movw	r12, r22
    14ec:	9e cf       	rjmp	.-196    	; 0x142a <detect_collision_food_1+0xf2>
			needFood = 1;
			//add_segment1();
			break;
		}
	}
}
    14ee:	df 91       	pop	r29
    14f0:	cf 91       	pop	r28
    14f2:	1f 91       	pop	r17
    14f4:	0f 91       	pop	r16
    14f6:	ff 90       	pop	r15
    14f8:	ef 90       	pop	r14
    14fa:	df 90       	pop	r13
    14fc:	cf 90       	pop	r12
    14fe:	bf 90       	pop	r11
    1500:	af 90       	pop	r10
    1502:	9f 90       	pop	r9
    1504:	08 95       	ret

00001506 <detect_collision_food_2>:

void detect_collision_food_2(){
    1506:	9f 92       	push	r9
    1508:	af 92       	push	r10
    150a:	bf 92       	push	r11
    150c:	cf 92       	push	r12
    150e:	df 92       	push	r13
    1510:	ef 92       	push	r14
    1512:	ff 92       	push	r15
    1514:	0f 93       	push	r16
    1516:	1f 93       	push	r17
    1518:	cf 93       	push	r28
    151a:	df 93       	push	r29
	//check top
	for(uint8_t i = 0; i < foodSize; i++){
    151c:	b0 90 12 01 	lds	r11, 0x0112
    1520:	bb 20       	and	r11, r11
    1522:	09 f4       	brne	.+2      	; 0x1526 <detect_collision_food_2+0x20>
    1524:	d3 c0       	rjmp	.+422    	; 0x16cc <detect_collision_food_2+0x1c6>
		if(segments2[0].x == (foodX+i) && segments2[0].y == (foodY)){
    1526:	a0 91 f1 01 	lds	r26, 0x01F1
    152a:	b0 91 f2 01 	lds	r27, 0x01F2
    152e:	e0 91 e2 01 	lds	r30, 0x01E2
    1532:	8e 2f       	mov	r24, r30
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	60 91 f3 01 	lds	r22, 0x01F3
    153a:	70 91 f4 01 	lds	r23, 0x01F4
    153e:	c0 91 e1 01 	lds	r28, 0x01E1
    1542:	d0 e0       	ldi	r29, 0x00	; 0
    1544:	20 e0       	ldi	r18, 0x00	; 0
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	fc 01       	movw	r30, r24
    154a:	a9 01       	movw	r20, r18
    154c:	4e 0f       	add	r20, r30
    154e:	5f 1f       	adc	r21, r31
    1550:	a4 17       	cp	r26, r20
    1552:	b5 07       	cpc	r27, r21
    1554:	a1 f4       	brne	.+40     	; 0x157e <detect_collision_food_2+0x78>
    1556:	6c 17       	cp	r22, r28
    1558:	7d 07       	cpc	r23, r29
    155a:	89 f4       	brne	.+34     	; 0x157e <detect_collision_food_2+0x78>
			fillRect(foodX, foodY, foodSize, foodSize, 0);
    155c:	4b 2d       	mov	r20, r11
    155e:	50 e0       	ldi	r21, 0x00	; 0
    1560:	00 e0       	ldi	r16, 0x00	; 0
    1562:	10 e0       	ldi	r17, 0x00	; 0
    1564:	9a 01       	movw	r18, r20
    1566:	0e 94 ab 04 	call	0x956	; 0x956 <fillRect>
			needFood = 1;
    156a:	81 e0       	ldi	r24, 0x01	; 1
    156c:	80 93 e3 01 	sts	0x01E3, r24
			add_segment2();
    1570:	0e 94 c8 08 	call	0x1190	; 0x1190 <add_segment2>
			break;
		}
	}
	//check bottom
	for(uint8_t i = 0; i < foodSize; i++){
    1574:	b0 90 12 01 	lds	r11, 0x0112
    1578:	b1 10       	cpse	r11, r1
    157a:	61 c0       	rjmp	.+194    	; 0x163e <detect_collision_food_2+0x138>
    157c:	a7 c0       	rjmp	.+334    	; 0x16cc <detect_collision_food_2+0x1c6>
    157e:	2f 5f       	subi	r18, 0xFF	; 255
    1580:	3f 4f       	sbci	r19, 0xFF	; 255
	}
}

void detect_collision_food_2(){
	//check top
	for(uint8_t i = 0; i < foodSize; i++){
    1582:	2b 15       	cp	r18, r11
    1584:	10 f3       	brcs	.-60     	; 0x154a <detect_collision_food_2+0x44>
    1586:	5b c0       	rjmp	.+182    	; 0x163e <detect_collision_food_2+0x138>
    1588:	9f 01       	movw	r18, r30
    158a:	2a 0f       	add	r18, r26
    158c:	3b 1f       	adc	r19, r27
			break;
		}
	}
	//check bottom
	for(uint8_t i = 0; i < foodSize; i++){
		if(segments2[0].x == (foodX+i) && segments2[0].y == (foodY+foodSize)){
    158e:	c2 17       	cp	r28, r18
    1590:	d3 07       	cpc	r29, r19
    1592:	a9 f4       	brne	.+42     	; 0x15be <detect_collision_food_2+0xb8>
    1594:	40 2f       	mov	r20, r16
    1596:	51 2f       	mov	r21, r17
    1598:	ce 14       	cp	r12, r14
    159a:	df 04       	cpc	r13, r15
    159c:	81 f4       	brne	.+32     	; 0x15be <detect_collision_food_2+0xb8>
			fillRect(foodX, foodY, foodSize, foodSize, 0);
    159e:	00 e0       	ldi	r16, 0x00	; 0
    15a0:	10 e0       	ldi	r17, 0x00	; 0
    15a2:	24 2f       	mov	r18, r20
    15a4:	35 2f       	mov	r19, r21
    15a6:	0e 94 ab 04 	call	0x956	; 0x956 <fillRect>
			needFood = 1;
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	80 93 e3 01 	sts	0x01E3, r24
			add_segment2();
    15b0:	0e 94 c8 08 	call	0x1190	; 0x1190 <add_segment2>
			break;
		}
	}
	//check left
	for(uint8_t i = 0; i < foodSize; i++){
    15b4:	10 91 12 01 	lds	r17, 0x0112
    15b8:	11 11       	cpse	r17, r1
    15ba:	5b c0       	rjmp	.+182    	; 0x1672 <detect_collision_food_2+0x16c>
    15bc:	87 c0       	rjmp	.+270    	; 0x16cc <detect_collision_food_2+0x1c6>
    15be:	31 96       	adiw	r30, 0x01	; 1
			add_segment2();
			break;
		}
	}
	//check bottom
	for(uint8_t i = 0; i < foodSize; i++){
    15c0:	eb 15       	cp	r30, r11
    15c2:	10 f3       	brcs	.-60     	; 0x1588 <detect_collision_food_2+0x82>
    15c4:	54 c0       	rjmp	.+168    	; 0x166e <detect_collision_food_2+0x168>
			break;
		}
	}
	//check left
	for(uint8_t i = 0; i < foodSize; i++){
		if(segments2[0].x == (foodX) && segments2[0].y == (foodY+i)){
    15c6:	84 17       	cp	r24, r20
    15c8:	95 07       	cpc	r25, r21
    15ca:	b9 f4       	brne	.+46     	; 0x15fa <detect_collision_food_2+0xf4>
    15cc:	f9 01       	movw	r30, r18
    15ce:	ea 0f       	add	r30, r26
    15d0:	fb 1f       	adc	r31, r27
    15d2:	ce 17       	cp	r28, r30
    15d4:	df 07       	cpc	r29, r31
    15d6:	89 f4       	brne	.+34     	; 0x15fa <detect_collision_food_2+0xf4>
			fillRect(foodX, foodY, foodSize, foodSize, 0);
    15d8:	41 2f       	mov	r20, r17
    15da:	50 e0       	ldi	r21, 0x00	; 0
    15dc:	00 e0       	ldi	r16, 0x00	; 0
    15de:	10 e0       	ldi	r17, 0x00	; 0
    15e0:	9a 01       	movw	r18, r20
    15e2:	0e 94 ab 04 	call	0x956	; 0x956 <fillRect>
			needFood = 1;
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	80 93 e3 01 	sts	0x01E3, r24
			add_segment2();
    15ec:	0e 94 c8 08 	call	0x1190	; 0x1190 <add_segment2>
			break;
		}
	}
	//check right
	for(uint8_t i = 0; i < foodSize; i++){
    15f0:	90 90 12 01 	lds	r9, 0x0112
    15f4:	91 10       	cpse	r9, r1
    15f6:	52 c0       	rjmp	.+164    	; 0x169c <detect_collision_food_2+0x196>
    15f8:	69 c0       	rjmp	.+210    	; 0x16cc <detect_collision_food_2+0x1c6>
    15fa:	2f 5f       	subi	r18, 0xFF	; 255
    15fc:	3f 4f       	sbci	r19, 0xFF	; 255
			add_segment2();
			break;
		}
	}
	//check left
	for(uint8_t i = 0; i < foodSize; i++){
    15fe:	21 17       	cp	r18, r17
    1600:	10 f3       	brcs	.-60     	; 0x15c6 <detect_collision_food_2+0xc0>
    1602:	4a c0       	rjmp	.+148    	; 0x1698 <detect_collision_food_2+0x192>
			break;
		}
	}
	//check right
	for(uint8_t i = 0; i < foodSize; i++){
		if(segments2[0].x == (foodX + foodSize) && segments2[0].y == (foodY+i)){
    1604:	4a 2f       	mov	r20, r26
    1606:	5b 2f       	mov	r21, r27
    1608:	0c 17       	cp	r16, r28
    160a:	1d 07       	cpc	r17, r29
    160c:	91 f4       	brne	.+36     	; 0x1632 <detect_collision_food_2+0x12c>
    160e:	7f 01       	movw	r14, r30
    1610:	ec 0c       	add	r14, r12
    1612:	fd 1c       	adc	r15, r13
    1614:	ae 14       	cp	r10, r14
    1616:	bf 04       	cpc	r11, r15
    1618:	61 f4       	brne	.+24     	; 0x1632 <detect_collision_food_2+0x12c>
			fillRect(foodX, foodY, foodSize, foodSize, 0);
    161a:	00 e0       	ldi	r16, 0x00	; 0
    161c:	10 e0       	ldi	r17, 0x00	; 0
    161e:	2a 2f       	mov	r18, r26
    1620:	3b 2f       	mov	r19, r27
    1622:	0e 94 ab 04 	call	0x956	; 0x956 <fillRect>
			needFood = 1;
    1626:	81 e0       	ldi	r24, 0x01	; 1
    1628:	80 93 e3 01 	sts	0x01E3, r24
			add_segment2();
    162c:	0e 94 c8 08 	call	0x1190	; 0x1190 <add_segment2>
			break;
    1630:	4d c0       	rjmp	.+154    	; 0x16cc <detect_collision_food_2+0x1c6>
    1632:	21 e0       	ldi	r18, 0x01	; 1
    1634:	2e 0f       	add	r18, r30
    1636:	31 96       	adiw	r30, 0x01	; 1
			add_segment2();
			break;
		}
	}
	//check right
	for(uint8_t i = 0; i < foodSize; i++){
    1638:	29 15       	cp	r18, r9
    163a:	20 f3       	brcs	.-56     	; 0x1604 <detect_collision_food_2+0xfe>
    163c:	47 c0       	rjmp	.+142    	; 0x16cc <detect_collision_food_2+0x1c6>
			break;
		}
	}
	//check bottom
	for(uint8_t i = 0; i < foodSize; i++){
		if(segments2[0].x == (foodX+i) && segments2[0].y == (foodY+foodSize)){
    163e:	c0 91 f1 01 	lds	r28, 0x01F1
    1642:	d0 91 f2 01 	lds	r29, 0x01F2
    1646:	a0 91 e2 01 	lds	r26, 0x01E2
    164a:	8a 2f       	mov	r24, r26
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	c0 90 f3 01 	lds	r12, 0x01F3
    1652:	d0 90 f4 01 	lds	r13, 0x01F4
    1656:	60 91 e1 01 	lds	r22, 0x01E1
    165a:	70 e0       	ldi	r23, 0x00	; 0
    165c:	e0 e0       	ldi	r30, 0x00	; 0
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	dc 01       	movw	r26, r24
    1662:	0b 2d       	mov	r16, r11
    1664:	10 e0       	ldi	r17, 0x00	; 0
    1666:	7b 01       	movw	r14, r22
    1668:	e0 0e       	add	r14, r16
    166a:	f1 1e       	adc	r15, r17
    166c:	8d cf       	rjmp	.-230    	; 0x1588 <detect_collision_food_2+0x82>
			add_segment2();
			break;
		}
	}
	//check left
	for(uint8_t i = 0; i < foodSize; i++){
    166e:	10 91 12 01 	lds	r17, 0x0112
		if(segments2[0].x == (foodX) && segments2[0].y == (foodY+i)){
    1672:	80 91 f1 01 	lds	r24, 0x01F1
    1676:	90 91 f2 01 	lds	r25, 0x01F2
    167a:	40 91 e2 01 	lds	r20, 0x01E2
    167e:	50 e0       	ldi	r21, 0x00	; 0
    1680:	c0 91 f3 01 	lds	r28, 0x01F3
    1684:	d0 91 f4 01 	lds	r29, 0x01F4
    1688:	a0 91 e1 01 	lds	r26, 0x01E1
    168c:	6a 2f       	mov	r22, r26
    168e:	70 e0       	ldi	r23, 0x00	; 0
    1690:	20 e0       	ldi	r18, 0x00	; 0
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	db 01       	movw	r26, r22
    1696:	97 cf       	rjmp	.-210    	; 0x15c6 <detect_collision_food_2+0xc0>
			add_segment2();
			break;
		}
	}
	//check right
	for(uint8_t i = 0; i < foodSize; i++){
    1698:	90 90 12 01 	lds	r9, 0x0112
		if(segments2[0].x == (foodX + foodSize) && segments2[0].y == (foodY+i)){
    169c:	00 91 f1 01 	lds	r16, 0x01F1
    16a0:	10 91 f2 01 	lds	r17, 0x01F2
    16a4:	80 91 e2 01 	lds	r24, 0x01E2
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	a0 90 f3 01 	lds	r10, 0x01F3
    16ae:	b0 90 f4 01 	lds	r11, 0x01F4
    16b2:	c0 90 e1 01 	lds	r12, 0x01E1
    16b6:	6c 2d       	mov	r22, r12
    16b8:	70 e0       	ldi	r23, 0x00	; 0
    16ba:	e0 e0       	ldi	r30, 0x00	; 0
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	a9 2d       	mov	r26, r9
    16c0:	b0 e0       	ldi	r27, 0x00	; 0
    16c2:	ec 01       	movw	r28, r24
    16c4:	ca 0f       	add	r28, r26
    16c6:	db 1f       	adc	r29, r27
    16c8:	6b 01       	movw	r12, r22
    16ca:	9c cf       	rjmp	.-200    	; 0x1604 <detect_collision_food_2+0xfe>
			needFood = 1;
			add_segment2();
			break;
		}
	}
}
    16cc:	df 91       	pop	r29
    16ce:	cf 91       	pop	r28
    16d0:	1f 91       	pop	r17
    16d2:	0f 91       	pop	r16
    16d4:	ff 90       	pop	r15
    16d6:	ef 90       	pop	r14
    16d8:	df 90       	pop	r13
    16da:	cf 90       	pop	r12
    16dc:	bf 90       	pop	r11
    16de:	af 90       	pop	r10
    16e0:	9f 90       	pop	r9
    16e2:	08 95       	ret

000016e4 <add_food>:

void add_food(){
    16e4:	0f 93       	push	r16
    16e6:	1f 93       	push	r17
	//if(clock_counter)
	//foodX = clock_counter % 1 + 10;
	//foodY = rand() % 1 - 10;
	foodX = clock_counter*2;
    16e8:	90 91 e7 01 	lds	r25, 0x01E7
    16ec:	89 2f       	mov	r24, r25
    16ee:	88 0f       	add	r24, r24
    16f0:	80 93 e2 01 	sts	0x01E2, r24
	foodY = clock_counter*3;
    16f4:	98 0f       	add	r25, r24
    16f6:	90 93 e1 01 	sts	0x01E1, r25
	while(foodX > 120){
    16fa:	89 37       	cpi	r24, 0x79	; 121
    16fc:	28 f0       	brcs	.+10     	; 0x1708 <add_food+0x24>
		foodX >>= 1;
    16fe:	86 95       	lsr	r24
	//if(clock_counter)
	//foodX = clock_counter % 1 + 10;
	//foodY = rand() % 1 - 10;
	foodX = clock_counter*2;
	foodY = clock_counter*3;
	while(foodX > 120){
    1700:	89 37       	cpi	r24, 0x79	; 121
    1702:	e8 f7       	brcc	.-6      	; 0x16fe <add_food+0x1a>
    1704:	80 93 e2 01 	sts	0x01E2, r24
		foodX >>= 1;
	}
	while(foodY >= 150){
    1708:	90 91 e1 01 	lds	r25, 0x01E1
    170c:	96 39       	cpi	r25, 0x96	; 150
    170e:	18 f0       	brcs	.+6      	; 0x1716 <add_food+0x32>
		foodY >>= 1;
    1710:	96 95       	lsr	r25
    1712:	90 93 e1 01 	sts	0x01E1, r25
	}
	
	if(foodY < 11){
    1716:	9b 30       	cpi	r25, 0x0B	; 11
    1718:	18 f4       	brcc	.+6      	; 0x1720 <add_food+0x3c>
		foodY += 20;
    171a:	9c 5e       	subi	r25, 0xEC	; 236
    171c:	90 93 e1 01 	sts	0x01E1, r25
	}
	//check collision with snake
	
	
	fillRect(foodX, foodY, foodSize, foodSize, 0xFFFF);
    1720:	40 91 12 01 	lds	r20, 0x0112
    1724:	50 e0       	ldi	r21, 0x00	; 0
    1726:	60 91 e1 01 	lds	r22, 0x01E1
    172a:	70 e0       	ldi	r23, 0x00	; 0
    172c:	0f ef       	ldi	r16, 0xFF	; 255
    172e:	1f ef       	ldi	r17, 0xFF	; 255
    1730:	9a 01       	movw	r18, r20
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	0e 94 ab 04 	call	0x956	; 0x956 <fillRect>
	needFood = 0;
    1738:	10 92 e3 01 	sts	0x01E3, r1
}
    173c:	1f 91       	pop	r17
    173e:	0f 91       	pop	r16
    1740:	08 95       	ret

00001742 <draw_Snake1>:


void draw_Snake1(){
    1742:	0f 93       	push	r16
    1744:	1f 93       	push	r17
	for(int i = 0; i < current_segment1; i++){
		fillRect(segments1[i].x, segments1[i].y, 1, 1, 0xFF);
		fillRect(xLast1, yLast1, 1, 1, 0x0000);
	}
	*/
	fillRect(segments1[0].x, segments1[0].y, 1, 1, 0xFF);
    1746:	60 91 1b 05 	lds	r22, 0x051B
    174a:	70 91 1c 05 	lds	r23, 0x051C
    174e:	0f ef       	ldi	r16, 0xFF	; 255
    1750:	10 e0       	ldi	r17, 0x00	; 0
    1752:	21 e0       	ldi	r18, 0x01	; 1
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	41 e0       	ldi	r20, 0x01	; 1
    1758:	50 e0       	ldi	r21, 0x00	; 0
    175a:	80 91 19 05 	lds	r24, 0x0519
    175e:	90 91 1a 05 	lds	r25, 0x051A
    1762:	0e 94 ab 04 	call	0x956	; 0x956 <fillRect>
	fillRect(xLast1, yLast1, 1, 1, 0x0000);
    1766:	60 91 e9 01 	lds	r22, 0x01E9
    176a:	70 91 ea 01 	lds	r23, 0x01EA
    176e:	00 e0       	ldi	r16, 0x00	; 0
    1770:	10 e0       	ldi	r17, 0x00	; 0
    1772:	21 e0       	ldi	r18, 0x01	; 1
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	41 e0       	ldi	r20, 0x01	; 1
    1778:	50 e0       	ldi	r21, 0x00	; 0
    177a:	80 91 39 08 	lds	r24, 0x0839
    177e:	90 91 3a 08 	lds	r25, 0x083A
    1782:	0e 94 ab 04 	call	0x956	; 0x956 <fillRect>
}
    1786:	1f 91       	pop	r17
    1788:	0f 91       	pop	r16
    178a:	08 95       	ret

0000178c <draw_Snake2>:

void draw_Snake2(){
    178c:	0f 93       	push	r16
    178e:	1f 93       	push	r17
	for(int i = 0; i < current_segment2; i++){
		fillRect(segments2[i].x, segments2[i].y, 1, 1, COLOR_GREEN);
		fillRect(xLast2, yLast2, 1, 1, 0x0000);
	}
	*/
	fillRect(segments2[0].x, segments2[0].y, 1, 1, COLOR_GREEN);
    1790:	60 91 f3 01 	lds	r22, 0x01F3
    1794:	70 91 f4 01 	lds	r23, 0x01F4
    1798:	00 ee       	ldi	r16, 0xE0	; 224
    179a:	17 e0       	ldi	r17, 0x07	; 7
    179c:	21 e0       	ldi	r18, 0x01	; 1
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	41 e0       	ldi	r20, 0x01	; 1
    17a2:	50 e0       	ldi	r21, 0x00	; 0
    17a4:	80 91 f1 01 	lds	r24, 0x01F1
    17a8:	90 91 f2 01 	lds	r25, 0x01F2
    17ac:	0e 94 ab 04 	call	0x956	; 0x956 <fillRect>
	fillRect(xLast2, yLast2, 1, 1, 0x0000);
    17b0:	60 91 3b 08 	lds	r22, 0x083B
    17b4:	70 91 3c 08 	lds	r23, 0x083C
    17b8:	00 e0       	ldi	r16, 0x00	; 0
    17ba:	10 e0       	ldi	r17, 0x00	; 0
    17bc:	21 e0       	ldi	r18, 0x01	; 1
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	41 e0       	ldi	r20, 0x01	; 1
    17c2:	50 e0       	ldi	r21, 0x00	; 0
    17c4:	80 91 ed 01 	lds	r24, 0x01ED
    17c8:	90 91 ee 01 	lds	r25, 0x01EE
    17cc:	0e 94 ab 04 	call	0x956	; 0x956 <fillRect>
}
    17d0:	1f 91       	pop	r17
    17d2:	0f 91       	pop	r16
    17d4:	08 95       	ret

000017d6 <TimerOn>:
	_avr_timer_cntcurr = _avr_timer_M;
}

void TimerOn() {
	// AVR timer/counter controller register TCCR1
	TCCR1B 	= 0x0B;	// bit3 = 1: CTC mode (clear timer on compare)
    17d6:	8b e0       	ldi	r24, 0x0B	; 11
    17d8:	80 93 81 00 	sts	0x0081, r24
					// 00001011: 0x0B
					// SO, 8 MHz clock or 8,000,000 /64 = 125,000 ticks/s
					// Thus, TCNT1 register will count at 125,000 ticks/s

	// AVR output compare register OCR1A.
	OCR1A 	= 125;	// Timer interrupt will be generated when TCNT1==OCR1A
    17dc:	8d e7       	ldi	r24, 0x7D	; 125
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	90 93 89 00 	sts	0x0089, r25
    17e4:	80 93 88 00 	sts	0x0088, r24
					// We want a 1 ms tick. 0.001 s * 125,000 ticks/s = 125
					// So when TCNT1 register equals 125,
					// 1 ms has passed. Thus, we compare to 125.
					// AVR timer interrupt mask register

	TIMSK1 	= 0x02; // bit1: OCIE1A -- enables compare match interrupt
    17e8:	82 e0       	ldi	r24, 0x02	; 2
    17ea:	80 93 6f 00 	sts	0x006F, r24

	//Initialize avr counter
	TCNT1 = 0;
    17ee:	10 92 85 00 	sts	0x0085, r1
    17f2:	10 92 84 00 	sts	0x0084, r1

	// TimerISR will be called every _avr_timer_cntcurr milliseconds
	_avr_timer_cntcurr = _avr_timer_M;
    17f6:	80 91 0e 01 	lds	r24, 0x010E
    17fa:	90 91 0f 01 	lds	r25, 0x010F
    17fe:	a0 91 10 01 	lds	r26, 0x0110
    1802:	b0 91 11 01 	lds	r27, 0x0111
    1806:	80 93 d7 01 	sts	0x01D7, r24
    180a:	90 93 d8 01 	sts	0x01D8, r25
    180e:	a0 93 d9 01 	sts	0x01D9, r26
    1812:	b0 93 da 01 	sts	0x01DA, r27

	//Enable global interrupts
	SREG |= 0x80;	// 0x80: 1000000
    1816:	8f b7       	in	r24, 0x3f	; 63
    1818:	80 68       	ori	r24, 0x80	; 128
    181a:	8f bf       	out	0x3f, r24	; 63
    181c:	08 95       	ret

0000181e <__vector_11>:
	TimerFlag = 1;
}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect)
{
    181e:	1f 92       	push	r1
    1820:	0f 92       	push	r0
    1822:	0f b6       	in	r0, 0x3f	; 63
    1824:	0f 92       	push	r0
    1826:	11 24       	eor	r1, r1
    1828:	8f 93       	push	r24
    182a:	9f 93       	push	r25
    182c:	af 93       	push	r26
    182e:	bf 93       	push	r27
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
    1830:	80 91 d7 01 	lds	r24, 0x01D7
    1834:	90 91 d8 01 	lds	r25, 0x01D8
    1838:	a0 91 d9 01 	lds	r26, 0x01D9
    183c:	b0 91 da 01 	lds	r27, 0x01DA
    1840:	01 97       	sbiw	r24, 0x01	; 1
    1842:	a1 09       	sbc	r26, r1
    1844:	b1 09       	sbc	r27, r1
    1846:	80 93 d7 01 	sts	0x01D7, r24
    184a:	90 93 d8 01 	sts	0x01D8, r25
    184e:	a0 93 d9 01 	sts	0x01D9, r26
    1852:	b0 93 da 01 	sts	0x01DA, r27
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
    1856:	89 2b       	or	r24, r25
    1858:	8a 2b       	or	r24, r26
    185a:	8b 2b       	or	r24, r27
    185c:	99 f4       	brne	.+38     	; 0x1884 <__vector_11+0x66>
void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}

void TimerISR() {
	TimerFlag = 1;
    185e:	81 e0       	ldi	r24, 0x01	; 1
    1860:	80 93 db 01 	sts	0x01DB, r24
{
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
		TimerISR(); 				// Call the ISR that the user uses
		_avr_timer_cntcurr = _avr_timer_M;
    1864:	80 91 0e 01 	lds	r24, 0x010E
    1868:	90 91 0f 01 	lds	r25, 0x010F
    186c:	a0 91 10 01 	lds	r26, 0x0110
    1870:	b0 91 11 01 	lds	r27, 0x0111
    1874:	80 93 d7 01 	sts	0x01D7, r24
    1878:	90 93 d8 01 	sts	0x01D8, r25
    187c:	a0 93 d9 01 	sts	0x01D9, r26
    1880:	b0 93 da 01 	sts	0x01DA, r27
	}
}
    1884:	bf 91       	pop	r27
    1886:	af 91       	pop	r26
    1888:	9f 91       	pop	r25
    188a:	8f 91       	pop	r24
    188c:	0f 90       	pop	r0
    188e:	0f be       	out	0x3f, r0	; 63
    1890:	0f 90       	pop	r0
    1892:	1f 90       	pop	r1
    1894:	18 95       	reti

00001896 <USART_Init>:

void USART_Init( )
{
	int ubrr = MYUBRR;
	/*Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
    1896:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)ubrr;
    189a:	89 e1       	ldi	r24, 0x19	; 25
    189c:	80 93 c4 00 	sts	0x00C4, r24
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    18a0:	88 e1       	ldi	r24, 0x18	; 24
    18a2:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8data, 1stop bit */
	UCSR0C = (0 << UMSEL00) | (0<<USBS0)|(1 << UCSZ00) | (1 << UCSZ01);//(3<<UCSZ00);
    18a6:	86 e0       	ldi	r24, 0x06	; 6
    18a8:	80 93 c2 00 	sts	0x00C2, r24
    18ac:	08 95       	ret

000018ae <USART_Receive>:
	}

unsigned char USART_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) )
    18ae:	e0 ec       	ldi	r30, 0xC0	; 192
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	80 81       	ld	r24, Z
    18b4:	88 23       	and	r24, r24
    18b6:	ec f7       	brge	.-6      	; 0x18b2 <USART_Receive+0x4>
	;
	/* Get and return received data from buffer */
	return UDR0;
    18b8:	80 91 c6 00 	lds	r24, 0x00C6
}
    18bc:	08 95       	ret

000018be <USART_Flush>:
}

void USART_Flush()
{
	static unsigned char dummy;
	while ( UCSR0A & (1 << RXC0) ) { dummy = UDR0; }
    18be:	80 91 c0 00 	lds	r24, 0x00C0
    18c2:	88 23       	and	r24, r24
    18c4:	54 f4       	brge	.+20     	; 0x18da <USART_Flush+0x1c>
    18c6:	a6 ec       	ldi	r26, 0xC6	; 198
    18c8:	b0 e0       	ldi	r27, 0x00	; 0
    18ca:	e0 ec       	ldi	r30, 0xC0	; 192
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	8c 91       	ld	r24, X
    18d0:	80 93 ca 01 	sts	0x01CA, r24
    18d4:	80 81       	ld	r24, Z
    18d6:	88 23       	and	r24, r24
    18d8:	d4 f3       	brlt	.-12     	; 0x18ce <USART_Flush+0x10>
    18da:	08 95       	ret

000018dc <initADC>:
#include <avr/io.h>
uint16_t adc_value;        //Variable used to store the value read from the ADC converter

void initADC(){
	
	ADCSRA |= ((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0));
    18dc:	ea e7       	ldi	r30, 0x7A	; 122
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	80 81       	ld	r24, Z
    18e2:	87 60       	ori	r24, 0x07	; 7
    18e4:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0) | (1 << MUX2);
    18e6:	ac e7       	ldi	r26, 0x7C	; 124
    18e8:	b0 e0       	ldi	r27, 0x00	; 0
    18ea:	8c 91       	ld	r24, X
    18ec:	84 64       	ori	r24, 0x44	; 68
    18ee:	8c 93       	st	X, r24
	ADMUX &= ~(1<<REFS1);                
    18f0:	8c 91       	ld	r24, X
    18f2:	8f 77       	andi	r24, 0x7F	; 127
    18f4:	8c 93       	st	X, r24
	ADCSRB &= ~((1<<ADTS2)|(1<<ADTS1)|(1<<ADTS0));    //ADC in free-running mode
    18f6:	ab e7       	ldi	r26, 0x7B	; 123
    18f8:	b0 e0       	ldi	r27, 0x00	; 0
    18fa:	8c 91       	ld	r24, X
    18fc:	88 7f       	andi	r24, 0xF8	; 248
    18fe:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADATE)|(1<<ADEN)|(1<<ADSC);           
    1900:	80 81       	ld	r24, Z
    1902:	80 6e       	ori	r24, 0xE0	; 224
    1904:	80 83       	st	Z, r24
    1906:	08 95       	ret

00001908 <updateColor>:
enum colors{red_to_green, green_to_blue, blue_to_red} color_set;
//color_set = red_to_green;
uint8_t r = 0, g = 0, b = 0;

void updateColor(){
	switch(color_set){
    1908:	80 91 18 05 	lds	r24, 0x0518
    190c:	81 30       	cpi	r24, 0x01	; 1
    190e:	a9 f0       	breq	.+42     	; 0x193a <updateColor+0x32>
    1910:	18 f0       	brcs	.+6      	; 0x1918 <updateColor+0x10>
    1912:	82 30       	cpi	r24, 0x02	; 2
    1914:	19 f1       	breq	.+70     	; 0x195c <updateColor+0x54>
    1916:	32 c0       	rjmp	.+100    	; 0x197c <updateColor+0x74>
		case red_to_green:
		g++;
    1918:	80 91 d5 01 	lds	r24, 0x01D5
    191c:	8f 5f       	subi	r24, 0xFF	; 255
    191e:	80 93 d5 01 	sts	0x01D5, r24
		r = 255 - g;
    1922:	98 2f       	mov	r25, r24
    1924:	90 95       	com	r25
    1926:	90 93 d6 01 	sts	0x01D6, r25
		if(g >= 255){
    192a:	8f 3f       	cpi	r24, 0xFF	; 255
    192c:	49 f5       	brne	.+82     	; 0x1980 <updateColor+0x78>
			b = 0;
    192e:	10 92 d4 01 	sts	0x01D4, r1
			color_set = green_to_blue;
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	80 93 18 05 	sts	0x0518, r24
    1938:	08 95       	ret
		}
		break;
		case green_to_blue:
		b++;
    193a:	80 91 d4 01 	lds	r24, 0x01D4
    193e:	8f 5f       	subi	r24, 0xFF	; 255
    1940:	80 93 d4 01 	sts	0x01D4, r24
		g = 255-b;
    1944:	98 2f       	mov	r25, r24
    1946:	90 95       	com	r25
    1948:	90 93 d5 01 	sts	0x01D5, r25
		if(b >= 255){
    194c:	8f 3f       	cpi	r24, 0xFF	; 255
    194e:	c1 f4       	brne	.+48     	; 0x1980 <updateColor+0x78>
			r = 0;
    1950:	10 92 d6 01 	sts	0x01D6, r1
			color_set = blue_to_red;
    1954:	82 e0       	ldi	r24, 0x02	; 2
    1956:	80 93 18 05 	sts	0x0518, r24
    195a:	08 95       	ret
		}
		break;
		case blue_to_red:
		r++;
    195c:	80 91 d6 01 	lds	r24, 0x01D6
    1960:	8f 5f       	subi	r24, 0xFF	; 255
    1962:	80 93 d6 01 	sts	0x01D6, r24
		b = 255-r;
    1966:	98 2f       	mov	r25, r24
    1968:	90 95       	com	r25
    196a:	90 93 d4 01 	sts	0x01D4, r25
		if(r >= 255){
    196e:	8f 3f       	cpi	r24, 0xFF	; 255
    1970:	39 f4       	brne	.+14     	; 0x1980 <updateColor+0x78>
			g = 0;
    1972:	10 92 d5 01 	sts	0x01D5, r1
			color_set = red_to_green;
    1976:	10 92 18 05 	sts	0x0518, r1
    197a:	08 95       	ret
		}
		break;
		default:
		color_set = red_to_green;
    197c:	10 92 18 05 	sts	0x0518, r1
    1980:	08 95       	ret

00001982 <setTimerPeriod>:
	unsigned char aux_start_2 = 0x00;

uint8_t usart_temp = 0x00;

void setTimerPeriod(uint16_t period){
	TimerSet(period);
    1982:	ac 01       	movw	r20, r24
    1984:	60 e0       	ldi	r22, 0x00	; 0
    1986:	70 e0       	ldi	r23, 0x00	; 0
unsigned long _avr_timer_M = 1; // Start count from here, down to 0. Default 1ms
unsigned long _avr_timer_cntcurr = 0; // Current internal count of 1ms ticks

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
    1988:	40 93 0e 01 	sts	0x010E, r20
    198c:	50 93 0f 01 	sts	0x010F, r21
    1990:	60 93 10 01 	sts	0x0110, r22
    1994:	70 93 11 01 	sts	0x0111, r23
	_avr_timer_cntcurr = _avr_timer_M;
    1998:	40 93 d7 01 	sts	0x01D7, r20
    199c:	50 93 d8 01 	sts	0x01D8, r21
    19a0:	60 93 d9 01 	sts	0x01D9, r22
    19a4:	70 93 da 01 	sts	0x01DA, r23
	periodMultiplier = period;
    19a8:	90 93 0d 01 	sts	0x010D, r25
    19ac:	80 93 0c 01 	sts	0x010C, r24
    19b0:	08 95       	ret

000019b2 <Clock_sm>:
enum Clock_states{init_clock, update_clock}clock_state;


char convert_buffer[16];

void Clock_sm(){
    19b2:	ef 92       	push	r14
    19b4:	ff 92       	push	r15
    19b6:	0f 93       	push	r16
    19b8:	cf 93       	push	r28
    19ba:	df 93       	push	r29
	switch(clock_state){
    19bc:	80 91 59 08 	lds	r24, 0x0859
    19c0:	88 23       	and	r24, r24
    19c2:	19 f0       	breq	.+6      	; 0x19ca <Clock_sm+0x18>
    19c4:	81 30       	cpi	r24, 0x01	; 1
    19c6:	49 f0       	breq	.+18     	; 0x19da <Clock_sm+0x28>
    19c8:	44 c0       	rjmp	.+136    	; 0x1a52 <Clock_sm+0xa0>
		case init_clock:
			clock_counter = 0;
    19ca:	10 92 e8 01 	sts	0x01E8, r1
    19ce:	10 92 e7 01 	sts	0x01E7, r1
			clock_state = update_clock;
    19d2:	81 e0       	ldi	r24, 0x01	; 1
    19d4:	80 93 59 08 	sts	0x0859, r24
			break;
    19d8:	3c c0       	rjmp	.+120    	; 0x1a52 <Clock_sm+0xa0>
		
		case update_clock:
			
			sprintf(convert_buffer, "%d", clock_counter);
    19da:	80 91 e8 01 	lds	r24, 0x01E8
    19de:	8f 93       	push	r24
    19e0:	80 91 e7 01 	lds	r24, 0x01E7
    19e4:	8f 93       	push	r24
    19e6:	0f 2e       	mov	r0, r31
    19e8:	f5 e1       	ldi	r31, 0x15	; 21
    19ea:	ef 2e       	mov	r14, r31
    19ec:	f1 e0       	ldi	r31, 0x01	; 1
    19ee:	ff 2e       	mov	r15, r31
    19f0:	f0 2d       	mov	r31, r0
    19f2:	ff 92       	push	r15
    19f4:	ef 92       	push	r14
    19f6:	c9 e4       	ldi	r28, 0x49	; 73
    19f8:	d8 e0       	ldi	r29, 0x08	; 8
    19fa:	df 93       	push	r29
    19fc:	cf 93       	push	r28
    19fe:	0e 94 48 14 	call	0x2890	; 0x2890 <sprintf>
			drawString(1, 1, convert_buffer, 0, 1);
    1a02:	01 e0       	ldi	r16, 0x01	; 1
    1a04:	20 e0       	ldi	r18, 0x00	; 0
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	ae 01       	movw	r20, r28
    1a0a:	61 e0       	ldi	r22, 0x01	; 1
    1a0c:	81 e0       	ldi	r24, 0x01	; 1
    1a0e:	0e 94 98 05 	call	0xb30	; 0xb30 <drawString>
			
			clock_counter++;
    1a12:	80 91 e7 01 	lds	r24, 0x01E7
    1a16:	90 91 e8 01 	lds	r25, 0x01E8
    1a1a:	01 96       	adiw	r24, 0x01	; 1
    1a1c:	90 93 e8 01 	sts	0x01E8, r25
    1a20:	80 93 e7 01 	sts	0x01E7, r24
			
			sprintf(convert_buffer, "%d", clock_counter);
    1a24:	9f 93       	push	r25
    1a26:	8f 93       	push	r24
    1a28:	ff 92       	push	r15
    1a2a:	ef 92       	push	r14
    1a2c:	df 93       	push	r29
    1a2e:	cf 93       	push	r28
    1a30:	0e 94 48 14 	call	0x2890	; 0x2890 <sprintf>
			drawString(1, 1, convert_buffer, 0xff, 1);
    1a34:	2f ef       	ldi	r18, 0xFF	; 255
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	ae 01       	movw	r20, r28
    1a3a:	61 e0       	ldi	r22, 0x01	; 1
    1a3c:	81 e0       	ldi	r24, 0x01	; 1
    1a3e:	0e 94 98 05 	call	0xb30	; 0xb30 <drawString>
			break;
    1a42:	8d b7       	in	r24, 0x3d	; 61
    1a44:	9e b7       	in	r25, 0x3e	; 62
    1a46:	0c 96       	adiw	r24, 0x0c	; 12
    1a48:	0f b6       	in	r0, 0x3f	; 63
    1a4a:	f8 94       	cli
    1a4c:	9e bf       	out	0x3e, r25	; 62
    1a4e:	0f be       	out	0x3f, r0	; 63
    1a50:	8d bf       	out	0x3d, r24	; 61
			
	}
}
    1a52:	df 91       	pop	r29
    1a54:	cf 91       	pop	r28
    1a56:	0f 91       	pop	r16
    1a58:	ff 90       	pop	r15
    1a5a:	ef 90       	pop	r14
    1a5c:	08 95       	ret

00001a5e <getButton>:

void getButton(){
    1a5e:	0f 93       	push	r16
	button1 = (~PINC & 0x0f);
    1a60:	96 b1       	in	r25, 0x06	; 6
    1a62:	90 95       	com	r25
    1a64:	89 2f       	mov	r24, r25
    1a66:	8f 70       	andi	r24, 0x0F	; 15
    1a68:	80 93 d3 01 	sts	0x01D3, r24
	button1_temp = (~PIND & 0x1c);
    1a6c:	39 b1       	in	r19, 0x09	; 9
    1a6e:	30 95       	com	r19
    1a70:	23 2f       	mov	r18, r19
    1a72:	2c 71       	andi	r18, 0x1C	; 28
    1a74:	20 93 d2 01 	sts	0x01D2, r18
	
	if(button1){
    1a78:	88 23       	and	r24, r24
    1a7a:	a9 f1       	breq	.+106    	; 0x1ae6 <getButton+0x88>
		if(button1 & 0x01){
    1a7c:	90 ff       	sbrs	r25, 0
    1a7e:	0c c0       	rjmp	.+24     	; 0x1a98 <getButton+0x3a>
			button1 = 3;
    1a80:	83 e0       	ldi	r24, 0x03	; 3
    1a82:	80 93 d3 01 	sts	0x01D3, r24
			if(lastDir1!= up1)
    1a86:	80 91 e5 01 	lds	r24, 0x01E5
    1a8a:	82 30       	cpi	r24, 0x02	; 2
    1a8c:	09 f4       	brne	.+2      	; 0x1a90 <getButton+0x32>
    1a8e:	41 c0       	rjmp	.+130    	; 0x1b12 <getButton+0xb4>
			lastDir1 = down1;
    1a90:	83 e0       	ldi	r24, 0x03	; 3
    1a92:	80 93 e5 01 	sts	0x01E5, r24
    1a96:	3d c0       	rjmp	.+122    	; 0x1b12 <getButton+0xb4>
			
		}
		else if(button1 & 0x02){
    1a98:	91 ff       	sbrs	r25, 1
    1a9a:	0b c0       	rjmp	.+22     	; 0x1ab2 <getButton+0x54>
			button1 = 2;
    1a9c:	82 e0       	ldi	r24, 0x02	; 2
    1a9e:	80 93 d3 01 	sts	0x01D3, r24
			if(lastDir1 != left1)
    1aa2:	80 91 e5 01 	lds	r24, 0x01E5
    1aa6:	84 30       	cpi	r24, 0x04	; 4
    1aa8:	a1 f1       	breq	.+104    	; 0x1b12 <getButton+0xb4>
			lastDir1 = right1;
    1aaa:	81 e0       	ldi	r24, 0x01	; 1
    1aac:	80 93 e5 01 	sts	0x01E5, r24
    1ab0:	30 c0       	rjmp	.+96     	; 0x1b12 <getButton+0xb4>
			
		}
		else if(button1 & 0x04){
    1ab2:	92 ff       	sbrs	r25, 2
    1ab4:	0b c0       	rjmp	.+22     	; 0x1acc <getButton+0x6e>
			 button1 = 4;
    1ab6:	84 e0       	ldi	r24, 0x04	; 4
    1ab8:	80 93 d3 01 	sts	0x01D3, r24
			 if(lastDir1 != right1)
    1abc:	80 91 e5 01 	lds	r24, 0x01E5
    1ac0:	81 30       	cpi	r24, 0x01	; 1
    1ac2:	39 f1       	breq	.+78     	; 0x1b12 <getButton+0xb4>
			 lastDir1 = left1;
    1ac4:	84 e0       	ldi	r24, 0x04	; 4
    1ac6:	80 93 e5 01 	sts	0x01E5, r24
    1aca:	23 c0       	rjmp	.+70     	; 0x1b12 <getButton+0xb4>
		}
		else if(button1 & 0x08){
    1acc:	93 ff       	sbrs	r25, 3
    1ace:	21 c0       	rjmp	.+66     	; 0x1b12 <getButton+0xb4>
			button1 = 1;
    1ad0:	81 e0       	ldi	r24, 0x01	; 1
    1ad2:	80 93 d3 01 	sts	0x01D3, r24
			if(lastDir1 != down1)
    1ad6:	80 91 e5 01 	lds	r24, 0x01E5
    1ada:	83 30       	cpi	r24, 0x03	; 3
    1adc:	d1 f0       	breq	.+52     	; 0x1b12 <getButton+0xb4>
			lastDir1 = up1;
    1ade:	82 e0       	ldi	r24, 0x02	; 2
    1ae0:	80 93 e5 01 	sts	0x01E5, r24
    1ae4:	16 c0       	rjmp	.+44     	; 0x1b12 <getButton+0xb4>
		}
	}
	
	else if(button1_temp){
    1ae6:	22 23       	and	r18, r18
    1ae8:	91 f0       	breq	.+36     	; 0x1b0e <getButton+0xb0>
		if(button1_temp & 0x4){
    1aea:	32 ff       	sbrs	r19, 2
    1aec:	04 c0       	rjmp	.+8      	; 0x1af6 <getButton+0x98>
			button1 = 5;
    1aee:	85 e0       	ldi	r24, 0x05	; 5
    1af0:	80 93 d3 01 	sts	0x01D3, r24
    1af4:	0e c0       	rjmp	.+28     	; 0x1b12 <getButton+0xb4>
		}
		else if(button1_temp & 0x08){
    1af6:	33 ff       	sbrs	r19, 3
    1af8:	04 c0       	rjmp	.+8      	; 0x1b02 <getButton+0xa4>
			button1 = 6;
    1afa:	86 e0       	ldi	r24, 0x06	; 6
    1afc:	80 93 d3 01 	sts	0x01D3, r24
    1b00:	08 c0       	rjmp	.+16     	; 0x1b12 <getButton+0xb4>
		}
		else if(button1_temp & 0x10){
    1b02:	34 ff       	sbrs	r19, 4
    1b04:	06 c0       	rjmp	.+12     	; 0x1b12 <getButton+0xb4>
			button1 = 7;
    1b06:	87 e0       	ldi	r24, 0x07	; 7
    1b08:	80 93 d3 01 	sts	0x01D3, r24
    1b0c:	02 c0       	rjmp	.+4      	; 0x1b12 <getButton+0xb4>
		}
	}
	else button1 = 0x0;
    1b0e:	10 92 d3 01 	sts	0x01D3, r1
	
	drawChar(120, 1, prev_button1+ '0', 0, 1);
    1b12:	40 91 cd 01 	lds	r20, 0x01CD
    1b16:	40 5d       	subi	r20, 0xD0	; 208
    1b18:	01 e0       	ldi	r16, 0x01	; 1
    1b1a:	20 e0       	ldi	r18, 0x00	; 0
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	61 e0       	ldi	r22, 0x01	; 1
    1b20:	88 e7       	ldi	r24, 0x78	; 120
    1b22:	0e 94 02 05 	call	0xa04	; 0xa04 <drawChar>
	drawChar(120, 1, button1 + '0', 0xff, 1);
    1b26:	40 91 d3 01 	lds	r20, 0x01D3
    1b2a:	40 5d       	subi	r20, 0xD0	; 208
    1b2c:	2f ef       	ldi	r18, 0xFF	; 255
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	61 e0       	ldi	r22, 0x01	; 1
    1b32:	88 e7       	ldi	r24, 0x78	; 120
    1b34:	0e 94 02 05 	call	0xa04	; 0xa04 <drawChar>
	prev_button1 = button1;
    1b38:	80 91 d3 01 	lds	r24, 0x01D3
    1b3c:	80 93 cd 01 	sts	0x01CD, r24
}
    1b40:	0f 91       	pop	r16
    1b42:	08 95       	ret

00001b44 <Game_sm>:
//uint8_t is_multiplayer = 0;

uint8_t speed[] = {50, 40, 20, 5};
uint8_t speed_choice = 0;

void Game_sm(){
    1b44:	ef 92       	push	r14
    1b46:	ff 92       	push	r15
    1b48:	0f 93       	push	r16
    1b4a:	1f 93       	push	r17
    1b4c:	cf 93       	push	r28
    1b4e:	df 93       	push	r29
	switch(game_state){
    1b50:	80 91 12 05 	lds	r24, 0x0512
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	88 30       	cpi	r24, 0x08	; 8
    1b58:	91 05       	cpc	r25, r1
    1b5a:	08 f0       	brcs	.+2      	; 0x1b5e <Game_sm+0x1a>
    1b5c:	50 c5       	rjmp	.+2720   	; 0x25fe <Game_sm+0xaba>
    1b5e:	fc 01       	movw	r30, r24
    1b60:	ec 5c       	subi	r30, 0xCC	; 204
    1b62:	ff 4f       	sbci	r31, 0xFF	; 255
    1b64:	0c 94 e4 13 	jmp	0x27c8	; 0x27c8 <__tablejump2__>
		case wait:
			//init_Snake(50);
			//draw_Snake();
			
			//direction = right;
			fillScreen(0);
    1b68:	80 e0       	ldi	r24, 0x00	; 0
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	0e 94 53 04 	call	0x8a6	; 0x8a6 <fillScreen>
			if(game_over){
    1b70:	80 91 de 01 	lds	r24, 0x01DE
    1b74:	88 23       	and	r24, r24
    1b76:	09 f4       	brne	.+2      	; 0x1b7a <Game_sm+0x36>
    1b78:	5b c0       	rjmp	.+182    	; 0x1c30 <Game_sm+0xec>
				drawString(5, 10, "GAME OVER", COLOR_RED, 2);
    1b7a:	02 e0       	ldi	r16, 0x02	; 2
    1b7c:	20 e0       	ldi	r18, 0x00	; 0
    1b7e:	38 ef       	ldi	r19, 0xF8	; 248
    1b80:	48 e1       	ldi	r20, 0x18	; 24
    1b82:	51 e0       	ldi	r21, 0x01	; 1
    1b84:	6a e0       	ldi	r22, 0x0A	; 10
    1b86:	85 e0       	ldi	r24, 0x05	; 5
    1b88:	0e 94 98 05 	call	0xb30	; 0xb30 <drawString>
				drawString(10, 30, "Player 1 score: ", 0xFF, 1);
    1b8c:	01 e0       	ldi	r16, 0x01	; 1
    1b8e:	2f ef       	ldi	r18, 0xFF	; 255
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	42 e2       	ldi	r20, 0x22	; 34
    1b94:	51 e0       	ldi	r21, 0x01	; 1
    1b96:	6e e1       	ldi	r22, 0x1E	; 30
    1b98:	8a e0       	ldi	r24, 0x0A	; 10
    1b9a:	0e 94 98 05 	call	0xb30	; 0xb30 <drawString>
				sprintf(convert_buffer, "%d", snake_score_1);
    1b9e:	80 91 dd 01 	lds	r24, 0x01DD
    1ba2:	1f 92       	push	r1
    1ba4:	8f 93       	push	r24
    1ba6:	85 e1       	ldi	r24, 0x15	; 21
    1ba8:	91 e0       	ldi	r25, 0x01	; 1
    1baa:	9f 93       	push	r25
    1bac:	8f 93       	push	r24
    1bae:	89 e4       	ldi	r24, 0x49	; 73
    1bb0:	98 e0       	ldi	r25, 0x08	; 8
    1bb2:	9f 93       	push	r25
    1bb4:	8f 93       	push	r24
    1bb6:	0e 94 48 14 	call	0x2890	; 0x2890 <sprintf>
				drawString(100, 30, convert_buffer, 0xff, 1);
    1bba:	2f ef       	ldi	r18, 0xFF	; 255
    1bbc:	30 e0       	ldi	r19, 0x00	; 0
    1bbe:	49 e4       	ldi	r20, 0x49	; 73
    1bc0:	58 e0       	ldi	r21, 0x08	; 8
    1bc2:	6e e1       	ldi	r22, 0x1E	; 30
    1bc4:	84 e6       	ldi	r24, 0x64	; 100
    1bc6:	0e 94 98 05 	call	0xb30	; 0xb30 <drawString>
				if(is_multiplayer){
    1bca:	0f 90       	pop	r0
    1bcc:	0f 90       	pop	r0
    1bce:	0f 90       	pop	r0
    1bd0:	0f 90       	pop	r0
    1bd2:	0f 90       	pop	r0
    1bd4:	0f 90       	pop	r0
    1bd6:	80 91 e6 01 	lds	r24, 0x01E6
    1bda:	88 23       	and	r24, r24
    1bdc:	21 f1       	breq	.+72     	; 0x1c26 <Game_sm+0xe2>
					drawString(10, 50, "Player 2 score: ", 0xFF, 1);
    1bde:	2f ef       	ldi	r18, 0xFF	; 255
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	43 e3       	ldi	r20, 0x33	; 51
    1be4:	51 e0       	ldi	r21, 0x01	; 1
    1be6:	62 e3       	ldi	r22, 0x32	; 50
    1be8:	8a e0       	ldi	r24, 0x0A	; 10
    1bea:	0e 94 98 05 	call	0xb30	; 0xb30 <drawString>
					sprintf(convert_buffer, "%d", snake_score_2);
    1bee:	80 91 dc 01 	lds	r24, 0x01DC
    1bf2:	1f 92       	push	r1
    1bf4:	8f 93       	push	r24
    1bf6:	85 e1       	ldi	r24, 0x15	; 21
    1bf8:	91 e0       	ldi	r25, 0x01	; 1
    1bfa:	9f 93       	push	r25
    1bfc:	8f 93       	push	r24
    1bfe:	89 e4       	ldi	r24, 0x49	; 73
    1c00:	98 e0       	ldi	r25, 0x08	; 8
    1c02:	9f 93       	push	r25
    1c04:	8f 93       	push	r24
    1c06:	0e 94 48 14 	call	0x2890	; 0x2890 <sprintf>
					drawString(100, 50, convert_buffer, 0xff, 1);
    1c0a:	2f ef       	ldi	r18, 0xFF	; 255
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	49 e4       	ldi	r20, 0x49	; 73
    1c10:	58 e0       	ldi	r21, 0x08	; 8
    1c12:	62 e3       	ldi	r22, 0x32	; 50
    1c14:	84 e6       	ldi	r24, 0x64	; 100
    1c16:	0e 94 98 05 	call	0xb30	; 0xb30 <drawString>
    1c1a:	0f 90       	pop	r0
    1c1c:	0f 90       	pop	r0
    1c1e:	0f 90       	pop	r0
    1c20:	0f 90       	pop	r0
    1c22:	0f 90       	pop	r0
    1c24:	0f 90       	pop	r0
				}
				drawCreditScreen = 1;
    1c26:	81 e0       	ldi	r24, 0x01	; 1
    1c28:	80 93 09 01 	sts	0x0109, r24
				drawSelectionScreen = 1;
    1c2c:	80 93 0a 01 	sts	0x010A, r24
			}
			game_state = credit_screen;
    1c30:	83 e0       	ldi	r24, 0x03	; 3
    1c32:	80 93 12 05 	sts	0x0512, r24
			break;
    1c36:	e3 c4       	rjmp	.+2502   	; 0x25fe <Game_sm+0xaba>
	writecommand(ST7735_RAMWR);  // write to RAM
}

  // Pass 8-bit (each) R,G,B, get back 16-bit packed color
  inline uint16_t Color565(uint8_t r, uint8_t g, uint8_t b) {
	  return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | (b >> 3);
    1c38:	80 91 d6 01 	lds	r24, 0x01D6
    1c3c:	88 7f       	andi	r24, 0xF8	; 248
    1c3e:	20 91 d5 01 	lds	r18, 0x01D5
    1c42:	2c 7f       	andi	r18, 0xFC	; 252
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	22 0f       	add	r18, r18
    1c48:	33 1f       	adc	r19, r19
    1c4a:	22 0f       	add	r18, r18
    1c4c:	33 1f       	adc	r19, r19
    1c4e:	22 0f       	add	r18, r18
    1c50:	33 1f       	adc	r19, r19
    1c52:	38 2b       	or	r19, r24
    1c54:	80 91 d4 01 	lds	r24, 0x01D4
    1c58:	86 95       	lsr	r24
    1c5a:	86 95       	lsr	r24
    1c5c:	86 95       	lsr	r24
    1c5e:	28 2b       	or	r18, r24
		
		case credit_screen:
			//uint8_t start = ~PIND;
			drawString(5, height/2-10, "SNAKE GAME", Color565(r, g, b), 2);
    1c60:	60 91 13 01 	lds	r22, 0x0113
    1c64:	66 95       	lsr	r22
    1c66:	6a 50       	subi	r22, 0x0A	; 10
    1c68:	02 e0       	ldi	r16, 0x02	; 2
    1c6a:	44 e4       	ldi	r20, 0x44	; 68
    1c6c:	51 e0       	ldi	r21, 0x01	; 1
    1c6e:	85 e0       	ldi	r24, 0x05	; 5
    1c70:	0e 94 98 05 	call	0xb30	; 0xb30 <drawString>
			if(drawCreditScreen){
    1c74:	80 91 09 01 	lds	r24, 0x0109
    1c78:	88 23       	and	r24, r24
    1c7a:	09 f4       	brne	.+2      	; 0x1c7e <Game_sm+0x13a>
    1c7c:	48 c0       	rjmp	.+144    	; 0x1d0e <Game_sm+0x1ca>
				drawString(5, height/2-10, "SNAKE GAME", COLOR_GREEN, 2);
    1c7e:	60 91 13 01 	lds	r22, 0x0113
    1c82:	66 95       	lsr	r22
    1c84:	6a 50       	subi	r22, 0x0A	; 10
    1c86:	20 ee       	ldi	r18, 0xE0	; 224
    1c88:	37 e0       	ldi	r19, 0x07	; 7
    1c8a:	44 e4       	ldi	r20, 0x44	; 68
    1c8c:	51 e0       	ldi	r21, 0x01	; 1
    1c8e:	85 e0       	ldi	r24, 0x05	; 5
    1c90:	0e 94 98 05 	call	0xb30	; 0xb30 <drawString>
				drawString(10, height/2+8, "By: Brian Ho", COLOR_CYAN, 1);
    1c94:	60 91 13 01 	lds	r22, 0x0113
    1c98:	66 95       	lsr	r22
    1c9a:	68 5f       	subi	r22, 0xF8	; 248
    1c9c:	01 e0       	ldi	r16, 0x01	; 1
    1c9e:	2f ef       	ldi	r18, 0xFF	; 255
    1ca0:	37 e0       	ldi	r19, 0x07	; 7
    1ca2:	4f e4       	ldi	r20, 0x4F	; 79
    1ca4:	51 e0       	ldi	r21, 0x01	; 1
    1ca6:	8a e0       	ldi	r24, 0x0A	; 10
    1ca8:	0e 94 98 05 	call	0xb30	; 0xb30 <drawString>
				drawString(5, height/2+20, "EE120B Custom Lab", COLOR_WHITE, 1);
    1cac:	60 91 13 01 	lds	r22, 0x0113
    1cb0:	66 95       	lsr	r22
    1cb2:	6c 5e       	subi	r22, 0xEC	; 236
    1cb4:	2f ef       	ldi	r18, 0xFF	; 255
    1cb6:	3f ef       	ldi	r19, 0xFF	; 255
    1cb8:	4c e5       	ldi	r20, 0x5C	; 92
    1cba:	51 e0       	ldi	r21, 0x01	; 1
    1cbc:	85 e0       	ldi	r24, 0x05	; 5
    1cbe:	0e 94 98 05 	call	0xb30	; 0xb30 <drawString>
				drawString(5, height/2+32, "Project", COLOR_WHITE, 1);
    1cc2:	60 91 13 01 	lds	r22, 0x0113
    1cc6:	66 95       	lsr	r22
    1cc8:	60 5e       	subi	r22, 0xE0	; 224
    1cca:	2f ef       	ldi	r18, 0xFF	; 255
    1ccc:	3f ef       	ldi	r19, 0xFF	; 255
    1cce:	4e e6       	ldi	r20, 0x6E	; 110
    1cd0:	51 e0       	ldi	r21, 0x01	; 1
    1cd2:	85 e0       	ldi	r24, 0x05	; 5
    1cd4:	0e 94 98 05 	call	0xb30	; 0xb30 <drawString>
				
				drawString(5, height/2 + 8*8-2, "Press any button to ", COLOR_BLUE, 1);
    1cd8:	60 91 13 01 	lds	r22, 0x0113
    1cdc:	66 95       	lsr	r22
    1cde:	62 5c       	subi	r22, 0xC2	; 194
    1ce0:	2f e1       	ldi	r18, 0x1F	; 31
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	46 e7       	ldi	r20, 0x76	; 118
    1ce6:	51 e0       	ldi	r21, 0x01	; 1
    1ce8:	85 e0       	ldi	r24, 0x05	; 5
    1cea:	0e 94 98 05 	call	0xb30	; 0xb30 <drawString>
				drawString(width/2-25, height/2 + 8*9-2, "continue ", COLOR_BLUE, 1);
    1cee:	60 91 13 01 	lds	r22, 0x0113
    1cf2:	66 95       	lsr	r22
    1cf4:	6a 5b       	subi	r22, 0xBA	; 186
    1cf6:	80 91 14 01 	lds	r24, 0x0114
    1cfa:	86 95       	lsr	r24
    1cfc:	2f e1       	ldi	r18, 0x1F	; 31
    1cfe:	30 e0       	ldi	r19, 0x00	; 0
    1d00:	4b e8       	ldi	r20, 0x8B	; 139
    1d02:	51 e0       	ldi	r21, 0x01	; 1
    1d04:	89 51       	subi	r24, 0x19	; 25
    1d06:	0e 94 98 05 	call	0xb30	; 0xb30 <drawString>
				
				drawCreditScreen = 0;
    1d0a:	10 92 09 01 	sts	0x0109, r1
			}
			if((~PIND & 0x0c) || (~PINC & 0x0f) || usart_temp){
    1d0e:	89 b1       	in	r24, 0x09	; 9
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	80 95       	com	r24
    1d14:	90 95       	com	r25
    1d16:	8c 70       	andi	r24, 0x0C	; 12
    1d18:	99 27       	eor	r25, r25
    1d1a:	89 2b       	or	r24, r25
    1d1c:	61 f4       	brne	.+24     	; 0x1d36 <Game_sm+0x1f2>
    1d1e:	86 b1       	in	r24, 0x06	; 6
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	80 95       	com	r24
    1d24:	90 95       	com	r25
    1d26:	8f 70       	andi	r24, 0x0F	; 15
    1d28:	99 27       	eor	r25, r25
    1d2a:	89 2b       	or	r24, r25
    1d2c:	21 f4       	brne	.+8      	; 0x1d36 <Game_sm+0x1f2>
    1d2e:	80 91 cc 01 	lds	r24, 0x01CC
    1d32:	88 23       	and	r24, r24
    1d34:	51 f0       	breq	.+20     	; 0x1d4a <Game_sm+0x206>
				game_state = selection_screen;
    1d36:	c1 e0       	ldi	r28, 0x01	; 1
    1d38:	c0 93 12 05 	sts	0x0512, r28
				fillScreen(0);
    1d3c:	80 e0       	ldi	r24, 0x00	; 0
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	0e 94 53 04 	call	0x8a6	; 0x8a6 <fillScreen>
				drawCreditScreen = 1;
    1d44:	c0 93 09 01 	sts	0x0109, r28
    1d48:	5a c4       	rjmp	.+2228   	; 0x25fe <Game_sm+0xaba>
			}
			else
			game_state = credit_screen;
    1d4a:	83 e0       	ldi	r24, 0x03	; 3
    1d4c:	80 93 12 05 	sts	0x0512, r24
    1d50:	56 c4       	rjmp	.+2220   	; 0x25fe <Game_sm+0xaba>
			break;
			
		case selection_screen:
			if(setPeriod){
    1d52:	80 91 0b 01 	lds	r24, 0x010B
    1d56:	88 23       	and	r24, r24
    1d58:	d1 f0       	breq	.+52     	; 0x1d8e <Game_sm+0x24a>
unsigned long _avr_timer_M = 1; // Start count from here, down to 0. Default 1ms
unsigned long _avr_timer_cntcurr = 0; // Current internal count of 1ms ticks

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
    1d5a:	82 e3       	ldi	r24, 0x32	; 50
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	a0 e0       	ldi	r26, 0x00	; 0
    1d60:	b0 e0       	ldi	r27, 0x00	; 0
    1d62:	80 93 0e 01 	sts	0x010E, r24
    1d66:	90 93 0f 01 	sts	0x010F, r25
    1d6a:	a0 93 10 01 	sts	0x0110, r26
    1d6e:	b0 93 11 01 	sts	0x0111, r27
	_avr_timer_cntcurr = _avr_timer_M;
    1d72:	80 93 d7 01 	sts	0x01D7, r24
    1d76:	90 93 d8 01 	sts	0x01D8, r25
    1d7a:	a0 93 d9 01 	sts	0x01D9, r26
    1d7e:	b0 93 da 01 	sts	0x01DA, r27
				TimerSet(50);
				periodMultiplier = 50;
    1d82:	90 93 0d 01 	sts	0x010D, r25
    1d86:	80 93 0c 01 	sts	0x010C, r24
				setPeriod = 0;
    1d8a:	10 92 0b 01 	sts	0x010B, r1
    1d8e:	80 91 d6 01 	lds	r24, 0x01D6
    1d92:	88 7f       	andi	r24, 0xF8	; 248
    1d94:	20 91 d5 01 	lds	r18, 0x01D5
    1d98:	2c 7f       	andi	r18, 0xFC	; 252
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	22 0f       	add	r18, r18
    1d9e:	33 1f       	adc	r19, r19
    1da0:	22 0f       	add	r18, r18
    1da2:	33 1f       	adc	r19, r19
    1da4:	22 0f       	add	r18, r18
    1da6:	33 1f       	adc	r19, r19
    1da8:	38 2b       	or	r19, r24
    1daa:	80 91 d4 01 	lds	r24, 0x01D4
    1dae:	86 95       	lsr	r24
    1db0:	86 95       	lsr	r24
    1db2:	86 95       	lsr	r24
    1db4:	28 2b       	or	r18, r24
			}
			//button1 = ~PINC & 0x0f;
			
			drawString(5, 12, "SNAKE GAME", Color565(r, g, b), 2);
    1db6:	02 e0       	ldi	r16, 0x02	; 2
    1db8:	44 e4       	ldi	r20, 0x44	; 68
    1dba:	51 e0       	ldi	r21, 0x01	; 1
    1dbc:	6c e0       	ldi	r22, 0x0C	; 12
    1dbe:	85 e0       	ldi	r24, 0x05	; 5
    1dc0:	0e 94 98 05 	call	0xb30	; 0xb30 <drawString>
			
			if((button1 == 2) || (button1 == 4) && (! drawSelectionScreen)){// || usart_temp == 2 || usart_temp == 4){ 
    1dc4:	80 91 d3 01 	lds	r24, 0x01D3
    1dc8:	82 30       	cpi	r24, 0x02	; 2
    1dca:	09 f4       	brne	.+2      	; 0x1dce <Game_sm+0x28a>
    1dcc:	10 c4       	rjmp	.+2080   	; 0x25ee <Game_sm+0xaaa>
    1dce:	84 30       	cpi	r24, 0x04	; 4
    1dd0:	09 f0       	breq	.+2      	; 0x1dd4 <Game_sm+0x290>
    1dd2:	66 c0       	rjmp	.+204    	; 0x1ea0 <Game_sm+0x35c>
    1dd4:	80 91 0a 01 	lds	r24, 0x010A
    1dd8:	81 11       	cpse	r24, r1
    1dda:	39 c1       	rjmp	.+626    	; 0x204e <Game_sm+0x50a>
				game_mode++;
    1ddc:	80 91 08 01 	lds	r24, 0x0108
    1de0:	8f 5f       	subi	r24, 0xFF	; 255
    1de2:	80 93 08 01 	sts	0x0108, r24
				if(game_mode % 2 != 0){
    1de6:	80 ff       	sbrs	r24, 0
    1de8:	2e c0       	rjmp	.+92     	; 0x1e46 <Game_sm+0x302>
					drawString(25, height/2, "single player", 0, 1);
    1dea:	60 91 13 01 	lds	r22, 0x0113
    1dee:	66 95       	lsr	r22
    1df0:	01 e0       	ldi	r16, 0x01	; 1
    1df2:	20 e0       	ldi	r18, 0x00	; 0
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	45 e9       	ldi	r20, 0x95	; 149
    1df8:	51 e0       	ldi	r21, 0x01	; 1
    1dfa:	89 e1       	ldi	r24, 0x19	; 25
    1dfc:	0e 94 98 05 	call	0xb30	; 0xb30 <drawString>
    1e00:	80 91 d6 01 	lds	r24, 0x01D6
    1e04:	88 7f       	andi	r24, 0xF8	; 248
    1e06:	20 91 d5 01 	lds	r18, 0x01D5
    1e0a:	2c 7f       	andi	r18, 0xFC	; 252
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	22 0f       	add	r18, r18
    1e10:	33 1f       	adc	r19, r19
    1e12:	22 0f       	add	r18, r18
    1e14:	33 1f       	adc	r19, r19
    1e16:	22 0f       	add	r18, r18
    1e18:	33 1f       	adc	r19, r19
    1e1a:	38 2b       	or	r19, r24
    1e1c:	80 91 d4 01 	lds	r24, 0x01D4
    1e20:	86 95       	lsr	r24
    1e22:	86 95       	lsr	r24
    1e24:	86 95       	lsr	r24
    1e26:	28 2b       	or	r18, r24
					drawString(25, height/2, "multiplayer", Color565(r, g, b), 1);
    1e28:	60 91 13 01 	lds	r22, 0x0113
    1e2c:	66 95       	lsr	r22
    1e2e:	43 ea       	ldi	r20, 0xA3	; 163
    1e30:	51 e0       	ldi	r21, 0x01	; 1
    1e32:	89 e1       	ldi	r24, 0x19	; 25
    1e34:	0e 94 98 05 	call	0xb30	; 0xb30 <drawString>
					is_multiplayer = 1;
    1e38:	81 e0       	ldi	r24, 0x01	; 1
    1e3a:	80 93 e6 01 	sts	0x01E6, r24
					game_state = selection_button_wait;
    1e3e:	82 e0       	ldi	r24, 0x02	; 2
    1e40:	80 93 12 05 	sts	0x0512, r24
					return;
    1e44:	dc c3       	rjmp	.+1976   	; 0x25fe <Game_sm+0xaba>
				}
				
				else if(game_mode % 2 == 0){
					drawString(25, height/2, "multiplayer", 0, 1);
    1e46:	60 91 13 01 	lds	r22, 0x0113
    1e4a:	66 95       	lsr	r22
    1e4c:	01 e0       	ldi	r16, 0x01	; 1
    1e4e:	20 e0       	ldi	r18, 0x00	; 0
    1e50:	30 e0       	ldi	r19, 0x00	; 0
    1e52:	43 ea       	ldi	r20, 0xA3	; 163
    1e54:	51 e0       	ldi	r21, 0x01	; 1
    1e56:	89 e1       	ldi	r24, 0x19	; 25
    1e58:	0e 94 98 05 	call	0xb30	; 0xb30 <drawString>
    1e5c:	80 91 d6 01 	lds	r24, 0x01D6
    1e60:	88 7f       	andi	r24, 0xF8	; 248
    1e62:	20 91 d5 01 	lds	r18, 0x01D5
    1e66:	2c 7f       	andi	r18, 0xFC	; 252
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	22 0f       	add	r18, r18
    1e6c:	33 1f       	adc	r19, r19
    1e6e:	22 0f       	add	r18, r18
    1e70:	33 1f       	adc	r19, r19
    1e72:	22 0f       	add	r18, r18
    1e74:	33 1f       	adc	r19, r19
    1e76:	38 2b       	or	r19, r24
    1e78:	80 91 d4 01 	lds	r24, 0x01D4
    1e7c:	86 95       	lsr	r24
    1e7e:	86 95       	lsr	r24
    1e80:	86 95       	lsr	r24
    1e82:	28 2b       	or	r18, r24
					drawString(25, height/2, "single player", Color565(r, g, b), 1);
    1e84:	60 91 13 01 	lds	r22, 0x0113
    1e88:	66 95       	lsr	r22
    1e8a:	45 e9       	ldi	r20, 0x95	; 149
    1e8c:	51 e0       	ldi	r21, 0x01	; 1
    1e8e:	89 e1       	ldi	r24, 0x19	; 25
    1e90:	0e 94 98 05 	call	0xb30	; 0xb30 <drawString>
					is_multiplayer = 0;
    1e94:	10 92 e6 01 	sts	0x01E6, r1
					game_state = selection_button_wait;
    1e98:	82 e0       	ldi	r24, 0x02	; 2
    1e9a:	80 93 12 05 	sts	0x0512, r24
					return;
    1e9e:	af c3       	rjmp	.+1886   	; 0x25fe <Game_sm+0xaba>
				}
			}
			
			if((button1 == 1) || (button1 == 3) && !drawSelectionScreen){
    1ea0:	81 30       	cpi	r24, 0x01	; 1
    1ea2:	41 f0       	breq	.+16     	; 0x1eb4 <Game_sm+0x370>
    1ea4:	83 30       	cpi	r24, 0x03	; 3
    1ea6:	09 f0       	breq	.+2      	; 0x1eaa <Game_sm+0x366>
    1ea8:	ce c0       	rjmp	.+412    	; 0x2046 <Game_sm+0x502>
    1eaa:	80 91 0a 01 	lds	r24, 0x010A
    1eae:	88 23       	and	r24, r24
    1eb0:	39 f0       	breq	.+14     	; 0x1ec0 <Game_sm+0x37c>
    1eb2:	cd c0       	rjmp	.+410    	; 0x204e <Game_sm+0x50a>
				if(button1 == 1)
				speed_choice++;
    1eb4:	80 91 cb 01 	lds	r24, 0x01CB
    1eb8:	8f 5f       	subi	r24, 0xFF	; 255
    1eba:	80 93 cb 01 	sts	0x01CB, r24
    1ebe:	05 c0       	rjmp	.+10     	; 0x1eca <Game_sm+0x386>
				if(button1 == 3)
				speed_choice--;
    1ec0:	80 91 cb 01 	lds	r24, 0x01CB
    1ec4:	81 50       	subi	r24, 0x01	; 1
    1ec6:	80 93 cb 01 	sts	0x01CB, r24
				
				if(speed_choice>4)
    1eca:	80 91 cb 01 	lds	r24, 0x01CB
    1ece:	85 30       	cpi	r24, 0x05	; 5
    1ed0:	18 f0       	brcs	.+6      	; 0x1ed8 <Game_sm+0x394>
					speed_choice = 0;
    1ed2:	10 92 cb 01 	sts	0x01CB, r1
    1ed6:	02 c0       	rjmp	.+4      	; 0x1edc <Game_sm+0x398>
					
				if(speed_choice == 0){
    1ed8:	81 11       	cpse	r24, r1
    1eda:	1f c0       	rjmp	.+62     	; 0x1f1a <Game_sm+0x3d6>
					//drawString(65, height/2+15, "insane", 0, 1);
					fillRect(65, height/2+15, 50, 20, 0);
    1edc:	60 91 13 01 	lds	r22, 0x0113
    1ee0:	66 95       	lsr	r22
    1ee2:	70 e0       	ldi	r23, 0x00	; 0
    1ee4:	61 5f       	subi	r22, 0xF1	; 241
    1ee6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ee8:	00 e0       	ldi	r16, 0x00	; 0
    1eea:	10 e0       	ldi	r17, 0x00	; 0
    1eec:	24 e1       	ldi	r18, 0x14	; 20
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	42 e3       	ldi	r20, 0x32	; 50
    1ef2:	50 e0       	ldi	r21, 0x00	; 0
    1ef4:	81 e4       	ldi	r24, 0x41	; 65
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	0e 94 ab 04 	call	0x956	; 0x956 <fillRect>
					drawString(65, height/2+15, "normal", COLOR_WHITE, 1);
    1efc:	60 91 13 01 	lds	r22, 0x0113
    1f00:	66 95       	lsr	r22
    1f02:	61 5f       	subi	r22, 0xF1	; 241
    1f04:	01 e0       	ldi	r16, 0x01	; 1
    1f06:	2f ef       	ldi	r18, 0xFF	; 255
    1f08:	3f ef       	ldi	r19, 0xFF	; 255
    1f0a:	4f ea       	ldi	r20, 0xAF	; 175
    1f0c:	51 e0       	ldi	r21, 0x01	; 1
    1f0e:	81 e4       	ldi	r24, 0x41	; 65
    1f10:	0e 94 98 05 	call	0xb30	; 0xb30 <drawString>
					game_state = selection_button_wait;
    1f14:	82 e0       	ldi	r24, 0x02	; 2
    1f16:	80 93 12 05 	sts	0x0512, r24
				}
				
				if(speed_choice == 1){	
    1f1a:	80 91 cb 01 	lds	r24, 0x01CB
    1f1e:	81 30       	cpi	r24, 0x01	; 1
    1f20:	f9 f4       	brne	.+62     	; 0x1f60 <Game_sm+0x41c>
					fillRect(65, height/2+15, 50, 20, 0);
    1f22:	60 91 13 01 	lds	r22, 0x0113
    1f26:	66 95       	lsr	r22
    1f28:	70 e0       	ldi	r23, 0x00	; 0
    1f2a:	61 5f       	subi	r22, 0xF1	; 241
    1f2c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f2e:	00 e0       	ldi	r16, 0x00	; 0
    1f30:	10 e0       	ldi	r17, 0x00	; 0
    1f32:	24 e1       	ldi	r18, 0x14	; 20
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	42 e3       	ldi	r20, 0x32	; 50
    1f38:	50 e0       	ldi	r21, 0x00	; 0
    1f3a:	81 e4       	ldi	r24, 0x41	; 65
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	0e 94 ab 04 	call	0x956	; 0x956 <fillRect>
					drawString(65, height/2+15, "medium", COLOR_CYAN, 1);
    1f42:	60 91 13 01 	lds	r22, 0x0113
    1f46:	66 95       	lsr	r22
    1f48:	61 5f       	subi	r22, 0xF1	; 241
    1f4a:	01 e0       	ldi	r16, 0x01	; 1
    1f4c:	2f ef       	ldi	r18, 0xFF	; 255
    1f4e:	37 e0       	ldi	r19, 0x07	; 7
    1f50:	46 eb       	ldi	r20, 0xB6	; 182
    1f52:	51 e0       	ldi	r21, 0x01	; 1
    1f54:	81 e4       	ldi	r24, 0x41	; 65
    1f56:	0e 94 98 05 	call	0xb30	; 0xb30 <drawString>
					game_state = selection_button_wait;
    1f5a:	82 e0       	ldi	r24, 0x02	; 2
    1f5c:	80 93 12 05 	sts	0x0512, r24
				}
				
				if(speed_choice == 2){
    1f60:	80 91 cb 01 	lds	r24, 0x01CB
    1f64:	82 30       	cpi	r24, 0x02	; 2
    1f66:	f9 f4       	brne	.+62     	; 0x1fa6 <Game_sm+0x462>
					fillRect(65, height/2+15, 50, 20, 0);
    1f68:	60 91 13 01 	lds	r22, 0x0113
    1f6c:	66 95       	lsr	r22
    1f6e:	70 e0       	ldi	r23, 0x00	; 0
    1f70:	61 5f       	subi	r22, 0xF1	; 241
    1f72:	7f 4f       	sbci	r23, 0xFF	; 255
    1f74:	00 e0       	ldi	r16, 0x00	; 0
    1f76:	10 e0       	ldi	r17, 0x00	; 0
    1f78:	24 e1       	ldi	r18, 0x14	; 20
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	42 e3       	ldi	r20, 0x32	; 50
    1f7e:	50 e0       	ldi	r21, 0x00	; 0
    1f80:	81 e4       	ldi	r24, 0x41	; 65
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	0e 94 ab 04 	call	0x956	; 0x956 <fillRect>
					drawString(65, height/2+15, "fast", COLOR_RED, 1);
    1f88:	60 91 13 01 	lds	r22, 0x0113
    1f8c:	66 95       	lsr	r22
    1f8e:	61 5f       	subi	r22, 0xF1	; 241
    1f90:	01 e0       	ldi	r16, 0x01	; 1
    1f92:	20 e0       	ldi	r18, 0x00	; 0
    1f94:	38 ef       	ldi	r19, 0xF8	; 248
    1f96:	4d eb       	ldi	r20, 0xBD	; 189
    1f98:	51 e0       	ldi	r21, 0x01	; 1
    1f9a:	81 e4       	ldi	r24, 0x41	; 65
    1f9c:	0e 94 98 05 	call	0xb30	; 0xb30 <drawString>
					game_state = selection_button_wait;
    1fa0:	82 e0       	ldi	r24, 0x02	; 2
    1fa2:	80 93 12 05 	sts	0x0512, r24
				}
				
				if(speed_choice == 3){
    1fa6:	80 91 cb 01 	lds	r24, 0x01CB
    1faa:	83 30       	cpi	r24, 0x03	; 3
    1fac:	09 f0       	breq	.+2      	; 0x1fb0 <Game_sm+0x46c>
    1fae:	4b c0       	rjmp	.+150    	; 0x2046 <Game_sm+0x502>
					drawString(65, height/2+15, "fast", 0, 1);
    1fb0:	60 91 13 01 	lds	r22, 0x0113
    1fb4:	66 95       	lsr	r22
    1fb6:	61 5f       	subi	r22, 0xF1	; 241
    1fb8:	01 e0       	ldi	r16, 0x01	; 1
    1fba:	20 e0       	ldi	r18, 0x00	; 0
    1fbc:	30 e0       	ldi	r19, 0x00	; 0
    1fbe:	4d eb       	ldi	r20, 0xBD	; 189
    1fc0:	51 e0       	ldi	r21, 0x01	; 1
    1fc2:	81 e4       	ldi	r24, 0x41	; 65
    1fc4:	0e 94 98 05 	call	0xb30	; 0xb30 <drawString>
					//drawString(65, height/2+15, "insane", COLOR_WHITE, 1);
					drawChar(65+5*0, height/2+15, 'i', COLOR_CYAN, 1);
    1fc8:	60 91 13 01 	lds	r22, 0x0113
    1fcc:	66 95       	lsr	r22
    1fce:	61 5f       	subi	r22, 0xF1	; 241
    1fd0:	2f ef       	ldi	r18, 0xFF	; 255
    1fd2:	37 e0       	ldi	r19, 0x07	; 7
    1fd4:	49 e6       	ldi	r20, 0x69	; 105
    1fd6:	81 e4       	ldi	r24, 0x41	; 65
    1fd8:	0e 94 02 05 	call	0xa04	; 0xa04 <drawChar>
					drawChar(65+5*1+4, height/2+15, 'n', COLOR_GREEN, 1);
    1fdc:	60 91 13 01 	lds	r22, 0x0113
    1fe0:	66 95       	lsr	r22
    1fe2:	61 5f       	subi	r22, 0xF1	; 241
    1fe4:	20 ee       	ldi	r18, 0xE0	; 224
    1fe6:	37 e0       	ldi	r19, 0x07	; 7
    1fe8:	4e e6       	ldi	r20, 0x6E	; 110
    1fea:	8a e4       	ldi	r24, 0x4A	; 74
    1fec:	0e 94 02 05 	call	0xa04	; 0xa04 <drawChar>
					drawChar(65+5*2+2+6, height/2+15, 's', COLOR_MAGENTA, 1);
    1ff0:	60 91 13 01 	lds	r22, 0x0113
    1ff4:	66 95       	lsr	r22
    1ff6:	61 5f       	subi	r22, 0xF1	; 241
    1ff8:	2f e1       	ldi	r18, 0x1F	; 31
    1ffa:	38 ef       	ldi	r19, 0xF8	; 248
    1ffc:	43 e7       	ldi	r20, 0x73	; 115
    1ffe:	83 e5       	ldi	r24, 0x53	; 83
    2000:	0e 94 02 05 	call	0xa04	; 0xa04 <drawChar>
					drawChar(65+5*3+3+8, height/2+15, 'a', COLOR_YELLOW, 1);
    2004:	60 91 13 01 	lds	r22, 0x0113
    2008:	66 95       	lsr	r22
    200a:	61 5f       	subi	r22, 0xF1	; 241
    200c:	20 ee       	ldi	r18, 0xE0	; 224
    200e:	3f ef       	ldi	r19, 0xFF	; 255
    2010:	41 e6       	ldi	r20, 0x61	; 97
    2012:	8b e5       	ldi	r24, 0x5B	; 91
    2014:	0e 94 02 05 	call	0xa04	; 0xa04 <drawChar>
					drawChar(65+5*4+4+10, height/2+15, 'n', COLOR_RED, 1);
    2018:	60 91 13 01 	lds	r22, 0x0113
    201c:	66 95       	lsr	r22
    201e:	61 5f       	subi	r22, 0xF1	; 241
    2020:	20 e0       	ldi	r18, 0x00	; 0
    2022:	38 ef       	ldi	r19, 0xF8	; 248
    2024:	4e e6       	ldi	r20, 0x6E	; 110
    2026:	83 e6       	ldi	r24, 0x63	; 99
    2028:	0e 94 02 05 	call	0xa04	; 0xa04 <drawChar>
					drawChar(65+5*5+5+12, height/2+15, 'e', COLOR_CYAN, 1);
    202c:	60 91 13 01 	lds	r22, 0x0113
    2030:	66 95       	lsr	r22
    2032:	61 5f       	subi	r22, 0xF1	; 241
    2034:	2f ef       	ldi	r18, 0xFF	; 255
    2036:	37 e0       	ldi	r19, 0x07	; 7
    2038:	45 e6       	ldi	r20, 0x65	; 101
    203a:	8b e6       	ldi	r24, 0x6B	; 107
    203c:	0e 94 02 05 	call	0xa04	; 0xa04 <drawChar>
					game_state = selection_button_wait;
    2040:	82 e0       	ldi	r24, 0x02	; 2
    2042:	80 93 12 05 	sts	0x0512, r24
				}
			}
			
			if(drawSelectionScreen){
    2046:	80 91 0a 01 	lds	r24, 0x010A
    204a:	88 23       	and	r24, r24
    204c:	81 f1       	breq	.+96     	; 0x20ae <Game_sm+0x56a>
				drawString(5, 12, "SNAKE GAME", COLOR_GREEN, 2);
    204e:	02 e0       	ldi	r16, 0x02	; 2
    2050:	20 ee       	ldi	r18, 0xE0	; 224
    2052:	37 e0       	ldi	r19, 0x07	; 7
    2054:	44 e4       	ldi	r20, 0x44	; 68
    2056:	51 e0       	ldi	r21, 0x01	; 1
    2058:	6c e0       	ldi	r22, 0x0C	; 12
    205a:	85 e0       	ldi	r24, 0x05	; 5
    205c:	0e 94 98 05 	call	0xb30	; 0xb30 <drawString>
				drawString(25, height/2, "single player", COLOR_MAGENTA, 1);
    2060:	60 91 13 01 	lds	r22, 0x0113
    2064:	66 95       	lsr	r22
    2066:	01 e0       	ldi	r16, 0x01	; 1
    2068:	2f e1       	ldi	r18, 0x1F	; 31
    206a:	38 ef       	ldi	r19, 0xF8	; 248
    206c:	45 e9       	ldi	r20, 0x95	; 149
    206e:	51 e0       	ldi	r21, 0x01	; 1
    2070:	89 e1       	ldi	r24, 0x19	; 25
    2072:	0e 94 98 05 	call	0xb30	; 0xb30 <drawString>
				drawString(25, height/2+15, "speed: ", COLOR_WHITE, 1);
    2076:	60 91 13 01 	lds	r22, 0x0113
    207a:	66 95       	lsr	r22
    207c:	61 5f       	subi	r22, 0xF1	; 241
    207e:	2f ef       	ldi	r18, 0xFF	; 255
    2080:	3f ef       	ldi	r19, 0xFF	; 255
    2082:	42 ec       	ldi	r20, 0xC2	; 194
    2084:	51 e0       	ldi	r21, 0x01	; 1
    2086:	89 e1       	ldi	r24, 0x19	; 25
    2088:	0e 94 98 05 	call	0xb30	; 0xb30 <drawString>
				drawString(65, height/2+15, "normal", COLOR_WHITE, 1);
    208c:	60 91 13 01 	lds	r22, 0x0113
    2090:	66 95       	lsr	r22
    2092:	61 5f       	subi	r22, 0xF1	; 241
    2094:	2f ef       	ldi	r18, 0xFF	; 255
    2096:	3f ef       	ldi	r19, 0xFF	; 255
    2098:	4f ea       	ldi	r20, 0xAF	; 175
    209a:	51 e0       	ldi	r21, 0x01	; 1
    209c:	81 e4       	ldi	r24, 0x41	; 65
    209e:	0e 94 98 05 	call	0xb30	; 0xb30 <drawString>
				is_multiplayer = 0;
    20a2:	10 92 e6 01 	sts	0x01E6, r1
				speed_choice = 0;
    20a6:	10 92 cb 01 	sts	0x01CB, r1
				drawSelectionScreen = 0;
    20aa:	10 92 0a 01 	sts	0x010A, r1
			}
			if(button1 == 5 || usart_temp == 5){
    20ae:	80 91 d3 01 	lds	r24, 0x01D3
    20b2:	85 30       	cpi	r24, 0x05	; 5
    20b4:	29 f0       	breq	.+10     	; 0x20c0 <Game_sm+0x57c>
    20b6:	80 91 cc 01 	lds	r24, 0x01CC
    20ba:	85 30       	cpi	r24, 0x05	; 5
    20bc:	09 f0       	breq	.+2      	; 0x20c0 <Game_sm+0x57c>
    20be:	9f c2       	rjmp	.+1342   	; 0x25fe <Game_sm+0xaba>
				game_state = initialize_game;
    20c0:	84 e0       	ldi	r24, 0x04	; 4
    20c2:	80 93 12 05 	sts	0x0512, r24
				fillScreen(0);
    20c6:	80 e0       	ldi	r24, 0x00	; 0
    20c8:	90 e0       	ldi	r25, 0x00	; 0
    20ca:	0e 94 53 04 	call	0x8a6	; 0x8a6 <fillScreen>
				drawSelectionScreen = 1;
    20ce:	81 e0       	ldi	r24, 0x01	; 1
    20d0:	80 93 0a 01 	sts	0x010A, r24
				setPeriod = 1;
    20d4:	80 93 0b 01 	sts	0x010B, r24
    20d8:	92 c2       	rjmp	.+1316   	; 0x25fe <Game_sm+0xaba>
			}
			break;
		
		case selection_button_wait:
			if(!button1){
    20da:	80 91 d3 01 	lds	r24, 0x01D3
    20de:	81 11       	cpse	r24, r1
    20e0:	8e c2       	rjmp	.+1308   	; 0x25fe <Game_sm+0xaba>
				game_state = selection_screen;
    20e2:	81 e0       	ldi	r24, 0x01	; 1
    20e4:	80 93 12 05 	sts	0x0512, r24
    20e8:	8a c2       	rjmp	.+1300   	; 0x25fe <Game_sm+0xaba>
				TimerSet(20);
				periodMultiplier = 20;
				setPeriod = 0;
			}
			*/
			setTimerPeriod(speed[speed_choice]);
    20ea:	e0 91 cb 01 	lds	r30, 0x01CB
    20ee:	f0 e0       	ldi	r31, 0x00	; 0
    20f0:	ec 5f       	subi	r30, 0xFC	; 252
    20f2:	fe 4f       	sbci	r31, 0xFE	; 254
    20f4:	80 81       	ld	r24, Z
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	0e 94 c1 0c 	call	0x1982	; 0x1982 <setTimerPeriod>
			lastDir1 = lastDir2 = still1;
    20fc:	10 92 e4 01 	sts	0x01E4, r1
    2100:	10 92 e5 01 	sts	0x01E5, r1
			if(is_multiplayer){
    2104:	80 91 e6 01 	lds	r24, 0x01E6
    2108:	88 23       	and	r24, r24
    210a:	09 f4       	brne	.+2      	; 0x210e <Game_sm+0x5ca>
    210c:	4e c0       	rjmp	.+156    	; 0x21aa <Game_sm+0x666>
				init_Snake1(50, height-50);
    210e:	60 91 13 01 	lds	r22, 0x0113
    2112:	62 53       	subi	r22, 0x32	; 50
    2114:	82 e3       	ldi	r24, 0x32	; 50
    2116:	0e 94 cf 05 	call	0xb9e	; 0xb9e <init_Snake1>
				draw_Snake1();
    211a:	0e 94 a1 0b 	call	0x1742	; 0x1742 <draw_Snake1>
				init_Snake2(50, height+50);
    211e:	60 91 13 01 	lds	r22, 0x0113
    2122:	6e 5c       	subi	r22, 0xCE	; 206
    2124:	82 e3       	ldi	r24, 0x32	; 50
    2126:	0e 94 39 06 	call	0xc72	; 0xc72 <init_Snake2>
				draw_Snake2();
    212a:	0e 94 c6 0b 	call	0x178c	; 0x178c <draw_Snake2>
				
				direction1 = right1;
    212e:	81 e0       	ldi	r24, 0x01	; 1
    2130:	80 93 5a 08 	sts	0x085A, r24
				direction2 = right2;
    2134:	80 93 13 05 	sts	0x0513, r24
				
				add_food();
    2138:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <add_food>
				game_state = run_multi;
    213c:	86 e0       	ldi	r24, 0x06	; 6
    213e:	80 93 12 05 	sts	0x0512, r24
				sprintf(convert_buffer, "%d", snake_score_1);
    2142:	80 91 dd 01 	lds	r24, 0x01DD
    2146:	1f 92       	push	r1
    2148:	8f 93       	push	r24
    214a:	0f 2e       	mov	r0, r31
    214c:	f5 e1       	ldi	r31, 0x15	; 21
    214e:	ef 2e       	mov	r14, r31
    2150:	f1 e0       	ldi	r31, 0x01	; 1
    2152:	ff 2e       	mov	r15, r31
    2154:	f0 2d       	mov	r31, r0
    2156:	ff 92       	push	r15
    2158:	ef 92       	push	r14
    215a:	c9 e4       	ldi	r28, 0x49	; 73
    215c:	d8 e0       	ldi	r29, 0x08	; 8
    215e:	df 93       	push	r29
    2160:	cf 93       	push	r28
    2162:	0e 94 48 14 	call	0x2890	; 0x2890 <sprintf>
				drawString(1, 150, convert_buffer, 0xff, 1);
    2166:	01 e0       	ldi	r16, 0x01	; 1
    2168:	2f ef       	ldi	r18, 0xFF	; 255
    216a:	30 e0       	ldi	r19, 0x00	; 0
    216c:	ae 01       	movw	r20, r28
    216e:	66 e9       	ldi	r22, 0x96	; 150
    2170:	81 e0       	ldi	r24, 0x01	; 1
    2172:	0e 94 98 05 	call	0xb30	; 0xb30 <drawString>
				sprintf(convert_buffer, "%d", snake_score_2);
    2176:	80 91 dc 01 	lds	r24, 0x01DC
    217a:	1f 92       	push	r1
    217c:	8f 93       	push	r24
    217e:	ff 92       	push	r15
    2180:	ef 92       	push	r14
    2182:	df 93       	push	r29
    2184:	cf 93       	push	r28
    2186:	0e 94 48 14 	call	0x2890	; 0x2890 <sprintf>
				drawString(110, 150, convert_buffer, 0xff, 1);
    218a:	2f ef       	ldi	r18, 0xFF	; 255
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	ae 01       	movw	r20, r28
    2190:	66 e9       	ldi	r22, 0x96	; 150
    2192:	8e e6       	ldi	r24, 0x6E	; 110
    2194:	0e 94 98 05 	call	0xb30	; 0xb30 <drawString>
    2198:	8d b7       	in	r24, 0x3d	; 61
    219a:	9e b7       	in	r25, 0x3e	; 62
    219c:	0c 96       	adiw	r24, 0x0c	; 12
    219e:	0f b6       	in	r0, 0x3f	; 63
    21a0:	f8 94       	cli
    21a2:	9e bf       	out	0x3e, r25	; 62
    21a4:	0f be       	out	0x3f, r0	; 63
    21a6:	8d bf       	out	0x3d, r24	; 61
    21a8:	2c c0       	rjmp	.+88     	; 0x2202 <Game_sm+0x6be>
			}
			else{
				init_Snake1(50, height);
    21aa:	60 91 13 01 	lds	r22, 0x0113
    21ae:	82 e3       	ldi	r24, 0x32	; 50
    21b0:	0e 94 cf 05 	call	0xb9e	; 0xb9e <init_Snake1>
				draw_Snake1();
    21b4:	0e 94 a1 0b 	call	0x1742	; 0x1742 <draw_Snake1>
				add_food();
    21b8:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <add_food>
				sprintf(convert_buffer, "%d", snake_score_1);
    21bc:	80 91 dd 01 	lds	r24, 0x01DD
    21c0:	1f 92       	push	r1
    21c2:	8f 93       	push	r24
    21c4:	85 e1       	ldi	r24, 0x15	; 21
    21c6:	91 e0       	ldi	r25, 0x01	; 1
    21c8:	9f 93       	push	r25
    21ca:	8f 93       	push	r24
    21cc:	89 e4       	ldi	r24, 0x49	; 73
    21ce:	98 e0       	ldi	r25, 0x08	; 8
    21d0:	9f 93       	push	r25
    21d2:	8f 93       	push	r24
    21d4:	0e 94 48 14 	call	0x2890	; 0x2890 <sprintf>
				drawString(1, 150, convert_buffer, 0xff, 1);
    21d8:	01 e0       	ldi	r16, 0x01	; 1
    21da:	2f ef       	ldi	r18, 0xFF	; 255
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	49 e4       	ldi	r20, 0x49	; 73
    21e0:	58 e0       	ldi	r21, 0x08	; 8
    21e2:	66 e9       	ldi	r22, 0x96	; 150
    21e4:	81 e0       	ldi	r24, 0x01	; 1
    21e6:	0e 94 98 05 	call	0xb30	; 0xb30 <drawString>
				//drawString(1, 150, "Player 1: ", 0xFF, 1);
				//drawString(1, 150, "Player 1: ", 0xFF, 1);
				direction1 = right1;
    21ea:	81 e0       	ldi	r24, 0x01	; 1
    21ec:	80 93 5a 08 	sts	0x085A, r24
				game_state = run_single;
    21f0:	85 e0       	ldi	r24, 0x05	; 5
    21f2:	80 93 12 05 	sts	0x0512, r24
    21f6:	0f 90       	pop	r0
    21f8:	0f 90       	pop	r0
    21fa:	0f 90       	pop	r0
    21fc:	0f 90       	pop	r0
    21fe:	0f 90       	pop	r0
    2200:	0f 90       	pop	r0
			}
			
			uint16_t h_pos = width/2;
			uint16_t v_pos = height/2;
			//fillRect(h_pos, v_pos, 2, 2, 0xFFFF);
			setPeriod = 1;
    2202:	81 e0       	ldi	r24, 0x01	; 1
    2204:	80 93 0b 01 	sts	0x010B, r24
			break;
    2208:	fa c1       	rjmp	.+1012   	; 0x25fe <Game_sm+0xaba>
		
		case pause:
			getButton();
    220a:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <getButton>
			if(button1 == 7){
    220e:	80 91 d3 01 	lds	r24, 0x01D3
    2212:	87 30       	cpi	r24, 0x07	; 7
    2214:	09 f0       	breq	.+2      	; 0x2218 <Game_sm+0x6d4>
    2216:	f3 c1       	rjmp	.+998    	; 0x25fe <Game_sm+0xaba>
				game_state = wait;
    2218:	10 92 12 05 	sts	0x0512, r1
    221c:	f0 c1       	rjmp	.+992    	; 0x25fe <Game_sm+0xaba>
			}
			break;;
			
		case run_single:
			if(game_over){
    221e:	80 91 de 01 	lds	r24, 0x01DE
    2222:	88 23       	and	r24, r24
    2224:	21 f0       	breq	.+8      	; 0x222e <Game_sm+0x6ea>
				game_state = pause;
    2226:	87 e0       	ldi	r24, 0x07	; 7
    2228:	80 93 12 05 	sts	0x0512, r24
				break;
    222c:	e8 c1       	rjmp	.+976    	; 0x25fe <Game_sm+0xaba>
			}
			
			if(needFood){
    222e:	80 91 e3 01 	lds	r24, 0x01E3
    2232:	88 23       	and	r24, r24
    2234:	d1 f1       	breq	.+116    	; 0x22aa <Game_sm+0x766>
				add_food();
    2236:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <add_food>
				add_segment1();
    223a:	0e 94 f7 07 	call	0xfee	; 0xfee <add_segment1>
				sprintf(convert_buffer, "%d", snake_score_1);
    223e:	80 91 dd 01 	lds	r24, 0x01DD
    2242:	1f 92       	push	r1
    2244:	8f 93       	push	r24
    2246:	0f 2e       	mov	r0, r31
    2248:	f5 e1       	ldi	r31, 0x15	; 21
    224a:	ef 2e       	mov	r14, r31
    224c:	f1 e0       	ldi	r31, 0x01	; 1
    224e:	ff 2e       	mov	r15, r31
    2250:	f0 2d       	mov	r31, r0
    2252:	ff 92       	push	r15
    2254:	ef 92       	push	r14
    2256:	c9 e4       	ldi	r28, 0x49	; 73
    2258:	d8 e0       	ldi	r29, 0x08	; 8
    225a:	df 93       	push	r29
    225c:	cf 93       	push	r28
    225e:	0e 94 48 14 	call	0x2890	; 0x2890 <sprintf>
				//drawString(1, 150, "Player 1: ", 0xFF, 1);
				drawString(1, 150, convert_buffer, 0, 1);
    2262:	01 e0       	ldi	r16, 0x01	; 1
    2264:	20 e0       	ldi	r18, 0x00	; 0
    2266:	30 e0       	ldi	r19, 0x00	; 0
    2268:	ae 01       	movw	r20, r28
    226a:	66 e9       	ldi	r22, 0x96	; 150
    226c:	81 e0       	ldi	r24, 0x01	; 1
    226e:	0e 94 98 05 	call	0xb30	; 0xb30 <drawString>
				snake_score_1++;
    2272:	80 91 dd 01 	lds	r24, 0x01DD
    2276:	8f 5f       	subi	r24, 0xFF	; 255
    2278:	80 93 dd 01 	sts	0x01DD, r24
				sprintf(convert_buffer, "%d", snake_score_1);
    227c:	1f 92       	push	r1
    227e:	8f 93       	push	r24
    2280:	ff 92       	push	r15
    2282:	ef 92       	push	r14
    2284:	df 93       	push	r29
    2286:	cf 93       	push	r28
    2288:	0e 94 48 14 	call	0x2890	; 0x2890 <sprintf>
				drawString(1, 150, convert_buffer, 0xff, 1);
    228c:	2f ef       	ldi	r18, 0xFF	; 255
    228e:	30 e0       	ldi	r19, 0x00	; 0
    2290:	ae 01       	movw	r20, r28
    2292:	66 e9       	ldi	r22, 0x96	; 150
    2294:	81 e0       	ldi	r24, 0x01	; 1
    2296:	0e 94 98 05 	call	0xb30	; 0xb30 <drawString>
    229a:	8d b7       	in	r24, 0x3d	; 61
    229c:	9e b7       	in	r25, 0x3e	; 62
    229e:	0c 96       	adiw	r24, 0x0c	; 12
    22a0:	0f b6       	in	r0, 0x3f	; 63
    22a2:	f8 94       	cli
    22a4:	9e bf       	out	0x3e, r25	; 62
    22a6:	0f be       	out	0x3f, r0	; 63
    22a8:	8d bf       	out	0x3d, r24	; 61
			}
			detect_collision_food_1();
    22aa:	0e 94 9c 09 	call	0x1338	; 0x1338 <detect_collision_food_1>

			if(button1 == 7){
    22ae:	80 91 d3 01 	lds	r24, 0x01D3
    22b2:	87 30       	cpi	r24, 0x07	; 7
    22b4:	19 f4       	brne	.+6      	; 0x22bc <Game_sm+0x778>
				game_state = wait;
    22b6:	10 92 12 05 	sts	0x0512, r1
				break;
    22ba:	a1 c1       	rjmp	.+834    	; 0x25fe <Game_sm+0xaba>
			}
			
			if(button1 == 1){
    22bc:	81 30       	cpi	r24, 0x01	; 1
    22be:	21 f4       	brne	.+8      	; 0x22c8 <Game_sm+0x784>
				upButton1 = 1;
    22c0:	91 e0       	ldi	r25, 0x01	; 1
    22c2:	90 93 d1 01 	sts	0x01D1, r25
    22c6:	1a c0       	rjmp	.+52     	; 0x22fc <Game_sm+0x7b8>
			}
			else if(button1 == 2){
    22c8:	82 30       	cpi	r24, 0x02	; 2
    22ca:	21 f4       	brne	.+8      	; 0x22d4 <Game_sm+0x790>
				rightButton1 = 1;
    22cc:	91 e0       	ldi	r25, 0x01	; 1
    22ce:	90 93 ce 01 	sts	0x01CE, r25
    22d2:	14 c0       	rjmp	.+40     	; 0x22fc <Game_sm+0x7b8>
			}
			else if(button1 == 3){
    22d4:	83 30       	cpi	r24, 0x03	; 3
    22d6:	21 f4       	brne	.+8      	; 0x22e0 <Game_sm+0x79c>
				downButton1 = 1;
    22d8:	91 e0       	ldi	r25, 0x01	; 1
    22da:	90 93 d0 01 	sts	0x01D0, r25
    22de:	0e c0       	rjmp	.+28     	; 0x22fc <Game_sm+0x7b8>
			}
			else if(button1 == 4){
    22e0:	84 30       	cpi	r24, 0x04	; 4
    22e2:	21 f4       	brne	.+8      	; 0x22ec <Game_sm+0x7a8>
				leftButton1 = 1;
    22e4:	91 e0       	ldi	r25, 0x01	; 1
    22e6:	90 93 cf 01 	sts	0x01CF, r25
    22ea:	08 c0       	rjmp	.+16     	; 0x22fc <Game_sm+0x7b8>
			}
			else{
				upButton1 = downButton1 = leftButton1 = rightButton1 = 0;
    22ec:	10 92 ce 01 	sts	0x01CE, r1
    22f0:	10 92 cf 01 	sts	0x01CF, r1
    22f4:	10 92 d0 01 	sts	0x01D0, r1
    22f8:	10 92 d1 01 	sts	0x01D1, r1
			}
			
			//AI_singleplayer();
        
			if(usart_temp== 1){
    22fc:	90 91 cc 01 	lds	r25, 0x01CC
    2300:	91 30       	cpi	r25, 0x01	; 1
    2302:	19 f4       	brne	.+6      	; 0x230a <Game_sm+0x7c6>
				upButton1 = 1;
    2304:	90 93 d1 01 	sts	0x01D1, r25
    2308:	15 c0       	rjmp	.+42     	; 0x2334 <Game_sm+0x7f0>
			}
			else if(usart_temp== 2){
    230a:	92 30       	cpi	r25, 0x02	; 2
    230c:	21 f4       	brne	.+8      	; 0x2316 <Game_sm+0x7d2>
				rightButton1 = 1;
    230e:	91 e0       	ldi	r25, 0x01	; 1
    2310:	90 93 ce 01 	sts	0x01CE, r25
    2314:	0b c0       	rjmp	.+22     	; 0x232c <Game_sm+0x7e8>
			}
			else if(usart_temp == 3){
    2316:	93 30       	cpi	r25, 0x03	; 3
    2318:	21 f4       	brne	.+8      	; 0x2322 <Game_sm+0x7de>
				downButton1 = 1;	
    231a:	91 e0       	ldi	r25, 0x01	; 1
    231c:	90 93 d0 01 	sts	0x01D0, r25
    2320:	05 c0       	rjmp	.+10     	; 0x232c <Game_sm+0x7e8>
			}
			else if(usart_temp == 4){
    2322:	94 30       	cpi	r25, 0x04	; 4
    2324:	19 f4       	brne	.+6      	; 0x232c <Game_sm+0x7e8>
				leftButton1 = 1;
    2326:	91 e0       	ldi	r25, 0x01	; 1
    2328:	90 93 cf 01 	sts	0x01CF, r25
			}
			//if(temp)
        
        
			if(upButton1){
    232c:	90 91 d1 01 	lds	r25, 0x01D1
    2330:	99 23       	and	r25, r25
    2332:	41 f0       	breq	.+16     	; 0x2344 <Game_sm+0x800>
				//drawString(20, 20, "upButton", 0xff, 1);
				//update_Snake1(up1);
				if(lastDir1 != down1)
    2334:	90 91 e5 01 	lds	r25, 0x01E5
    2338:	93 30       	cpi	r25, 0x03	; 3
    233a:	39 f1       	breq	.+78     	; 0x238a <Game_sm+0x846>
				lastDir1 = up1;
    233c:	92 e0       	ldi	r25, 0x02	; 2
    233e:	90 93 e5 01 	sts	0x01E5, r25
    2342:	23 c0       	rjmp	.+70     	; 0x238a <Game_sm+0x846>
			}
			else if(downButton1){
    2344:	90 91 d0 01 	lds	r25, 0x01D0
    2348:	99 23       	and	r25, r25
    234a:	41 f0       	breq	.+16     	; 0x235c <Game_sm+0x818>
				//update_Snake1(down1);
				if(lastDir1 != up1)
    234c:	90 91 e5 01 	lds	r25, 0x01E5
    2350:	92 30       	cpi	r25, 0x02	; 2
    2352:	d9 f0       	breq	.+54     	; 0x238a <Game_sm+0x846>
				lastDir1 = down1;
    2354:	93 e0       	ldi	r25, 0x03	; 3
    2356:	90 93 e5 01 	sts	0x01E5, r25
    235a:	17 c0       	rjmp	.+46     	; 0x238a <Game_sm+0x846>
			}
			else if(rightButton1){
    235c:	90 91 ce 01 	lds	r25, 0x01CE
    2360:	99 23       	and	r25, r25
    2362:	41 f0       	breq	.+16     	; 0x2374 <Game_sm+0x830>
				//update_Snake1(right1);
				if(lastDir1!=left1)
    2364:	90 91 e5 01 	lds	r25, 0x01E5
    2368:	94 30       	cpi	r25, 0x04	; 4
    236a:	79 f0       	breq	.+30     	; 0x238a <Game_sm+0x846>
				lastDir1 = right1;
    236c:	91 e0       	ldi	r25, 0x01	; 1
    236e:	90 93 e5 01 	sts	0x01E5, r25
    2372:	0b c0       	rjmp	.+22     	; 0x238a <Game_sm+0x846>
			}
			else if(leftButton1){
    2374:	90 91 cf 01 	lds	r25, 0x01CF
    2378:	99 23       	and	r25, r25
    237a:	39 f0       	breq	.+14     	; 0x238a <Game_sm+0x846>
				//update_Snake1(left1);
				if(lastDir1!= right1)
    237c:	90 91 e5 01 	lds	r25, 0x01E5
    2380:	91 30       	cpi	r25, 0x01	; 1
    2382:	19 f0       	breq	.+6      	; 0x238a <Game_sm+0x846>
				lastDir1 = left1;
    2384:	94 e0       	ldi	r25, 0x04	; 4
    2386:	90 93 e5 01 	sts	0x01E5, r25
			}
			
			if(button1 == 6){
    238a:	86 30       	cpi	r24, 0x06	; 6
    238c:	11 f4       	brne	.+4      	; 0x2392 <Game_sm+0x84e>
				add_segment1();
    238e:	0e 94 f7 07 	call	0xfee	; 0xfee <add_segment1>
			}
			
			update_Snake1(lastDir1);
    2392:	80 91 e5 01 	lds	r24, 0x01E5
    2396:	0e 94 9d 06 	call	0xd3a	; 0xd3a <update_Snake1>
			detect_collision_self1();
    239a:	0e 94 89 08 	call	0x1112	; 0x1112 <detect_collision_self1>
		
			//if(button1 || usart_temp){
				draw_Snake1(lastDir1);
    239e:	80 91 e5 01 	lds	r24, 0x01E5
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	0e 94 a1 0b 	call	0x1742	; 0x1742 <draw_Snake1>
			//}
			
			break;
    23a8:	2a c1       	rjmp	.+596    	; 0x25fe <Game_sm+0xaba>
/* ---------------------------------------------------------------------------*/
		
		case run_multi:
			if(game_over){
    23aa:	80 91 de 01 	lds	r24, 0x01DE
    23ae:	88 23       	and	r24, r24
    23b0:	21 f0       	breq	.+8      	; 0x23ba <Game_sm+0x876>
				game_state = pause;
    23b2:	87 e0       	ldi	r24, 0x07	; 7
    23b4:	80 93 12 05 	sts	0x0512, r24
				break;
    23b8:	22 c1       	rjmp	.+580    	; 0x25fe <Game_sm+0xaba>
			}
			
			detect_collision_food_1();
    23ba:	0e 94 9c 09 	call	0x1338	; 0x1338 <detect_collision_food_1>
			if(needFood){
    23be:	80 91 e3 01 	lds	r24, 0x01E3
    23c2:	88 23       	and	r24, r24
    23c4:	d1 f1       	breq	.+116    	; 0x243a <Game_sm+0x8f6>
				add_food();
    23c6:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <add_food>
				add_segment1();
    23ca:	0e 94 f7 07 	call	0xfee	; 0xfee <add_segment1>
				sprintf(convert_buffer, "%d", snake_score_1);
    23ce:	80 91 dd 01 	lds	r24, 0x01DD
    23d2:	1f 92       	push	r1
    23d4:	8f 93       	push	r24
    23d6:	0f 2e       	mov	r0, r31
    23d8:	f5 e1       	ldi	r31, 0x15	; 21
    23da:	ef 2e       	mov	r14, r31
    23dc:	f1 e0       	ldi	r31, 0x01	; 1
    23de:	ff 2e       	mov	r15, r31
    23e0:	f0 2d       	mov	r31, r0
    23e2:	ff 92       	push	r15
    23e4:	ef 92       	push	r14
    23e6:	c9 e4       	ldi	r28, 0x49	; 73
    23e8:	d8 e0       	ldi	r29, 0x08	; 8
    23ea:	df 93       	push	r29
    23ec:	cf 93       	push	r28
    23ee:	0e 94 48 14 	call	0x2890	; 0x2890 <sprintf>
				//drawString(1, 150, "Player 1: ", 0xFF, 1);
				drawString(1, 150, convert_buffer, 0, 1);
    23f2:	01 e0       	ldi	r16, 0x01	; 1
    23f4:	20 e0       	ldi	r18, 0x00	; 0
    23f6:	30 e0       	ldi	r19, 0x00	; 0
    23f8:	ae 01       	movw	r20, r28
    23fa:	66 e9       	ldi	r22, 0x96	; 150
    23fc:	81 e0       	ldi	r24, 0x01	; 1
    23fe:	0e 94 98 05 	call	0xb30	; 0xb30 <drawString>
				snake_score_1++;
    2402:	80 91 dd 01 	lds	r24, 0x01DD
    2406:	8f 5f       	subi	r24, 0xFF	; 255
    2408:	80 93 dd 01 	sts	0x01DD, r24
				sprintf(convert_buffer, "%d", snake_score_1);
    240c:	1f 92       	push	r1
    240e:	8f 93       	push	r24
    2410:	ff 92       	push	r15
    2412:	ef 92       	push	r14
    2414:	df 93       	push	r29
    2416:	cf 93       	push	r28
    2418:	0e 94 48 14 	call	0x2890	; 0x2890 <sprintf>
				drawString(1, 150, convert_buffer, 0xff, 1);
    241c:	2f ef       	ldi	r18, 0xFF	; 255
    241e:	30 e0       	ldi	r19, 0x00	; 0
    2420:	ae 01       	movw	r20, r28
    2422:	66 e9       	ldi	r22, 0x96	; 150
    2424:	81 e0       	ldi	r24, 0x01	; 1
    2426:	0e 94 98 05 	call	0xb30	; 0xb30 <drawString>
    242a:	8d b7       	in	r24, 0x3d	; 61
    242c:	9e b7       	in	r25, 0x3e	; 62
    242e:	0c 96       	adiw	r24, 0x0c	; 12
    2430:	0f b6       	in	r0, 0x3f	; 63
    2432:	f8 94       	cli
    2434:	9e bf       	out	0x3e, r25	; 62
    2436:	0f be       	out	0x3f, r0	; 63
    2438:	8d bf       	out	0x3d, r24	; 61
			}
			
			detect_collision_food_2();
    243a:	0e 94 83 0a 	call	0x1506	; 0x1506 <detect_collision_food_2>
			if(needFood){
    243e:	80 91 e3 01 	lds	r24, 0x01E3
    2442:	88 23       	and	r24, r24
    2444:	d1 f1       	breq	.+116    	; 0x24ba <Game_sm+0x976>
				add_food();
    2446:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <add_food>
				add_segment2();
    244a:	0e 94 c8 08 	call	0x1190	; 0x1190 <add_segment2>
				sprintf(convert_buffer, "%d", snake_score_2);
    244e:	80 91 dc 01 	lds	r24, 0x01DC
    2452:	1f 92       	push	r1
    2454:	8f 93       	push	r24
    2456:	0f 2e       	mov	r0, r31
    2458:	f5 e1       	ldi	r31, 0x15	; 21
    245a:	ef 2e       	mov	r14, r31
    245c:	f1 e0       	ldi	r31, 0x01	; 1
    245e:	ff 2e       	mov	r15, r31
    2460:	f0 2d       	mov	r31, r0
    2462:	ff 92       	push	r15
    2464:	ef 92       	push	r14
    2466:	c9 e4       	ldi	r28, 0x49	; 73
    2468:	d8 e0       	ldi	r29, 0x08	; 8
    246a:	df 93       	push	r29
    246c:	cf 93       	push	r28
    246e:	0e 94 48 14 	call	0x2890	; 0x2890 <sprintf>
				drawString(110, 150, convert_buffer, 0, 1);
    2472:	01 e0       	ldi	r16, 0x01	; 1
    2474:	20 e0       	ldi	r18, 0x00	; 0
    2476:	30 e0       	ldi	r19, 0x00	; 0
    2478:	ae 01       	movw	r20, r28
    247a:	66 e9       	ldi	r22, 0x96	; 150
    247c:	8e e6       	ldi	r24, 0x6E	; 110
    247e:	0e 94 98 05 	call	0xb30	; 0xb30 <drawString>
				snake_score_2++;
    2482:	80 91 dc 01 	lds	r24, 0x01DC
    2486:	8f 5f       	subi	r24, 0xFF	; 255
    2488:	80 93 dc 01 	sts	0x01DC, r24
				sprintf(convert_buffer, "%d", snake_score_2);
    248c:	1f 92       	push	r1
    248e:	8f 93       	push	r24
    2490:	ff 92       	push	r15
    2492:	ef 92       	push	r14
    2494:	df 93       	push	r29
    2496:	cf 93       	push	r28
    2498:	0e 94 48 14 	call	0x2890	; 0x2890 <sprintf>
				drawString(110, 150, convert_buffer, 0xff, 1);
    249c:	2f ef       	ldi	r18, 0xFF	; 255
    249e:	30 e0       	ldi	r19, 0x00	; 0
    24a0:	ae 01       	movw	r20, r28
    24a2:	66 e9       	ldi	r22, 0x96	; 150
    24a4:	8e e6       	ldi	r24, 0x6E	; 110
    24a6:	0e 94 98 05 	call	0xb30	; 0xb30 <drawString>
    24aa:	8d b7       	in	r24, 0x3d	; 61
    24ac:	9e b7       	in	r25, 0x3e	; 62
    24ae:	0c 96       	adiw	r24, 0x0c	; 12
    24b0:	0f b6       	in	r0, 0x3f	; 63
    24b2:	f8 94       	cli
    24b4:	9e bf       	out	0x3e, r25	; 62
    24b6:	0f be       	out	0x3f, r0	; 63
    24b8:	8d bf       	out	0x3d, r24	; 61
			}
			
			if(button1 == 7){
    24ba:	80 91 d3 01 	lds	r24, 0x01D3
    24be:	87 30       	cpi	r24, 0x07	; 7
    24c0:	19 f4       	brne	.+6      	; 0x24c8 <Game_sm+0x984>
				game_state = wait;
    24c2:	10 92 12 05 	sts	0x0512, r1
				break;
    24c6:	9b c0       	rjmp	.+310    	; 0x25fe <Game_sm+0xaba>
			}
		
			if(button1 == 1){
    24c8:	81 30       	cpi	r24, 0x01	; 1
    24ca:	21 f4       	brne	.+8      	; 0x24d4 <Game_sm+0x990>
				upButton1 = 1;
    24cc:	91 e0       	ldi	r25, 0x01	; 1
    24ce:	90 93 d1 01 	sts	0x01D1, r25
    24d2:	1a c0       	rjmp	.+52     	; 0x2508 <Game_sm+0x9c4>
			}
			else if(button1 == 2){
    24d4:	82 30       	cpi	r24, 0x02	; 2
    24d6:	21 f4       	brne	.+8      	; 0x24e0 <Game_sm+0x99c>
				rightButton1 = 1;
    24d8:	91 e0       	ldi	r25, 0x01	; 1
    24da:	90 93 ce 01 	sts	0x01CE, r25
    24de:	14 c0       	rjmp	.+40     	; 0x2508 <Game_sm+0x9c4>
			}
			else if(button1 == 3){
    24e0:	83 30       	cpi	r24, 0x03	; 3
    24e2:	21 f4       	brne	.+8      	; 0x24ec <Game_sm+0x9a8>
				downButton1 = 1;
    24e4:	91 e0       	ldi	r25, 0x01	; 1
    24e6:	90 93 d0 01 	sts	0x01D0, r25
    24ea:	0e c0       	rjmp	.+28     	; 0x2508 <Game_sm+0x9c4>
			}
			else if(button1 == 4){
    24ec:	84 30       	cpi	r24, 0x04	; 4
    24ee:	21 f4       	brne	.+8      	; 0x24f8 <Game_sm+0x9b4>
				leftButton1 = 1;
    24f0:	91 e0       	ldi	r25, 0x01	; 1
    24f2:	90 93 cf 01 	sts	0x01CF, r25
    24f6:	08 c0       	rjmp	.+16     	; 0x2508 <Game_sm+0x9c4>
			}
			else{
				upButton1 = downButton1 = leftButton1 = rightButton1 = 0;
    24f8:	10 92 ce 01 	sts	0x01CE, r1
    24fc:	10 92 cf 01 	sts	0x01CF, r1
    2500:	10 92 d0 01 	sts	0x01D0, r1
    2504:	10 92 d1 01 	sts	0x01D1, r1
		
		
			//player 2 snake
			//AI_multiplayer();
			
			if(usart_temp== 1){
    2508:	90 91 cc 01 	lds	r25, 0x01CC
    250c:	91 30       	cpi	r25, 0x01	; 1
    250e:	41 f4       	brne	.+16     	; 0x2520 <Game_sm+0x9dc>
				//drawString(40, 40, "hello", 0xff, 1);
				//upButton2 = 1;
				if(lastDir2 != down2)
    2510:	90 91 e4 01 	lds	r25, 0x01E4
    2514:	93 30       	cpi	r25, 0x03	; 3
    2516:	09 f1       	breq	.+66     	; 0x255a <Game_sm+0xa16>
				lastDir2 = up2;
    2518:	92 e0       	ldi	r25, 0x02	; 2
    251a:	90 93 e4 01 	sts	0x01E4, r25
    251e:	1d c0       	rjmp	.+58     	; 0x255a <Game_sm+0xa16>
			}
			else if(usart_temp== 2){
    2520:	92 30       	cpi	r25, 0x02	; 2
    2522:	41 f4       	brne	.+16     	; 0x2534 <Game_sm+0x9f0>
				//rightButton2 = 1;
				if(lastDir2 != left2)
    2524:	90 91 e4 01 	lds	r25, 0x01E4
    2528:	94 30       	cpi	r25, 0x04	; 4
    252a:	b9 f0       	breq	.+46     	; 0x255a <Game_sm+0xa16>
				lastDir2 = right2;
    252c:	91 e0       	ldi	r25, 0x01	; 1
    252e:	90 93 e4 01 	sts	0x01E4, r25
    2532:	13 c0       	rjmp	.+38     	; 0x255a <Game_sm+0xa16>
			}
			else if(usart_temp == 3){
    2534:	93 30       	cpi	r25, 0x03	; 3
    2536:	41 f4       	brne	.+16     	; 0x2548 <Game_sm+0xa04>
				//downButton2 = 1;
				if(lastDir2 != up2)
    2538:	90 91 e4 01 	lds	r25, 0x01E4
    253c:	92 30       	cpi	r25, 0x02	; 2
    253e:	69 f0       	breq	.+26     	; 0x255a <Game_sm+0xa16>
				lastDir2 = down2;
    2540:	93 e0       	ldi	r25, 0x03	; 3
    2542:	90 93 e4 01 	sts	0x01E4, r25
    2546:	09 c0       	rjmp	.+18     	; 0x255a <Game_sm+0xa16>
			}
			else if(usart_temp == 4){
    2548:	94 30       	cpi	r25, 0x04	; 4
    254a:	39 f4       	brne	.+14     	; 0x255a <Game_sm+0xa16>
				//leftButton2 = 1;
				if(lastDir2!= right2)
    254c:	90 91 e4 01 	lds	r25, 0x01E4
    2550:	91 30       	cpi	r25, 0x01	; 1
    2552:	19 f0       	breq	.+6      	; 0x255a <Game_sm+0xa16>
				lastDir2 = left2;
    2554:	94 e0       	ldi	r25, 0x04	; 4
    2556:	90 93 e4 01 	sts	0x01E4, r25
			}
			//if(temp)
		
		
			if(upButton1){
    255a:	90 91 d1 01 	lds	r25, 0x01D1
    255e:	99 23       	and	r25, r25
    2560:	41 f0       	breq	.+16     	; 0x2572 <Game_sm+0xa2e>
				//drawString(20, 20, "upButton", 0xff, 1);
				//update_Snake1(up1);
				if(lastDir1 != down1)
    2562:	90 91 e5 01 	lds	r25, 0x01E5
    2566:	93 30       	cpi	r25, 0x03	; 3
    2568:	39 f1       	breq	.+78     	; 0x25b8 <Game_sm+0xa74>
				lastDir1 = up1;
    256a:	92 e0       	ldi	r25, 0x02	; 2
    256c:	90 93 e5 01 	sts	0x01E5, r25
    2570:	23 c0       	rjmp	.+70     	; 0x25b8 <Game_sm+0xa74>
			}
			else if(downButton1){
    2572:	90 91 d0 01 	lds	r25, 0x01D0
    2576:	99 23       	and	r25, r25
    2578:	41 f0       	breq	.+16     	; 0x258a <Game_sm+0xa46>
				//update_Snake1(down1);
				if(lastDir1 != up1)
    257a:	90 91 e5 01 	lds	r25, 0x01E5
    257e:	92 30       	cpi	r25, 0x02	; 2
    2580:	d9 f0       	breq	.+54     	; 0x25b8 <Game_sm+0xa74>
				lastDir1 = down1;
    2582:	93 e0       	ldi	r25, 0x03	; 3
    2584:	90 93 e5 01 	sts	0x01E5, r25
    2588:	17 c0       	rjmp	.+46     	; 0x25b8 <Game_sm+0xa74>
			}
			else if(rightButton1){
    258a:	90 91 ce 01 	lds	r25, 0x01CE
    258e:	99 23       	and	r25, r25
    2590:	41 f0       	breq	.+16     	; 0x25a2 <Game_sm+0xa5e>
				//update_Snake1(right1);
				if(lastDir1!=left1)
    2592:	90 91 e5 01 	lds	r25, 0x01E5
    2596:	94 30       	cpi	r25, 0x04	; 4
    2598:	79 f0       	breq	.+30     	; 0x25b8 <Game_sm+0xa74>
				lastDir1 = right1;
    259a:	91 e0       	ldi	r25, 0x01	; 1
    259c:	90 93 e5 01 	sts	0x01E5, r25
    25a0:	0b c0       	rjmp	.+22     	; 0x25b8 <Game_sm+0xa74>
			}
			else if(leftButton1){
    25a2:	90 91 cf 01 	lds	r25, 0x01CF
    25a6:	99 23       	and	r25, r25
    25a8:	39 f0       	breq	.+14     	; 0x25b8 <Game_sm+0xa74>
				//update_Snake1(left1);
				if(lastDir1!= right1)
    25aa:	90 91 e5 01 	lds	r25, 0x01E5
    25ae:	91 30       	cpi	r25, 0x01	; 1
    25b0:	19 f0       	breq	.+6      	; 0x25b8 <Game_sm+0xa74>
				lastDir1 = left1;
    25b2:	94 e0       	ldi	r25, 0x04	; 4
    25b4:	90 93 e5 01 	sts	0x01E5, r25
			}
		
			if(button1 == 6){
    25b8:	86 30       	cpi	r24, 0x06	; 6
    25ba:	11 f4       	brne	.+4      	; 0x25c0 <Game_sm+0xa7c>
				add_segment1();
    25bc:	0e 94 f7 07 	call	0xfee	; 0xfee <add_segment1>
			}
		
			update_Snake1(lastDir1);
    25c0:	80 91 e5 01 	lds	r24, 0x01E5
    25c4:	0e 94 9d 06 	call	0xd3a	; 0xd3a <update_Snake1>
			update_Snake2(lastDir2);
    25c8:	80 91 e4 01 	lds	r24, 0x01E4
    25cc:	0e 94 4a 07 	call	0xe94	; 0xe94 <update_Snake2>
			detect_collision_self1();
    25d0:	0e 94 89 08 	call	0x1112	; 0x1112 <detect_collision_self1>
			detect_collision_self2();
    25d4:	0e 94 5d 09 	call	0x12ba	; 0x12ba <detect_collision_self2>
			detect_collision_both();
		
			//if(button1 || usart_temp){
			draw_Snake1(lastDir1);
    25d8:	80 91 e5 01 	lds	r24, 0x01E5
    25dc:	90 e0       	ldi	r25, 0x00	; 0
    25de:	0e 94 a1 0b 	call	0x1742	; 0x1742 <draw_Snake1>
			draw_Snake2(lastDir2);
    25e2:	80 91 e4 01 	lds	r24, 0x01E4
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	0e 94 c6 0b 	call	0x178c	; 0x178c <draw_Snake2>
			//}
		
			break;
    25ec:	08 c0       	rjmp	.+16     	; 0x25fe <Game_sm+0xaba>
			//button1 = ~PINC & 0x0f;
			
			drawString(5, 12, "SNAKE GAME", Color565(r, g, b), 2);
			
			if((button1 == 2) || (button1 == 4) && (! drawSelectionScreen)){// || usart_temp == 2 || usart_temp == 4){ 
				game_mode++;
    25ee:	80 91 08 01 	lds	r24, 0x0108
    25f2:	8f 5f       	subi	r24, 0xFF	; 255
    25f4:	80 93 08 01 	sts	0x0108, r24
				if(game_mode % 2 != 0){
    25f8:	80 ff       	sbrs	r24, 0
    25fa:	25 cc       	rjmp	.-1974   	; 0x1e46 <Game_sm+0x302>
    25fc:	f6 cb       	rjmp	.-2068   	; 0x1dea <Game_sm+0x2a6>
			draw_Snake2(lastDir2);
			//}
		
			break;
	}
}
    25fe:	df 91       	pop	r29
    2600:	cf 91       	pop	r28
    2602:	1f 91       	pop	r17
    2604:	0f 91       	pop	r16
    2606:	ff 90       	pop	r15
    2608:	ef 90       	pop	r14
    260a:	08 95       	ret

0000260c <USART_sm>:

//uint8_t usart_temp = 0x00;
char usart_char[8];
char prev_temp;

void USART_sm(){
    260c:	0f 93       	push	r16
	switch(Usart_state){
    260e:	80 91 11 05 	lds	r24, 0x0511
    2612:	81 11       	cpse	r24, r1
    2614:	21 c0       	rjmp	.+66     	; 0x2658 <USART_sm+0x4c>
}

unsigned char USART_HasReceived()
{
	return (UCSR0A & (1 << RXC0));
    2616:	80 91 c0 00 	lds	r24, 0x00C0
		case usart_wait:
			
			if(USART_HasReceived()){
    261a:	88 23       	and	r24, r24
    261c:	ec f4       	brge	.+58     	; 0x2658 <USART_sm+0x4c>
				//drawChar(10, 100, '1', 0xFF, 1);
				usart_temp = USART_Receive();
    261e:	0e 94 57 0c 	call	0x18ae	; 0x18ae <USART_Receive>
    2622:	80 93 cc 01 	sts	0x01CC, r24
				
				USART_Flush();
    2626:	0e 94 5f 0c 	call	0x18be	; 0x18be <USART_Flush>
				//itoa(usart_temp, usart_char, 10);
				//sprintf(usart_char, "%d", usart_temp);
				drawChar(100, 1, prev_temp+'0', 0, 1);
    262a:	40 91 5b 08 	lds	r20, 0x085B
    262e:	40 5d       	subi	r20, 0xD0	; 208
    2630:	01 e0       	ldi	r16, 0x01	; 1
    2632:	20 e0       	ldi	r18, 0x00	; 0
    2634:	30 e0       	ldi	r19, 0x00	; 0
    2636:	61 e0       	ldi	r22, 0x01	; 1
    2638:	84 e6       	ldi	r24, 0x64	; 100
    263a:	0e 94 02 05 	call	0xa04	; 0xa04 <drawChar>
				
				//clock_counter++;
				
				//sprintf(convert_buffer, "%d", usart_temp);
				//drawChar(100, 1, prev_temp+'0', 0, 1);
				drawChar(100, 1, usart_temp+'0', 0xff, 1);
    263e:	40 91 cc 01 	lds	r20, 0x01CC
    2642:	40 5d       	subi	r20, 0xD0	; 208
    2644:	2f ef       	ldi	r18, 0xFF	; 255
    2646:	30 e0       	ldi	r19, 0x00	; 0
    2648:	61 e0       	ldi	r22, 0x01	; 1
    264a:	84 e6       	ldi	r24, 0x64	; 100
    264c:	0e 94 02 05 	call	0xa04	; 0xa04 <drawChar>
				prev_temp = usart_temp;
    2650:	80 91 cc 01 	lds	r24, 0x01CC
    2654:	80 93 5b 08 	sts	0x085B, r24
			}
			
			break;
			
	}
}
    2658:	0f 91       	pop	r16
    265a:	08 95       	ret

0000265c <main>:
    265c:	2f eb       	ldi	r18, 0xBF	; 191
    265e:	87 e2       	ldi	r24, 0x27	; 39
    2660:	99 e0       	ldi	r25, 0x09	; 9
    2662:	21 50       	subi	r18, 0x01	; 1
    2664:	80 40       	sbci	r24, 0x00	; 0
    2666:	90 40       	sbci	r25, 0x00	; 0
    2668:	e1 f7       	brne	.-8      	; 0x2662 <main+0x6>
    266a:	00 c0       	rjmp	.+0      	; 0x266c <main+0x10>
    266c:	00 00       	nop


int main(void)
{
	_delay_ms(3000);
	USART_Init();
    266e:	0e 94 4b 0c 	call	0x1896	; 0x1896 <USART_Init>
	SPI_MasterInit();
    2672:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <SPI_MasterInit>
	srand(99);
    2676:	83 e6       	ldi	r24, 0x63	; 99
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	0e 94 3d 14 	call	0x287a	; 0x287a <srand>
	
	initADC();
    267e:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <initADC>
	
	InitDisplay();
    2682:	0e 94 0e 03 	call	0x61c	; 0x61c <InitDisplay>
	
	fillScreen(0);
    2686:	80 e0       	ldi	r24, 0x00	; 0
    2688:	90 e0       	ldi	r25, 0x00	; 0
    268a:	0e 94 53 04 	call	0x8a6	; 0x8a6 <fillScreen>
	
	//drawChar(1, 1, 'Q', 0xFF, 22);
	//drawChar(30, 30, 'Q', 0xFF, 8);
	

	DDRC = 0x00; PORTC = 0xFf;
    268e:	17 b8       	out	0x07, r1	; 7
    2690:	8f ef       	ldi	r24, 0xFF	; 255
    2692:	88 b9       	out	0x08, r24	; 8
	DDRD = 0x00; PORTD = 0xff;
    2694:	1a b8       	out	0x0a, r1	; 10
    2696:	8b b9       	out	0x0b, r24	; 11
    2698:	e7 ea       	ldi	r30, 0xA7	; 167
    269a:	f1 e6       	ldi	r31, 0x61	; 97
    269c:	31 97       	sbiw	r30, 0x01	; 1
    269e:	f1 f7       	brne	.-4      	; 0x269c <main+0x40>
    26a0:	00 c0       	rjmp	.+0      	; 0x26a2 <main+0x46>
    26a2:	00 00       	nop
unsigned long _avr_timer_M = 1; // Start count from here, down to 0. Default 1ms
unsigned long _avr_timer_cntcurr = 0; // Current internal count of 1ms ticks

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
    26a4:	81 e0       	ldi	r24, 0x01	; 1
    26a6:	90 e0       	ldi	r25, 0x00	; 0
    26a8:	a0 e0       	ldi	r26, 0x00	; 0
    26aa:	b0 e0       	ldi	r27, 0x00	; 0
    26ac:	80 93 0e 01 	sts	0x010E, r24
    26b0:	90 93 0f 01 	sts	0x010F, r25
    26b4:	a0 93 10 01 	sts	0x0110, r26
    26b8:	b0 93 11 01 	sts	0x0111, r27
	_avr_timer_cntcurr = _avr_timer_M;
    26bc:	80 93 d7 01 	sts	0x01D7, r24
    26c0:	90 93 d8 01 	sts	0x01D8, r25
    26c4:	a0 93 d9 01 	sts	0x01D9, r26
    26c8:	b0 93 da 01 	sts	0x01DA, r27
	
	_delay_ms(100);
	
	
	TimerSet(1);
	TimerOn();
    26cc:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <TimerOn>
	uint16_t game_period = 0;
	
	uint16_t prev_adc = 0;
	float adc_display = 0.0;
	
	game_state = wait;
    26d0:	10 92 12 05 	sts	0x0512, r1
	clock_state = init_clock;
    26d4:	10 92 59 08 	sts	0x0859, r1
	Usart_state = usart_wait;
    26d8:	10 92 11 05 	sts	0x0511, r1
    while(1)
    {
        //TODO:: Please write your application code 
		
		//USART_sm();
		updateColor();
    26dc:	0e 94 84 0c 	call	0x1908	; 0x1908 <updateColor>
	TimerOn();
	
	uint16_t timer = 0;
	uint16_t clock_period = 0;
	uint32_t count = 0;
	uint16_t game_period = 0;
    26e0:	c1 2c       	mov	r12, r1
    26e2:	d1 2c       	mov	r13, r1
	
	
	TimerSet(1);
	TimerOn();
	
	uint16_t timer = 0;
    26e4:	e1 2c       	mov	r14, r1
    26e6:	f1 2c       	mov	r15, r1
	uint16_t clock_period = 0;
    26e8:	c0 e0       	ldi	r28, 0x00	; 0
    26ea:	d0 e0       	ldi	r29, 0x00	; 0
		}
		if(clock_period > 200){
			Clock_sm();
			
			clock_period = 0;
			adc_value = ADCW;
    26ec:	0f 2e       	mov	r0, r31
    26ee:	f8 e7       	ldi	r31, 0x78	; 120
    26f0:	8f 2e       	mov	r8, r31
    26f2:	91 2c       	mov	r9, r1
    26f4:	f0 2d       	mov	r31, r0
			adc_display = adc_value;///1023;// * 5;
			//drawString(40, 1, prev_adc, 0, 1);
			fillRect(40, 1, 40, 8, 0);
			
			sprintf(convert_buffer, "%d", (adc_value-25));
    26f6:	0f 2e       	mov	r0, r31
    26f8:	f5 e1       	ldi	r31, 0x15	; 21
    26fa:	6f 2e       	mov	r6, r31
    26fc:	f1 e0       	ldi	r31, 0x01	; 1
    26fe:	7f 2e       	mov	r7, r31
    2700:	f0 2d       	mov	r31, r0
    2702:	0f 2e       	mov	r0, r31
    2704:	f9 e4       	ldi	r31, 0x49	; 73
    2706:	af 2e       	mov	r10, r31
    2708:	f8 e0       	ldi	r31, 0x08	; 8
    270a:	bf 2e       	mov	r11, r31
    270c:	f0 2d       	mov	r31, r0
    270e:	39 c0       	rjmp	.+114    	; 0x2782 <main+0x126>
		
		//USART_sm();
		updateColor();
		if(timer >= 10){
			//drawChar(1, 100, '0', 0xFF, 1);
			USART_sm();getButton();
    2710:	0e 94 06 13 	call	0x260c	; 0x260c <USART_sm>
    2714:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <getButton>
			//Clock_sm();
			
		}
		if(clock_period > 200){
    2718:	c9 3c       	cpi	r28, 0xC9	; 201
    271a:	d1 05       	cpc	r29, r1
    271c:	90 f1       	brcs	.+100    	; 0x2782 <main+0x126>
			Clock_sm();
    271e:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <Clock_sm>
			
			clock_period = 0;
			adc_value = ADCW;
    2722:	f4 01       	movw	r30, r8
    2724:	80 81       	ld	r24, Z
    2726:	91 81       	ldd	r25, Z+1	; 0x01
    2728:	90 93 17 05 	sts	0x0517, r25
    272c:	80 93 16 05 	sts	0x0516, r24
			adc_display = adc_value;///1023;// * 5;
			//drawString(40, 1, prev_adc, 0, 1);
			fillRect(40, 1, 40, 8, 0);
    2730:	00 e0       	ldi	r16, 0x00	; 0
    2732:	10 e0       	ldi	r17, 0x00	; 0
    2734:	28 e0       	ldi	r18, 0x08	; 8
    2736:	30 e0       	ldi	r19, 0x00	; 0
    2738:	48 e2       	ldi	r20, 0x28	; 40
    273a:	50 e0       	ldi	r21, 0x00	; 0
    273c:	61 e0       	ldi	r22, 0x01	; 1
    273e:	70 e0       	ldi	r23, 0x00	; 0
    2740:	88 e2       	ldi	r24, 0x28	; 40
    2742:	90 e0       	ldi	r25, 0x00	; 0
    2744:	0e 94 ab 04 	call	0x956	; 0x956 <fillRect>
			
			sprintf(convert_buffer, "%d", (adc_value-25));
    2748:	80 91 16 05 	lds	r24, 0x0516
    274c:	90 91 17 05 	lds	r25, 0x0517
    2750:	49 97       	sbiw	r24, 0x19	; 25
    2752:	9f 93       	push	r25
    2754:	8f 93       	push	r24
    2756:	7f 92       	push	r7
    2758:	6f 92       	push	r6
    275a:	bf 92       	push	r11
    275c:	af 92       	push	r10
    275e:	0e 94 48 14 	call	0x2890	; 0x2890 <sprintf>
			drawString(40, 1, convert_buffer, 0xff, 1);
    2762:	01 e0       	ldi	r16, 0x01	; 1
    2764:	2f ef       	ldi	r18, 0xFF	; 255
    2766:	30 e0       	ldi	r19, 0x00	; 0
    2768:	a5 01       	movw	r20, r10
    276a:	61 e0       	ldi	r22, 0x01	; 1
    276c:	88 e2       	ldi	r24, 0x28	; 40
    276e:	0e 94 98 05 	call	0xb30	; 0xb30 <drawString>
    2772:	0f 90       	pop	r0
    2774:	0f 90       	pop	r0
    2776:	0f 90       	pop	r0
    2778:	0f 90       	pop	r0
    277a:	0f 90       	pop	r0
    277c:	0f 90       	pop	r0
			
		}
		if(clock_period > 200){
			Clock_sm();
			
			clock_period = 0;
    277e:	c0 e0       	ldi	r28, 0x00	; 0
    2780:	d0 e0       	ldi	r29, 0x00	; 0
			drawString(40, 1, convert_buffer, 0xff, 1);
			prev_adc = convert_buffer;
			
		}
		
		if(game_period > game_speed){
    2782:	80 91 ef 01 	lds	r24, 0x01EF
    2786:	90 91 f0 01 	lds	r25, 0x01F0
    278a:	8c 15       	cp	r24, r12
    278c:	9d 05       	cpc	r25, r13
    278e:	10 f4       	brcc	.+4      	; 0x2794 <main+0x138>
			Game_sm();
    2790:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <Game_sm>
		}
		
		//Console_sm();
		usart_temp = 0;
    2794:	10 92 cc 01 	sts	0x01CC, r1
		
		//drawChar(100, 1, PIND+'0', 0, 1);
		//drawChar(100, 1, usart_temp+'0', 0xff, 1);
		
		while(!TimerFlag){}
    2798:	80 91 db 01 	lds	r24, 0x01DB
    279c:	88 23       	and	r24, r24
    279e:	e1 f3       	breq	.-8      	; 0x2798 <main+0x13c>
		TimerFlag = 0;
    27a0:	10 92 db 01 	sts	0x01DB, r1
		timer+= periodMultiplier;
    27a4:	80 91 0c 01 	lds	r24, 0x010C
    27a8:	90 91 0d 01 	lds	r25, 0x010D
    27ac:	e8 0e       	add	r14, r24
    27ae:	f9 1e       	adc	r15, r25
		clock_period+= periodMultiplier;
    27b0:	c8 0f       	add	r28, r24
    27b2:	d9 1f       	adc	r29, r25
		game_period += periodMultiplier;
    27b4:	c8 0e       	add	r12, r24
    27b6:	d9 1e       	adc	r13, r25
    while(1)
    {
        //TODO:: Please write your application code 
		
		//USART_sm();
		updateColor();
    27b8:	0e 94 84 0c 	call	0x1908	; 0x1908 <updateColor>
		if(timer >= 10){
    27bc:	fa e0       	ldi	r31, 0x0A	; 10
    27be:	ef 16       	cp	r14, r31
    27c0:	f1 04       	cpc	r15, r1
    27c2:	08 f4       	brcc	.+2      	; 0x27c6 <main+0x16a>
    27c4:	a9 cf       	rjmp	.-174    	; 0x2718 <main+0xbc>
    27c6:	a4 cf       	rjmp	.-184    	; 0x2710 <main+0xb4>

000027c8 <__tablejump2__>:
    27c8:	ee 0f       	add	r30, r30
    27ca:	ff 1f       	adc	r31, r31

000027cc <__tablejump__>:
    27cc:	05 90       	lpm	r0, Z+
    27ce:	f4 91       	lpm	r31, Z
    27d0:	e0 2d       	mov	r30, r0
    27d2:	09 94       	ijmp

000027d4 <do_rand>:
    27d4:	8f 92       	push	r8
    27d6:	9f 92       	push	r9
    27d8:	af 92       	push	r10
    27da:	bf 92       	push	r11
    27dc:	cf 92       	push	r12
    27de:	df 92       	push	r13
    27e0:	ef 92       	push	r14
    27e2:	ff 92       	push	r15
    27e4:	cf 93       	push	r28
    27e6:	df 93       	push	r29
    27e8:	ec 01       	movw	r28, r24
    27ea:	68 81       	ld	r22, Y
    27ec:	79 81       	ldd	r23, Y+1	; 0x01
    27ee:	8a 81       	ldd	r24, Y+2	; 0x02
    27f0:	9b 81       	ldd	r25, Y+3	; 0x03
    27f2:	61 15       	cp	r22, r1
    27f4:	71 05       	cpc	r23, r1
    27f6:	81 05       	cpc	r24, r1
    27f8:	91 05       	cpc	r25, r1
    27fa:	21 f4       	brne	.+8      	; 0x2804 <do_rand+0x30>
    27fc:	64 e2       	ldi	r22, 0x24	; 36
    27fe:	79 ed       	ldi	r23, 0xD9	; 217
    2800:	8b e5       	ldi	r24, 0x5B	; 91
    2802:	97 e0       	ldi	r25, 0x07	; 7
    2804:	2d e1       	ldi	r18, 0x1D	; 29
    2806:	33 ef       	ldi	r19, 0xF3	; 243
    2808:	41 e0       	ldi	r20, 0x01	; 1
    280a:	50 e0       	ldi	r21, 0x00	; 0
    280c:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <__divmodsi4>
    2810:	49 01       	movw	r8, r18
    2812:	5a 01       	movw	r10, r20
    2814:	9b 01       	movw	r18, r22
    2816:	ac 01       	movw	r20, r24
    2818:	a7 ea       	ldi	r26, 0xA7	; 167
    281a:	b1 e4       	ldi	r27, 0x41	; 65
    281c:	0e 94 01 17 	call	0x2e02	; 0x2e02 <__muluhisi3>
    2820:	6b 01       	movw	r12, r22
    2822:	7c 01       	movw	r14, r24
    2824:	ac ee       	ldi	r26, 0xEC	; 236
    2826:	b4 ef       	ldi	r27, 0xF4	; 244
    2828:	a5 01       	movw	r20, r10
    282a:	94 01       	movw	r18, r8
    282c:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <__mulohisi3>
    2830:	c6 0e       	add	r12, r22
    2832:	d7 1e       	adc	r13, r23
    2834:	e8 1e       	adc	r14, r24
    2836:	f9 1e       	adc	r15, r25
    2838:	f7 fe       	sbrs	r15, 7
    283a:	06 c0       	rjmp	.+12     	; 0x2848 <do_rand+0x74>
    283c:	81 e0       	ldi	r24, 0x01	; 1
    283e:	c8 1a       	sub	r12, r24
    2840:	d1 08       	sbc	r13, r1
    2842:	e1 08       	sbc	r14, r1
    2844:	80 e8       	ldi	r24, 0x80	; 128
    2846:	f8 0a       	sbc	r15, r24
    2848:	c8 82       	st	Y, r12
    284a:	d9 82       	std	Y+1, r13	; 0x01
    284c:	ea 82       	std	Y+2, r14	; 0x02
    284e:	fb 82       	std	Y+3, r15	; 0x03
    2850:	c6 01       	movw	r24, r12
    2852:	9f 77       	andi	r25, 0x7F	; 127
    2854:	df 91       	pop	r29
    2856:	cf 91       	pop	r28
    2858:	ff 90       	pop	r15
    285a:	ef 90       	pop	r14
    285c:	df 90       	pop	r13
    285e:	cf 90       	pop	r12
    2860:	bf 90       	pop	r11
    2862:	af 90       	pop	r10
    2864:	9f 90       	pop	r9
    2866:	8f 90       	pop	r8
    2868:	08 95       	ret

0000286a <rand_r>:
    286a:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <do_rand>
    286e:	08 95       	ret

00002870 <rand>:
    2870:	80 e0       	ldi	r24, 0x00	; 0
    2872:	91 e0       	ldi	r25, 0x01	; 1
    2874:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <do_rand>
    2878:	08 95       	ret

0000287a <srand>:
    287a:	a0 e0       	ldi	r26, 0x00	; 0
    287c:	b0 e0       	ldi	r27, 0x00	; 0
    287e:	80 93 00 01 	sts	0x0100, r24
    2882:	90 93 01 01 	sts	0x0101, r25
    2886:	a0 93 02 01 	sts	0x0102, r26
    288a:	b0 93 03 01 	sts	0x0103, r27
    288e:	08 95       	ret

00002890 <sprintf>:
    2890:	ae e0       	ldi	r26, 0x0E	; 14
    2892:	b0 e0       	ldi	r27, 0x00	; 0
    2894:	ee e4       	ldi	r30, 0x4E	; 78
    2896:	f4 e1       	ldi	r31, 0x14	; 20
    2898:	0c 94 22 17 	jmp	0x2e44	; 0x2e44 <__prologue_saves__+0x1c>
    289c:	0d 89       	ldd	r16, Y+21	; 0x15
    289e:	1e 89       	ldd	r17, Y+22	; 0x16
    28a0:	86 e0       	ldi	r24, 0x06	; 6
    28a2:	8c 83       	std	Y+4, r24	; 0x04
    28a4:	1a 83       	std	Y+2, r17	; 0x02
    28a6:	09 83       	std	Y+1, r16	; 0x01
    28a8:	8f ef       	ldi	r24, 0xFF	; 255
    28aa:	9f e7       	ldi	r25, 0x7F	; 127
    28ac:	9e 83       	std	Y+6, r25	; 0x06
    28ae:	8d 83       	std	Y+5, r24	; 0x05
    28b0:	ae 01       	movw	r20, r28
    28b2:	47 5e       	subi	r20, 0xE7	; 231
    28b4:	5f 4f       	sbci	r21, 0xFF	; 255
    28b6:	6f 89       	ldd	r22, Y+23	; 0x17
    28b8:	78 8d       	ldd	r23, Y+24	; 0x18
    28ba:	ce 01       	movw	r24, r28
    28bc:	01 96       	adiw	r24, 0x01	; 1
    28be:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <vfprintf>
    28c2:	ef 81       	ldd	r30, Y+7	; 0x07
    28c4:	f8 85       	ldd	r31, Y+8	; 0x08
    28c6:	e0 0f       	add	r30, r16
    28c8:	f1 1f       	adc	r31, r17
    28ca:	10 82       	st	Z, r1
    28cc:	2e 96       	adiw	r28, 0x0e	; 14
    28ce:	e4 e0       	ldi	r30, 0x04	; 4
    28d0:	0c 94 3e 17 	jmp	0x2e7c	; 0x2e7c <__epilogue_restores__+0x1c>

000028d4 <vfprintf>:
    28d4:	ac e0       	ldi	r26, 0x0C	; 12
    28d6:	b0 e0       	ldi	r27, 0x00	; 0
    28d8:	e0 e7       	ldi	r30, 0x70	; 112
    28da:	f4 e1       	ldi	r31, 0x14	; 20
    28dc:	0c 94 14 17 	jmp	0x2e28	; 0x2e28 <__prologue_saves__>
    28e0:	7c 01       	movw	r14, r24
    28e2:	6b 01       	movw	r12, r22
    28e4:	8a 01       	movw	r16, r20
    28e6:	fc 01       	movw	r30, r24
    28e8:	17 82       	std	Z+7, r1	; 0x07
    28ea:	16 82       	std	Z+6, r1	; 0x06
    28ec:	83 81       	ldd	r24, Z+3	; 0x03
    28ee:	81 ff       	sbrs	r24, 1
    28f0:	bd c1       	rjmp	.+890    	; 0x2c6c <vfprintf+0x398>
    28f2:	ce 01       	movw	r24, r28
    28f4:	01 96       	adiw	r24, 0x01	; 1
    28f6:	4c 01       	movw	r8, r24
    28f8:	f7 01       	movw	r30, r14
    28fa:	93 81       	ldd	r25, Z+3	; 0x03
    28fc:	f6 01       	movw	r30, r12
    28fe:	93 fd       	sbrc	r25, 3
    2900:	85 91       	lpm	r24, Z+
    2902:	93 ff       	sbrs	r25, 3
    2904:	81 91       	ld	r24, Z+
    2906:	6f 01       	movw	r12, r30
    2908:	88 23       	and	r24, r24
    290a:	09 f4       	brne	.+2      	; 0x290e <vfprintf+0x3a>
    290c:	ab c1       	rjmp	.+854    	; 0x2c64 <vfprintf+0x390>
    290e:	85 32       	cpi	r24, 0x25	; 37
    2910:	39 f4       	brne	.+14     	; 0x2920 <vfprintf+0x4c>
    2912:	93 fd       	sbrc	r25, 3
    2914:	85 91       	lpm	r24, Z+
    2916:	93 ff       	sbrs	r25, 3
    2918:	81 91       	ld	r24, Z+
    291a:	6f 01       	movw	r12, r30
    291c:	85 32       	cpi	r24, 0x25	; 37
    291e:	29 f4       	brne	.+10     	; 0x292a <vfprintf+0x56>
    2920:	b7 01       	movw	r22, r14
    2922:	90 e0       	ldi	r25, 0x00	; 0
    2924:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <fputc>
    2928:	e7 cf       	rjmp	.-50     	; 0x28f8 <vfprintf+0x24>
    292a:	51 2c       	mov	r5, r1
    292c:	31 2c       	mov	r3, r1
    292e:	20 e0       	ldi	r18, 0x00	; 0
    2930:	20 32       	cpi	r18, 0x20	; 32
    2932:	a0 f4       	brcc	.+40     	; 0x295c <vfprintf+0x88>
    2934:	8b 32       	cpi	r24, 0x2B	; 43
    2936:	69 f0       	breq	.+26     	; 0x2952 <vfprintf+0x7e>
    2938:	30 f4       	brcc	.+12     	; 0x2946 <vfprintf+0x72>
    293a:	80 32       	cpi	r24, 0x20	; 32
    293c:	59 f0       	breq	.+22     	; 0x2954 <vfprintf+0x80>
    293e:	83 32       	cpi	r24, 0x23	; 35
    2940:	69 f4       	brne	.+26     	; 0x295c <vfprintf+0x88>
    2942:	20 61       	ori	r18, 0x10	; 16
    2944:	2c c0       	rjmp	.+88     	; 0x299e <vfprintf+0xca>
    2946:	8d 32       	cpi	r24, 0x2D	; 45
    2948:	39 f0       	breq	.+14     	; 0x2958 <vfprintf+0x84>
    294a:	80 33       	cpi	r24, 0x30	; 48
    294c:	39 f4       	brne	.+14     	; 0x295c <vfprintf+0x88>
    294e:	21 60       	ori	r18, 0x01	; 1
    2950:	26 c0       	rjmp	.+76     	; 0x299e <vfprintf+0xca>
    2952:	22 60       	ori	r18, 0x02	; 2
    2954:	24 60       	ori	r18, 0x04	; 4
    2956:	23 c0       	rjmp	.+70     	; 0x299e <vfprintf+0xca>
    2958:	28 60       	ori	r18, 0x08	; 8
    295a:	21 c0       	rjmp	.+66     	; 0x299e <vfprintf+0xca>
    295c:	27 fd       	sbrc	r18, 7
    295e:	27 c0       	rjmp	.+78     	; 0x29ae <vfprintf+0xda>
    2960:	30 ed       	ldi	r19, 0xD0	; 208
    2962:	38 0f       	add	r19, r24
    2964:	3a 30       	cpi	r19, 0x0A	; 10
    2966:	78 f4       	brcc	.+30     	; 0x2986 <vfprintf+0xb2>
    2968:	26 ff       	sbrs	r18, 6
    296a:	06 c0       	rjmp	.+12     	; 0x2978 <vfprintf+0xa4>
    296c:	fa e0       	ldi	r31, 0x0A	; 10
    296e:	5f 9e       	mul	r5, r31
    2970:	30 0d       	add	r19, r0
    2972:	11 24       	eor	r1, r1
    2974:	53 2e       	mov	r5, r19
    2976:	13 c0       	rjmp	.+38     	; 0x299e <vfprintf+0xca>
    2978:	8a e0       	ldi	r24, 0x0A	; 10
    297a:	38 9e       	mul	r3, r24
    297c:	30 0d       	add	r19, r0
    297e:	11 24       	eor	r1, r1
    2980:	33 2e       	mov	r3, r19
    2982:	20 62       	ori	r18, 0x20	; 32
    2984:	0c c0       	rjmp	.+24     	; 0x299e <vfprintf+0xca>
    2986:	8e 32       	cpi	r24, 0x2E	; 46
    2988:	21 f4       	brne	.+8      	; 0x2992 <vfprintf+0xbe>
    298a:	26 fd       	sbrc	r18, 6
    298c:	6b c1       	rjmp	.+726    	; 0x2c64 <vfprintf+0x390>
    298e:	20 64       	ori	r18, 0x40	; 64
    2990:	06 c0       	rjmp	.+12     	; 0x299e <vfprintf+0xca>
    2992:	8c 36       	cpi	r24, 0x6C	; 108
    2994:	11 f4       	brne	.+4      	; 0x299a <vfprintf+0xc6>
    2996:	20 68       	ori	r18, 0x80	; 128
    2998:	02 c0       	rjmp	.+4      	; 0x299e <vfprintf+0xca>
    299a:	88 36       	cpi	r24, 0x68	; 104
    299c:	41 f4       	brne	.+16     	; 0x29ae <vfprintf+0xda>
    299e:	f6 01       	movw	r30, r12
    29a0:	93 fd       	sbrc	r25, 3
    29a2:	85 91       	lpm	r24, Z+
    29a4:	93 ff       	sbrs	r25, 3
    29a6:	81 91       	ld	r24, Z+
    29a8:	6f 01       	movw	r12, r30
    29aa:	81 11       	cpse	r24, r1
    29ac:	c1 cf       	rjmp	.-126    	; 0x2930 <vfprintf+0x5c>
    29ae:	98 2f       	mov	r25, r24
    29b0:	9f 7d       	andi	r25, 0xDF	; 223
    29b2:	95 54       	subi	r25, 0x45	; 69
    29b4:	93 30       	cpi	r25, 0x03	; 3
    29b6:	28 f4       	brcc	.+10     	; 0x29c2 <vfprintf+0xee>
    29b8:	0c 5f       	subi	r16, 0xFC	; 252
    29ba:	1f 4f       	sbci	r17, 0xFF	; 255
    29bc:	ff e3       	ldi	r31, 0x3F	; 63
    29be:	f9 83       	std	Y+1, r31	; 0x01
    29c0:	0d c0       	rjmp	.+26     	; 0x29dc <vfprintf+0x108>
    29c2:	83 36       	cpi	r24, 0x63	; 99
    29c4:	31 f0       	breq	.+12     	; 0x29d2 <vfprintf+0xfe>
    29c6:	83 37       	cpi	r24, 0x73	; 115
    29c8:	71 f0       	breq	.+28     	; 0x29e6 <vfprintf+0x112>
    29ca:	83 35       	cpi	r24, 0x53	; 83
    29cc:	09 f0       	breq	.+2      	; 0x29d0 <vfprintf+0xfc>
    29ce:	5b c0       	rjmp	.+182    	; 0x2a86 <vfprintf+0x1b2>
    29d0:	22 c0       	rjmp	.+68     	; 0x2a16 <vfprintf+0x142>
    29d2:	f8 01       	movw	r30, r16
    29d4:	80 81       	ld	r24, Z
    29d6:	89 83       	std	Y+1, r24	; 0x01
    29d8:	0e 5f       	subi	r16, 0xFE	; 254
    29da:	1f 4f       	sbci	r17, 0xFF	; 255
    29dc:	44 24       	eor	r4, r4
    29de:	43 94       	inc	r4
    29e0:	51 2c       	mov	r5, r1
    29e2:	54 01       	movw	r10, r8
    29e4:	15 c0       	rjmp	.+42     	; 0x2a10 <vfprintf+0x13c>
    29e6:	38 01       	movw	r6, r16
    29e8:	f2 e0       	ldi	r31, 0x02	; 2
    29ea:	6f 0e       	add	r6, r31
    29ec:	71 1c       	adc	r7, r1
    29ee:	f8 01       	movw	r30, r16
    29f0:	a0 80       	ld	r10, Z
    29f2:	b1 80       	ldd	r11, Z+1	; 0x01
    29f4:	26 ff       	sbrs	r18, 6
    29f6:	03 c0       	rjmp	.+6      	; 0x29fe <vfprintf+0x12a>
    29f8:	65 2d       	mov	r22, r5
    29fa:	70 e0       	ldi	r23, 0x00	; 0
    29fc:	02 c0       	rjmp	.+4      	; 0x2a02 <vfprintf+0x12e>
    29fe:	6f ef       	ldi	r22, 0xFF	; 255
    2a00:	7f ef       	ldi	r23, 0xFF	; 255
    2a02:	c5 01       	movw	r24, r10
    2a04:	2c 87       	std	Y+12, r18	; 0x0c
    2a06:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <strnlen>
    2a0a:	2c 01       	movw	r4, r24
    2a0c:	83 01       	movw	r16, r6
    2a0e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2a10:	2f 77       	andi	r18, 0x7F	; 127
    2a12:	22 2e       	mov	r2, r18
    2a14:	17 c0       	rjmp	.+46     	; 0x2a44 <vfprintf+0x170>
    2a16:	38 01       	movw	r6, r16
    2a18:	f2 e0       	ldi	r31, 0x02	; 2
    2a1a:	6f 0e       	add	r6, r31
    2a1c:	71 1c       	adc	r7, r1
    2a1e:	f8 01       	movw	r30, r16
    2a20:	a0 80       	ld	r10, Z
    2a22:	b1 80       	ldd	r11, Z+1	; 0x01
    2a24:	26 ff       	sbrs	r18, 6
    2a26:	03 c0       	rjmp	.+6      	; 0x2a2e <vfprintf+0x15a>
    2a28:	65 2d       	mov	r22, r5
    2a2a:	70 e0       	ldi	r23, 0x00	; 0
    2a2c:	02 c0       	rjmp	.+4      	; 0x2a32 <vfprintf+0x15e>
    2a2e:	6f ef       	ldi	r22, 0xFF	; 255
    2a30:	7f ef       	ldi	r23, 0xFF	; 255
    2a32:	c5 01       	movw	r24, r10
    2a34:	2c 87       	std	Y+12, r18	; 0x0c
    2a36:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <strnlen_P>
    2a3a:	2c 01       	movw	r4, r24
    2a3c:	2c 85       	ldd	r18, Y+12	; 0x0c
    2a3e:	20 68       	ori	r18, 0x80	; 128
    2a40:	22 2e       	mov	r2, r18
    2a42:	83 01       	movw	r16, r6
    2a44:	23 fc       	sbrc	r2, 3
    2a46:	1b c0       	rjmp	.+54     	; 0x2a7e <vfprintf+0x1aa>
    2a48:	83 2d       	mov	r24, r3
    2a4a:	90 e0       	ldi	r25, 0x00	; 0
    2a4c:	48 16       	cp	r4, r24
    2a4e:	59 06       	cpc	r5, r25
    2a50:	b0 f4       	brcc	.+44     	; 0x2a7e <vfprintf+0x1aa>
    2a52:	b7 01       	movw	r22, r14
    2a54:	80 e2       	ldi	r24, 0x20	; 32
    2a56:	90 e0       	ldi	r25, 0x00	; 0
    2a58:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <fputc>
    2a5c:	3a 94       	dec	r3
    2a5e:	f4 cf       	rjmp	.-24     	; 0x2a48 <vfprintf+0x174>
    2a60:	f5 01       	movw	r30, r10
    2a62:	27 fc       	sbrc	r2, 7
    2a64:	85 91       	lpm	r24, Z+
    2a66:	27 fe       	sbrs	r2, 7
    2a68:	81 91       	ld	r24, Z+
    2a6a:	5f 01       	movw	r10, r30
    2a6c:	b7 01       	movw	r22, r14
    2a6e:	90 e0       	ldi	r25, 0x00	; 0
    2a70:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <fputc>
    2a74:	31 10       	cpse	r3, r1
    2a76:	3a 94       	dec	r3
    2a78:	f1 e0       	ldi	r31, 0x01	; 1
    2a7a:	4f 1a       	sub	r4, r31
    2a7c:	51 08       	sbc	r5, r1
    2a7e:	41 14       	cp	r4, r1
    2a80:	51 04       	cpc	r5, r1
    2a82:	71 f7       	brne	.-36     	; 0x2a60 <vfprintf+0x18c>
    2a84:	e5 c0       	rjmp	.+458    	; 0x2c50 <vfprintf+0x37c>
    2a86:	84 36       	cpi	r24, 0x64	; 100
    2a88:	11 f0       	breq	.+4      	; 0x2a8e <vfprintf+0x1ba>
    2a8a:	89 36       	cpi	r24, 0x69	; 105
    2a8c:	39 f5       	brne	.+78     	; 0x2adc <vfprintf+0x208>
    2a8e:	f8 01       	movw	r30, r16
    2a90:	27 ff       	sbrs	r18, 7
    2a92:	07 c0       	rjmp	.+14     	; 0x2aa2 <vfprintf+0x1ce>
    2a94:	60 81       	ld	r22, Z
    2a96:	71 81       	ldd	r23, Z+1	; 0x01
    2a98:	82 81       	ldd	r24, Z+2	; 0x02
    2a9a:	93 81       	ldd	r25, Z+3	; 0x03
    2a9c:	0c 5f       	subi	r16, 0xFC	; 252
    2a9e:	1f 4f       	sbci	r17, 0xFF	; 255
    2aa0:	08 c0       	rjmp	.+16     	; 0x2ab2 <vfprintf+0x1de>
    2aa2:	60 81       	ld	r22, Z
    2aa4:	71 81       	ldd	r23, Z+1	; 0x01
    2aa6:	88 27       	eor	r24, r24
    2aa8:	77 fd       	sbrc	r23, 7
    2aaa:	80 95       	com	r24
    2aac:	98 2f       	mov	r25, r24
    2aae:	0e 5f       	subi	r16, 0xFE	; 254
    2ab0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ab2:	2f 76       	andi	r18, 0x6F	; 111
    2ab4:	b2 2e       	mov	r11, r18
    2ab6:	97 ff       	sbrs	r25, 7
    2ab8:	09 c0       	rjmp	.+18     	; 0x2acc <vfprintf+0x1f8>
    2aba:	90 95       	com	r25
    2abc:	80 95       	com	r24
    2abe:	70 95       	com	r23
    2ac0:	61 95       	neg	r22
    2ac2:	7f 4f       	sbci	r23, 0xFF	; 255
    2ac4:	8f 4f       	sbci	r24, 0xFF	; 255
    2ac6:	9f 4f       	sbci	r25, 0xFF	; 255
    2ac8:	20 68       	ori	r18, 0x80	; 128
    2aca:	b2 2e       	mov	r11, r18
    2acc:	2a e0       	ldi	r18, 0x0A	; 10
    2ace:	30 e0       	ldi	r19, 0x00	; 0
    2ad0:	a4 01       	movw	r20, r8
    2ad2:	0e 94 84 16 	call	0x2d08	; 0x2d08 <__ultoa_invert>
    2ad6:	a8 2e       	mov	r10, r24
    2ad8:	a8 18       	sub	r10, r8
    2ada:	44 c0       	rjmp	.+136    	; 0x2b64 <vfprintf+0x290>
    2adc:	85 37       	cpi	r24, 0x75	; 117
    2ade:	29 f4       	brne	.+10     	; 0x2aea <vfprintf+0x216>
    2ae0:	2f 7e       	andi	r18, 0xEF	; 239
    2ae2:	b2 2e       	mov	r11, r18
    2ae4:	2a e0       	ldi	r18, 0x0A	; 10
    2ae6:	30 e0       	ldi	r19, 0x00	; 0
    2ae8:	25 c0       	rjmp	.+74     	; 0x2b34 <vfprintf+0x260>
    2aea:	f2 2f       	mov	r31, r18
    2aec:	f9 7f       	andi	r31, 0xF9	; 249
    2aee:	bf 2e       	mov	r11, r31
    2af0:	8f 36       	cpi	r24, 0x6F	; 111
    2af2:	c1 f0       	breq	.+48     	; 0x2b24 <vfprintf+0x250>
    2af4:	18 f4       	brcc	.+6      	; 0x2afc <vfprintf+0x228>
    2af6:	88 35       	cpi	r24, 0x58	; 88
    2af8:	79 f0       	breq	.+30     	; 0x2b18 <vfprintf+0x244>
    2afa:	b4 c0       	rjmp	.+360    	; 0x2c64 <vfprintf+0x390>
    2afc:	80 37       	cpi	r24, 0x70	; 112
    2afe:	19 f0       	breq	.+6      	; 0x2b06 <vfprintf+0x232>
    2b00:	88 37       	cpi	r24, 0x78	; 120
    2b02:	21 f0       	breq	.+8      	; 0x2b0c <vfprintf+0x238>
    2b04:	af c0       	rjmp	.+350    	; 0x2c64 <vfprintf+0x390>
    2b06:	2f 2f       	mov	r18, r31
    2b08:	20 61       	ori	r18, 0x10	; 16
    2b0a:	b2 2e       	mov	r11, r18
    2b0c:	b4 fe       	sbrs	r11, 4
    2b0e:	0d c0       	rjmp	.+26     	; 0x2b2a <vfprintf+0x256>
    2b10:	8b 2d       	mov	r24, r11
    2b12:	84 60       	ori	r24, 0x04	; 4
    2b14:	b8 2e       	mov	r11, r24
    2b16:	09 c0       	rjmp	.+18     	; 0x2b2a <vfprintf+0x256>
    2b18:	24 ff       	sbrs	r18, 4
    2b1a:	0a c0       	rjmp	.+20     	; 0x2b30 <vfprintf+0x25c>
    2b1c:	9f 2f       	mov	r25, r31
    2b1e:	96 60       	ori	r25, 0x06	; 6
    2b20:	b9 2e       	mov	r11, r25
    2b22:	06 c0       	rjmp	.+12     	; 0x2b30 <vfprintf+0x25c>
    2b24:	28 e0       	ldi	r18, 0x08	; 8
    2b26:	30 e0       	ldi	r19, 0x00	; 0
    2b28:	05 c0       	rjmp	.+10     	; 0x2b34 <vfprintf+0x260>
    2b2a:	20 e1       	ldi	r18, 0x10	; 16
    2b2c:	30 e0       	ldi	r19, 0x00	; 0
    2b2e:	02 c0       	rjmp	.+4      	; 0x2b34 <vfprintf+0x260>
    2b30:	20 e1       	ldi	r18, 0x10	; 16
    2b32:	32 e0       	ldi	r19, 0x02	; 2
    2b34:	f8 01       	movw	r30, r16
    2b36:	b7 fe       	sbrs	r11, 7
    2b38:	07 c0       	rjmp	.+14     	; 0x2b48 <vfprintf+0x274>
    2b3a:	60 81       	ld	r22, Z
    2b3c:	71 81       	ldd	r23, Z+1	; 0x01
    2b3e:	82 81       	ldd	r24, Z+2	; 0x02
    2b40:	93 81       	ldd	r25, Z+3	; 0x03
    2b42:	0c 5f       	subi	r16, 0xFC	; 252
    2b44:	1f 4f       	sbci	r17, 0xFF	; 255
    2b46:	06 c0       	rjmp	.+12     	; 0x2b54 <vfprintf+0x280>
    2b48:	60 81       	ld	r22, Z
    2b4a:	71 81       	ldd	r23, Z+1	; 0x01
    2b4c:	80 e0       	ldi	r24, 0x00	; 0
    2b4e:	90 e0       	ldi	r25, 0x00	; 0
    2b50:	0e 5f       	subi	r16, 0xFE	; 254
    2b52:	1f 4f       	sbci	r17, 0xFF	; 255
    2b54:	a4 01       	movw	r20, r8
    2b56:	0e 94 84 16 	call	0x2d08	; 0x2d08 <__ultoa_invert>
    2b5a:	a8 2e       	mov	r10, r24
    2b5c:	a8 18       	sub	r10, r8
    2b5e:	fb 2d       	mov	r31, r11
    2b60:	ff 77       	andi	r31, 0x7F	; 127
    2b62:	bf 2e       	mov	r11, r31
    2b64:	b6 fe       	sbrs	r11, 6
    2b66:	0b c0       	rjmp	.+22     	; 0x2b7e <vfprintf+0x2aa>
    2b68:	2b 2d       	mov	r18, r11
    2b6a:	2e 7f       	andi	r18, 0xFE	; 254
    2b6c:	a5 14       	cp	r10, r5
    2b6e:	50 f4       	brcc	.+20     	; 0x2b84 <vfprintf+0x2b0>
    2b70:	b4 fe       	sbrs	r11, 4
    2b72:	0a c0       	rjmp	.+20     	; 0x2b88 <vfprintf+0x2b4>
    2b74:	b2 fc       	sbrc	r11, 2
    2b76:	08 c0       	rjmp	.+16     	; 0x2b88 <vfprintf+0x2b4>
    2b78:	2b 2d       	mov	r18, r11
    2b7a:	2e 7e       	andi	r18, 0xEE	; 238
    2b7c:	05 c0       	rjmp	.+10     	; 0x2b88 <vfprintf+0x2b4>
    2b7e:	7a 2c       	mov	r7, r10
    2b80:	2b 2d       	mov	r18, r11
    2b82:	03 c0       	rjmp	.+6      	; 0x2b8a <vfprintf+0x2b6>
    2b84:	7a 2c       	mov	r7, r10
    2b86:	01 c0       	rjmp	.+2      	; 0x2b8a <vfprintf+0x2b6>
    2b88:	75 2c       	mov	r7, r5
    2b8a:	24 ff       	sbrs	r18, 4
    2b8c:	0d c0       	rjmp	.+26     	; 0x2ba8 <vfprintf+0x2d4>
    2b8e:	fe 01       	movw	r30, r28
    2b90:	ea 0d       	add	r30, r10
    2b92:	f1 1d       	adc	r31, r1
    2b94:	80 81       	ld	r24, Z
    2b96:	80 33       	cpi	r24, 0x30	; 48
    2b98:	11 f4       	brne	.+4      	; 0x2b9e <vfprintf+0x2ca>
    2b9a:	29 7e       	andi	r18, 0xE9	; 233
    2b9c:	09 c0       	rjmp	.+18     	; 0x2bb0 <vfprintf+0x2dc>
    2b9e:	22 ff       	sbrs	r18, 2
    2ba0:	06 c0       	rjmp	.+12     	; 0x2bae <vfprintf+0x2da>
    2ba2:	73 94       	inc	r7
    2ba4:	73 94       	inc	r7
    2ba6:	04 c0       	rjmp	.+8      	; 0x2bb0 <vfprintf+0x2dc>
    2ba8:	82 2f       	mov	r24, r18
    2baa:	86 78       	andi	r24, 0x86	; 134
    2bac:	09 f0       	breq	.+2      	; 0x2bb0 <vfprintf+0x2dc>
    2bae:	73 94       	inc	r7
    2bb0:	23 fd       	sbrc	r18, 3
    2bb2:	13 c0       	rjmp	.+38     	; 0x2bda <vfprintf+0x306>
    2bb4:	20 ff       	sbrs	r18, 0
    2bb6:	06 c0       	rjmp	.+12     	; 0x2bc4 <vfprintf+0x2f0>
    2bb8:	5a 2c       	mov	r5, r10
    2bba:	73 14       	cp	r7, r3
    2bbc:	18 f4       	brcc	.+6      	; 0x2bc4 <vfprintf+0x2f0>
    2bbe:	53 0c       	add	r5, r3
    2bc0:	57 18       	sub	r5, r7
    2bc2:	73 2c       	mov	r7, r3
    2bc4:	73 14       	cp	r7, r3
    2bc6:	68 f4       	brcc	.+26     	; 0x2be2 <vfprintf+0x30e>
    2bc8:	b7 01       	movw	r22, r14
    2bca:	80 e2       	ldi	r24, 0x20	; 32
    2bcc:	90 e0       	ldi	r25, 0x00	; 0
    2bce:	2c 87       	std	Y+12, r18	; 0x0c
    2bd0:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <fputc>
    2bd4:	73 94       	inc	r7
    2bd6:	2c 85       	ldd	r18, Y+12	; 0x0c
    2bd8:	f5 cf       	rjmp	.-22     	; 0x2bc4 <vfprintf+0x2f0>
    2bda:	73 14       	cp	r7, r3
    2bdc:	10 f4       	brcc	.+4      	; 0x2be2 <vfprintf+0x30e>
    2bde:	37 18       	sub	r3, r7
    2be0:	01 c0       	rjmp	.+2      	; 0x2be4 <vfprintf+0x310>
    2be2:	31 2c       	mov	r3, r1
    2be4:	24 ff       	sbrs	r18, 4
    2be6:	12 c0       	rjmp	.+36     	; 0x2c0c <vfprintf+0x338>
    2be8:	b7 01       	movw	r22, r14
    2bea:	80 e3       	ldi	r24, 0x30	; 48
    2bec:	90 e0       	ldi	r25, 0x00	; 0
    2bee:	2c 87       	std	Y+12, r18	; 0x0c
    2bf0:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <fputc>
    2bf4:	2c 85       	ldd	r18, Y+12	; 0x0c
    2bf6:	22 ff       	sbrs	r18, 2
    2bf8:	17 c0       	rjmp	.+46     	; 0x2c28 <vfprintf+0x354>
    2bfa:	21 ff       	sbrs	r18, 1
    2bfc:	03 c0       	rjmp	.+6      	; 0x2c04 <vfprintf+0x330>
    2bfe:	88 e5       	ldi	r24, 0x58	; 88
    2c00:	90 e0       	ldi	r25, 0x00	; 0
    2c02:	02 c0       	rjmp	.+4      	; 0x2c08 <vfprintf+0x334>
    2c04:	88 e7       	ldi	r24, 0x78	; 120
    2c06:	90 e0       	ldi	r25, 0x00	; 0
    2c08:	b7 01       	movw	r22, r14
    2c0a:	0c c0       	rjmp	.+24     	; 0x2c24 <vfprintf+0x350>
    2c0c:	82 2f       	mov	r24, r18
    2c0e:	86 78       	andi	r24, 0x86	; 134
    2c10:	59 f0       	breq	.+22     	; 0x2c28 <vfprintf+0x354>
    2c12:	21 fd       	sbrc	r18, 1
    2c14:	02 c0       	rjmp	.+4      	; 0x2c1a <vfprintf+0x346>
    2c16:	80 e2       	ldi	r24, 0x20	; 32
    2c18:	01 c0       	rjmp	.+2      	; 0x2c1c <vfprintf+0x348>
    2c1a:	8b e2       	ldi	r24, 0x2B	; 43
    2c1c:	27 fd       	sbrc	r18, 7
    2c1e:	8d e2       	ldi	r24, 0x2D	; 45
    2c20:	b7 01       	movw	r22, r14
    2c22:	90 e0       	ldi	r25, 0x00	; 0
    2c24:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <fputc>
    2c28:	a5 14       	cp	r10, r5
    2c2a:	38 f4       	brcc	.+14     	; 0x2c3a <vfprintf+0x366>
    2c2c:	b7 01       	movw	r22, r14
    2c2e:	80 e3       	ldi	r24, 0x30	; 48
    2c30:	90 e0       	ldi	r25, 0x00	; 0
    2c32:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <fputc>
    2c36:	5a 94       	dec	r5
    2c38:	f7 cf       	rjmp	.-18     	; 0x2c28 <vfprintf+0x354>
    2c3a:	aa 94       	dec	r10
    2c3c:	f4 01       	movw	r30, r8
    2c3e:	ea 0d       	add	r30, r10
    2c40:	f1 1d       	adc	r31, r1
    2c42:	80 81       	ld	r24, Z
    2c44:	b7 01       	movw	r22, r14
    2c46:	90 e0       	ldi	r25, 0x00	; 0
    2c48:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <fputc>
    2c4c:	a1 10       	cpse	r10, r1
    2c4e:	f5 cf       	rjmp	.-22     	; 0x2c3a <vfprintf+0x366>
    2c50:	33 20       	and	r3, r3
    2c52:	09 f4       	brne	.+2      	; 0x2c56 <vfprintf+0x382>
    2c54:	51 ce       	rjmp	.-862    	; 0x28f8 <vfprintf+0x24>
    2c56:	b7 01       	movw	r22, r14
    2c58:	80 e2       	ldi	r24, 0x20	; 32
    2c5a:	90 e0       	ldi	r25, 0x00	; 0
    2c5c:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <fputc>
    2c60:	3a 94       	dec	r3
    2c62:	f6 cf       	rjmp	.-20     	; 0x2c50 <vfprintf+0x37c>
    2c64:	f7 01       	movw	r30, r14
    2c66:	86 81       	ldd	r24, Z+6	; 0x06
    2c68:	97 81       	ldd	r25, Z+7	; 0x07
    2c6a:	02 c0       	rjmp	.+4      	; 0x2c70 <vfprintf+0x39c>
    2c6c:	8f ef       	ldi	r24, 0xFF	; 255
    2c6e:	9f ef       	ldi	r25, 0xFF	; 255
    2c70:	2c 96       	adiw	r28, 0x0c	; 12
    2c72:	e2 e1       	ldi	r30, 0x12	; 18
    2c74:	0c 94 30 17 	jmp	0x2e60	; 0x2e60 <__epilogue_restores__>

00002c78 <strnlen_P>:
    2c78:	fc 01       	movw	r30, r24
    2c7a:	05 90       	lpm	r0, Z+
    2c7c:	61 50       	subi	r22, 0x01	; 1
    2c7e:	70 40       	sbci	r23, 0x00	; 0
    2c80:	01 10       	cpse	r0, r1
    2c82:	d8 f7       	brcc	.-10     	; 0x2c7a <strnlen_P+0x2>
    2c84:	80 95       	com	r24
    2c86:	90 95       	com	r25
    2c88:	8e 0f       	add	r24, r30
    2c8a:	9f 1f       	adc	r25, r31
    2c8c:	08 95       	ret

00002c8e <strnlen>:
    2c8e:	fc 01       	movw	r30, r24
    2c90:	61 50       	subi	r22, 0x01	; 1
    2c92:	70 40       	sbci	r23, 0x00	; 0
    2c94:	01 90       	ld	r0, Z+
    2c96:	01 10       	cpse	r0, r1
    2c98:	d8 f7       	brcc	.-10     	; 0x2c90 <strnlen+0x2>
    2c9a:	80 95       	com	r24
    2c9c:	90 95       	com	r25
    2c9e:	8e 0f       	add	r24, r30
    2ca0:	9f 1f       	adc	r25, r31
    2ca2:	08 95       	ret

00002ca4 <fputc>:
    2ca4:	0f 93       	push	r16
    2ca6:	1f 93       	push	r17
    2ca8:	cf 93       	push	r28
    2caa:	df 93       	push	r29
    2cac:	18 2f       	mov	r17, r24
    2cae:	09 2f       	mov	r16, r25
    2cb0:	eb 01       	movw	r28, r22
    2cb2:	8b 81       	ldd	r24, Y+3	; 0x03
    2cb4:	81 fd       	sbrc	r24, 1
    2cb6:	03 c0       	rjmp	.+6      	; 0x2cbe <fputc+0x1a>
    2cb8:	8f ef       	ldi	r24, 0xFF	; 255
    2cba:	9f ef       	ldi	r25, 0xFF	; 255
    2cbc:	20 c0       	rjmp	.+64     	; 0x2cfe <fputc+0x5a>
    2cbe:	82 ff       	sbrs	r24, 2
    2cc0:	10 c0       	rjmp	.+32     	; 0x2ce2 <fputc+0x3e>
    2cc2:	4e 81       	ldd	r20, Y+6	; 0x06
    2cc4:	5f 81       	ldd	r21, Y+7	; 0x07
    2cc6:	2c 81       	ldd	r18, Y+4	; 0x04
    2cc8:	3d 81       	ldd	r19, Y+5	; 0x05
    2cca:	42 17       	cp	r20, r18
    2ccc:	53 07       	cpc	r21, r19
    2cce:	7c f4       	brge	.+30     	; 0x2cee <fputc+0x4a>
    2cd0:	e8 81       	ld	r30, Y
    2cd2:	f9 81       	ldd	r31, Y+1	; 0x01
    2cd4:	9f 01       	movw	r18, r30
    2cd6:	2f 5f       	subi	r18, 0xFF	; 255
    2cd8:	3f 4f       	sbci	r19, 0xFF	; 255
    2cda:	39 83       	std	Y+1, r19	; 0x01
    2cdc:	28 83       	st	Y, r18
    2cde:	10 83       	st	Z, r17
    2ce0:	06 c0       	rjmp	.+12     	; 0x2cee <fputc+0x4a>
    2ce2:	e8 85       	ldd	r30, Y+8	; 0x08
    2ce4:	f9 85       	ldd	r31, Y+9	; 0x09
    2ce6:	81 2f       	mov	r24, r17
    2ce8:	09 95       	icall
    2cea:	89 2b       	or	r24, r25
    2cec:	29 f7       	brne	.-54     	; 0x2cb8 <fputc+0x14>
    2cee:	2e 81       	ldd	r18, Y+6	; 0x06
    2cf0:	3f 81       	ldd	r19, Y+7	; 0x07
    2cf2:	2f 5f       	subi	r18, 0xFF	; 255
    2cf4:	3f 4f       	sbci	r19, 0xFF	; 255
    2cf6:	3f 83       	std	Y+7, r19	; 0x07
    2cf8:	2e 83       	std	Y+6, r18	; 0x06
    2cfa:	81 2f       	mov	r24, r17
    2cfc:	90 2f       	mov	r25, r16
    2cfe:	df 91       	pop	r29
    2d00:	cf 91       	pop	r28
    2d02:	1f 91       	pop	r17
    2d04:	0f 91       	pop	r16
    2d06:	08 95       	ret

00002d08 <__ultoa_invert>:
    2d08:	fa 01       	movw	r30, r20
    2d0a:	aa 27       	eor	r26, r26
    2d0c:	28 30       	cpi	r18, 0x08	; 8
    2d0e:	51 f1       	breq	.+84     	; 0x2d64 <__ultoa_invert+0x5c>
    2d10:	20 31       	cpi	r18, 0x10	; 16
    2d12:	81 f1       	breq	.+96     	; 0x2d74 <__ultoa_invert+0x6c>
    2d14:	e8 94       	clt
    2d16:	6f 93       	push	r22
    2d18:	6e 7f       	andi	r22, 0xFE	; 254
    2d1a:	6e 5f       	subi	r22, 0xFE	; 254
    2d1c:	7f 4f       	sbci	r23, 0xFF	; 255
    2d1e:	8f 4f       	sbci	r24, 0xFF	; 255
    2d20:	9f 4f       	sbci	r25, 0xFF	; 255
    2d22:	af 4f       	sbci	r26, 0xFF	; 255
    2d24:	b1 e0       	ldi	r27, 0x01	; 1
    2d26:	3e d0       	rcall	.+124    	; 0x2da4 <__ultoa_invert+0x9c>
    2d28:	b4 e0       	ldi	r27, 0x04	; 4
    2d2a:	3c d0       	rcall	.+120    	; 0x2da4 <__ultoa_invert+0x9c>
    2d2c:	67 0f       	add	r22, r23
    2d2e:	78 1f       	adc	r23, r24
    2d30:	89 1f       	adc	r24, r25
    2d32:	9a 1f       	adc	r25, r26
    2d34:	a1 1d       	adc	r26, r1
    2d36:	68 0f       	add	r22, r24
    2d38:	79 1f       	adc	r23, r25
    2d3a:	8a 1f       	adc	r24, r26
    2d3c:	91 1d       	adc	r25, r1
    2d3e:	a1 1d       	adc	r26, r1
    2d40:	6a 0f       	add	r22, r26
    2d42:	71 1d       	adc	r23, r1
    2d44:	81 1d       	adc	r24, r1
    2d46:	91 1d       	adc	r25, r1
    2d48:	a1 1d       	adc	r26, r1
    2d4a:	20 d0       	rcall	.+64     	; 0x2d8c <__ultoa_invert+0x84>
    2d4c:	09 f4       	brne	.+2      	; 0x2d50 <__ultoa_invert+0x48>
    2d4e:	68 94       	set
    2d50:	3f 91       	pop	r19
    2d52:	2a e0       	ldi	r18, 0x0A	; 10
    2d54:	26 9f       	mul	r18, r22
    2d56:	11 24       	eor	r1, r1
    2d58:	30 19       	sub	r19, r0
    2d5a:	30 5d       	subi	r19, 0xD0	; 208
    2d5c:	31 93       	st	Z+, r19
    2d5e:	de f6       	brtc	.-74     	; 0x2d16 <__ultoa_invert+0xe>
    2d60:	cf 01       	movw	r24, r30
    2d62:	08 95       	ret
    2d64:	46 2f       	mov	r20, r22
    2d66:	47 70       	andi	r20, 0x07	; 7
    2d68:	40 5d       	subi	r20, 0xD0	; 208
    2d6a:	41 93       	st	Z+, r20
    2d6c:	b3 e0       	ldi	r27, 0x03	; 3
    2d6e:	0f d0       	rcall	.+30     	; 0x2d8e <__ultoa_invert+0x86>
    2d70:	c9 f7       	brne	.-14     	; 0x2d64 <__ultoa_invert+0x5c>
    2d72:	f6 cf       	rjmp	.-20     	; 0x2d60 <__ultoa_invert+0x58>
    2d74:	46 2f       	mov	r20, r22
    2d76:	4f 70       	andi	r20, 0x0F	; 15
    2d78:	40 5d       	subi	r20, 0xD0	; 208
    2d7a:	4a 33       	cpi	r20, 0x3A	; 58
    2d7c:	18 f0       	brcs	.+6      	; 0x2d84 <__ultoa_invert+0x7c>
    2d7e:	49 5d       	subi	r20, 0xD9	; 217
    2d80:	31 fd       	sbrc	r19, 1
    2d82:	40 52       	subi	r20, 0x20	; 32
    2d84:	41 93       	st	Z+, r20
    2d86:	02 d0       	rcall	.+4      	; 0x2d8c <__ultoa_invert+0x84>
    2d88:	a9 f7       	brne	.-22     	; 0x2d74 <__ultoa_invert+0x6c>
    2d8a:	ea cf       	rjmp	.-44     	; 0x2d60 <__ultoa_invert+0x58>
    2d8c:	b4 e0       	ldi	r27, 0x04	; 4
    2d8e:	a6 95       	lsr	r26
    2d90:	97 95       	ror	r25
    2d92:	87 95       	ror	r24
    2d94:	77 95       	ror	r23
    2d96:	67 95       	ror	r22
    2d98:	ba 95       	dec	r27
    2d9a:	c9 f7       	brne	.-14     	; 0x2d8e <__ultoa_invert+0x86>
    2d9c:	00 97       	sbiw	r24, 0x00	; 0
    2d9e:	61 05       	cpc	r22, r1
    2da0:	71 05       	cpc	r23, r1
    2da2:	08 95       	ret
    2da4:	9b 01       	movw	r18, r22
    2da6:	ac 01       	movw	r20, r24
    2da8:	0a 2e       	mov	r0, r26
    2daa:	06 94       	lsr	r0
    2dac:	57 95       	ror	r21
    2dae:	47 95       	ror	r20
    2db0:	37 95       	ror	r19
    2db2:	27 95       	ror	r18
    2db4:	ba 95       	dec	r27
    2db6:	c9 f7       	brne	.-14     	; 0x2daa <__ultoa_invert+0xa2>
    2db8:	62 0f       	add	r22, r18
    2dba:	73 1f       	adc	r23, r19
    2dbc:	84 1f       	adc	r24, r20
    2dbe:	95 1f       	adc	r25, r21
    2dc0:	a0 1d       	adc	r26, r0
    2dc2:	08 95       	ret

00002dc4 <__divmodsi4>:
    2dc4:	05 2e       	mov	r0, r21
    2dc6:	97 fb       	bst	r25, 7
    2dc8:	1e f4       	brtc	.+6      	; 0x2dd0 <__divmodsi4+0xc>
    2dca:	00 94       	com	r0
    2dcc:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <__negsi2>
    2dd0:	57 fd       	sbrc	r21, 7
    2dd2:	07 d0       	rcall	.+14     	; 0x2de2 <__divmodsi4_neg2>
    2dd4:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <__udivmodsi4>
    2dd8:	07 fc       	sbrc	r0, 7
    2dda:	03 d0       	rcall	.+6      	; 0x2de2 <__divmodsi4_neg2>
    2ddc:	4e f4       	brtc	.+18     	; 0x2df0 <__divmodsi4_exit>
    2dde:	0c 94 f9 16 	jmp	0x2df2	; 0x2df2 <__negsi2>

00002de2 <__divmodsi4_neg2>:
    2de2:	50 95       	com	r21
    2de4:	40 95       	com	r20
    2de6:	30 95       	com	r19
    2de8:	21 95       	neg	r18
    2dea:	3f 4f       	sbci	r19, 0xFF	; 255
    2dec:	4f 4f       	sbci	r20, 0xFF	; 255
    2dee:	5f 4f       	sbci	r21, 0xFF	; 255

00002df0 <__divmodsi4_exit>:
    2df0:	08 95       	ret

00002df2 <__negsi2>:
    2df2:	90 95       	com	r25
    2df4:	80 95       	com	r24
    2df6:	70 95       	com	r23
    2df8:	61 95       	neg	r22
    2dfa:	7f 4f       	sbci	r23, 0xFF	; 255
    2dfc:	8f 4f       	sbci	r24, 0xFF	; 255
    2dfe:	9f 4f       	sbci	r25, 0xFF	; 255
    2e00:	08 95       	ret

00002e02 <__muluhisi3>:
    2e02:	0e 94 6d 17 	call	0x2eda	; 0x2eda <__umulhisi3>
    2e06:	a5 9f       	mul	r26, r21
    2e08:	90 0d       	add	r25, r0
    2e0a:	b4 9f       	mul	r27, r20
    2e0c:	90 0d       	add	r25, r0
    2e0e:	a4 9f       	mul	r26, r20
    2e10:	80 0d       	add	r24, r0
    2e12:	91 1d       	adc	r25, r1
    2e14:	11 24       	eor	r1, r1
    2e16:	08 95       	ret

00002e18 <__mulshisi3>:
    2e18:	b7 ff       	sbrs	r27, 7
    2e1a:	0c 94 01 17 	jmp	0x2e02	; 0x2e02 <__muluhisi3>

00002e1e <__mulohisi3>:
    2e1e:	0e 94 01 17 	call	0x2e02	; 0x2e02 <__muluhisi3>
    2e22:	82 1b       	sub	r24, r18
    2e24:	93 0b       	sbc	r25, r19
    2e26:	08 95       	ret

00002e28 <__prologue_saves__>:
    2e28:	2f 92       	push	r2
    2e2a:	3f 92       	push	r3
    2e2c:	4f 92       	push	r4
    2e2e:	5f 92       	push	r5
    2e30:	6f 92       	push	r6
    2e32:	7f 92       	push	r7
    2e34:	8f 92       	push	r8
    2e36:	9f 92       	push	r9
    2e38:	af 92       	push	r10
    2e3a:	bf 92       	push	r11
    2e3c:	cf 92       	push	r12
    2e3e:	df 92       	push	r13
    2e40:	ef 92       	push	r14
    2e42:	ff 92       	push	r15
    2e44:	0f 93       	push	r16
    2e46:	1f 93       	push	r17
    2e48:	cf 93       	push	r28
    2e4a:	df 93       	push	r29
    2e4c:	cd b7       	in	r28, 0x3d	; 61
    2e4e:	de b7       	in	r29, 0x3e	; 62
    2e50:	ca 1b       	sub	r28, r26
    2e52:	db 0b       	sbc	r29, r27
    2e54:	0f b6       	in	r0, 0x3f	; 63
    2e56:	f8 94       	cli
    2e58:	de bf       	out	0x3e, r29	; 62
    2e5a:	0f be       	out	0x3f, r0	; 63
    2e5c:	cd bf       	out	0x3d, r28	; 61
    2e5e:	09 94       	ijmp

00002e60 <__epilogue_restores__>:
    2e60:	2a 88       	ldd	r2, Y+18	; 0x12
    2e62:	39 88       	ldd	r3, Y+17	; 0x11
    2e64:	48 88       	ldd	r4, Y+16	; 0x10
    2e66:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e68:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e6a:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e6c:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e6e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e70:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e72:	b9 84       	ldd	r11, Y+9	; 0x09
    2e74:	c8 84       	ldd	r12, Y+8	; 0x08
    2e76:	df 80       	ldd	r13, Y+7	; 0x07
    2e78:	ee 80       	ldd	r14, Y+6	; 0x06
    2e7a:	fd 80       	ldd	r15, Y+5	; 0x05
    2e7c:	0c 81       	ldd	r16, Y+4	; 0x04
    2e7e:	1b 81       	ldd	r17, Y+3	; 0x03
    2e80:	aa 81       	ldd	r26, Y+2	; 0x02
    2e82:	b9 81       	ldd	r27, Y+1	; 0x01
    2e84:	ce 0f       	add	r28, r30
    2e86:	d1 1d       	adc	r29, r1
    2e88:	0f b6       	in	r0, 0x3f	; 63
    2e8a:	f8 94       	cli
    2e8c:	de bf       	out	0x3e, r29	; 62
    2e8e:	0f be       	out	0x3f, r0	; 63
    2e90:	cd bf       	out	0x3d, r28	; 61
    2e92:	ed 01       	movw	r28, r26
    2e94:	08 95       	ret

00002e96 <__udivmodsi4>:
    2e96:	a1 e2       	ldi	r26, 0x21	; 33
    2e98:	1a 2e       	mov	r1, r26
    2e9a:	aa 1b       	sub	r26, r26
    2e9c:	bb 1b       	sub	r27, r27
    2e9e:	fd 01       	movw	r30, r26
    2ea0:	0d c0       	rjmp	.+26     	; 0x2ebc <__udivmodsi4_ep>

00002ea2 <__udivmodsi4_loop>:
    2ea2:	aa 1f       	adc	r26, r26
    2ea4:	bb 1f       	adc	r27, r27
    2ea6:	ee 1f       	adc	r30, r30
    2ea8:	ff 1f       	adc	r31, r31
    2eaa:	a2 17       	cp	r26, r18
    2eac:	b3 07       	cpc	r27, r19
    2eae:	e4 07       	cpc	r30, r20
    2eb0:	f5 07       	cpc	r31, r21
    2eb2:	20 f0       	brcs	.+8      	; 0x2ebc <__udivmodsi4_ep>
    2eb4:	a2 1b       	sub	r26, r18
    2eb6:	b3 0b       	sbc	r27, r19
    2eb8:	e4 0b       	sbc	r30, r20
    2eba:	f5 0b       	sbc	r31, r21

00002ebc <__udivmodsi4_ep>:
    2ebc:	66 1f       	adc	r22, r22
    2ebe:	77 1f       	adc	r23, r23
    2ec0:	88 1f       	adc	r24, r24
    2ec2:	99 1f       	adc	r25, r25
    2ec4:	1a 94       	dec	r1
    2ec6:	69 f7       	brne	.-38     	; 0x2ea2 <__udivmodsi4_loop>
    2ec8:	60 95       	com	r22
    2eca:	70 95       	com	r23
    2ecc:	80 95       	com	r24
    2ece:	90 95       	com	r25
    2ed0:	9b 01       	movw	r18, r22
    2ed2:	ac 01       	movw	r20, r24
    2ed4:	bd 01       	movw	r22, r26
    2ed6:	cf 01       	movw	r24, r30
    2ed8:	08 95       	ret

00002eda <__umulhisi3>:
    2eda:	a2 9f       	mul	r26, r18
    2edc:	b0 01       	movw	r22, r0
    2ede:	b3 9f       	mul	r27, r19
    2ee0:	c0 01       	movw	r24, r0
    2ee2:	a3 9f       	mul	r26, r19
    2ee4:	70 0d       	add	r23, r0
    2ee6:	81 1d       	adc	r24, r1
    2ee8:	11 24       	eor	r1, r1
    2eea:	91 1d       	adc	r25, r1
    2eec:	b2 9f       	mul	r27, r18
    2eee:	70 0d       	add	r23, r0
    2ef0:	81 1d       	adc	r24, r1
    2ef2:	11 24       	eor	r1, r1
    2ef4:	91 1d       	adc	r25, r1
    2ef6:	08 95       	ret

00002ef8 <_exit>:
    2ef8:	f8 94       	cli

00002efa <__stop_program>:
    2efa:	ff cf       	rjmp	.-2      	; 0x2efa <__stop_program>

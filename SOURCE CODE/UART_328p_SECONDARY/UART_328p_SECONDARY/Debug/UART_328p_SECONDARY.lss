
UART_328p_SECONDARY.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000016c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800100  00800100  000001e0  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000058  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000361  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001ce  00000000  00000000  000005c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000225  00000000  00000000  00000797  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000094  00000000  00000000  000009bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000029e  00000000  00000000  00000a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000071b  00000000  00000000  00000cee  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000060  00000000  00000000  00001409  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 6b 00 	call	0xd6	; 0xd6 <main>
  88:	0c 94 b4 00 	jmp	0x168	; 0x168 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <USART_Init>:

void USART_Init( )
{
	int ubrr = MYUBRR;
	/*Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
  90:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)ubrr;
  94:	8c e0       	ldi	r24, 0x0C	; 12
  96:	80 93 c4 00 	sts	0x00C4, r24
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  9a:	88 e1       	ldi	r24, 0x18	; 24
  9c:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8data, 1stop bit */
	UCSR0C = (0 << UMSEL00) | (0<<USBS0)|(1 << UCSZ00) | (1 << UCSZ01);//(3<<UCSZ00);
  a0:	86 e0       	ldi	r24, 0x06	; 6
  a2:	80 93 c2 00 	sts	0x00C2, r24
  a6:	08 95       	ret

000000a8 <USART_Transmit>:
}

void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
  a8:	e0 ec       	ldi	r30, 0xC0	; 192
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	90 81       	ld	r25, Z
  ae:	95 ff       	sbrs	r25, 5
  b0:	fd cf       	rjmp	.-6      	; 0xac <USART_Transmit+0x4>
	;
	/* Put data into buffer, sends the data */
	UDR0 = data;
  b2:	80 93 c6 00 	sts	0x00C6, r24
  b6:	08 95       	ret

000000b8 <USART_Flush>:
}

void USART_Flush()
{
	static unsigned char dummy;
	while ( UCSR0A & (1 << RXC0) ) { dummy = UDR0; }
  b8:	80 91 c0 00 	lds	r24, 0x00C0
  bc:	88 23       	and	r24, r24
  be:	54 f4       	brge	.+20     	; 0xd4 <USART_Flush+0x1c>
  c0:	a6 ec       	ldi	r26, 0xC6	; 198
  c2:	b0 e0       	ldi	r27, 0x00	; 0
  c4:	e0 ec       	ldi	r30, 0xC0	; 192
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	8c 91       	ld	r24, X
  ca:	80 93 00 01 	sts	0x0100, r24
  ce:	80 81       	ld	r24, Z
  d0:	88 23       	and	r24, r24
  d2:	d4 f3       	brlt	.-12     	; 0xc8 <USART_Flush+0x10>
  d4:	08 95       	ret

000000d6 <main>:
//#include "usart_ATmega32.h"

int main(void)
{
	//DDRD = (1 << 2) | (1 << 3); PORTD = ~(1<<2) | (1 << 3);
	DDRC = 0x00; PORTC = 0xff;
  d6:	17 b8       	out	0x07, r1	; 7
  d8:	8f ef       	ldi	r24, 0xFF	; 255
  da:	88 b9       	out	0x08, r24	; 8
	DDRB = 0xff; PORTB = 0xff;
  dc:	84 b9       	out	0x04, r24	; 4
  de:	85 b9       	out	0x05, r24	; 5
	DDRD = 0x00; PORTD = 0xff;
  e0:	1a b8       	out	0x0a, r1	; 10
  e2:	8b b9       	out	0x0b, r24	; 11
	USART_Init();
  e4:	0e 94 48 00 	call	0x90	; 0x90 <USART_Init>
	uint8_t button2 = 0;
	uint8_t button3 = 0;
	uint8_t button4 = 0;
	uint8_t button5 = 0;
	uint8_t button6 = 0;
	uint8_t temp = 0;
  e8:	10 e0       	ldi	r17, 0x00	; 0
	return (UCSR0A & (1 << RXC0));
}

unsigned char USART_HasTransmitted()
{
	return (UCSR0A & (1 << TXC0));
  ea:	c0 ec       	ldi	r28, 0xC0	; 192
  ec:	d0 e0       	ldi	r29, 0x00	; 0
		
		if(USART_HasTransmitted())
		USART_Flush();
		temp++;
		if(temp >= 9){
			temp = 0;
  ee:	00 e0       	ldi	r16, 0x00	; 0
	unsigned char aux_a_2 = 0x00; //pc5
	unsigned char aux_b_2 = 0x00; //pc4
	unsigned char aux_start_2 = 0x00; //pd7
	while(1)
	{
		button = ~PINC & 0xff;
  f0:	86 b1       	in	r24, 0x06	; 6
  f2:	80 95       	com	r24
		aux_start_2 = ~PIND & 0x80;
  f4:	99 b1       	in	r25, 0x09	; 9
		PORTB = button;
  f6:	85 b9       	out	0x05, r24	; 5
		button2 = button & 0x02;
		button3 = button & 0x04;
		button4 = button & 0x08;
		button5 = button & 0x10;
		button6 = button & 0x20;
		if(button5){
  f8:	84 ff       	sbrs	r24, 4
  fa:	04 c0       	rjmp	.+8      	; 0x104 <main+0x2e>
			USART_Transmit(6);
  fc:	86 e0       	ldi	r24, 0x06	; 6
  fe:	0e 94 54 00 	call	0xa8	; 0xa8 <USART_Transmit>
 102:	23 c0       	rjmp	.+70     	; 0x14a <main+0x74>
		}
		else if(button1){
 104:	80 ff       	sbrs	r24, 0
 106:	04 c0       	rjmp	.+8      	; 0x110 <main+0x3a>
			USART_Transmit(3);
 108:	83 e0       	ldi	r24, 0x03	; 3
 10a:	0e 94 54 00 	call	0xa8	; 0xa8 <USART_Transmit>
 10e:	1d c0       	rjmp	.+58     	; 0x14a <main+0x74>
		}
		else if(button2){
 110:	81 ff       	sbrs	r24, 1
 112:	04 c0       	rjmp	.+8      	; 0x11c <main+0x46>
			USART_Transmit(2);
 114:	82 e0       	ldi	r24, 0x02	; 2
 116:	0e 94 54 00 	call	0xa8	; 0xa8 <USART_Transmit>
 11a:	17 c0       	rjmp	.+46     	; 0x14a <main+0x74>
		}
		else if(button3){
 11c:	82 ff       	sbrs	r24, 2
 11e:	04 c0       	rjmp	.+8      	; 0x128 <main+0x52>
			button3 = 3;
			USART_Transmit(4);
 120:	84 e0       	ldi	r24, 0x04	; 4
 122:	0e 94 54 00 	call	0xa8	; 0xa8 <USART_Transmit>
 126:	11 c0       	rjmp	.+34     	; 0x14a <main+0x74>
		}
		else if(button4){
 128:	83 ff       	sbrs	r24, 3
 12a:	04 c0       	rjmp	.+8      	; 0x134 <main+0x5e>
			button4 = 4;
			USART_Transmit(1);
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	0e 94 54 00 	call	0xa8	; 0xa8 <USART_Transmit>
 132:	0b c0       	rjmp	.+22     	; 0x14a <main+0x74>
		}
		else if(button6){
 134:	85 ff       	sbrs	r24, 5
 136:	04 c0       	rjmp	.+8      	; 0x140 <main+0x6a>
			//button4 = 4;
			USART_Transmit(5);
 138:	85 e0       	ldi	r24, 0x05	; 5
 13a:	0e 94 54 00 	call	0xa8	; 0xa8 <USART_Transmit>
 13e:	05 c0       	rjmp	.+10     	; 0x14a <main+0x74>
		}
		else if(aux_start_2){
 140:	99 23       	and	r25, r25
 142:	1c f0       	brlt	.+6      	; 0x14a <main+0x74>
			USART_Transmit(7);
 144:	87 e0       	ldi	r24, 0x07	; 7
 146:	0e 94 54 00 	call	0xa8	; 0xa8 <USART_Transmit>
 14a:	88 81       	ld	r24, Y
		}
		
		if(USART_HasTransmitted())
 14c:	86 fd       	sbrc	r24, 6
		USART_Flush();
 14e:	0e 94 5c 00 	call	0xb8	; 0xb8 <USART_Flush>
		temp++;
 152:	1f 5f       	subi	r17, 0xFF	; 255
		if(temp >= 9){
 154:	19 30       	cpi	r17, 0x09	; 9
 156:	08 f0       	brcs	.+2      	; 0x15a <main+0x84>
			temp = 0;
 158:	10 2f       	mov	r17, r16
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15a:	83 ec       	ldi	r24, 0xC3	; 195
 15c:	99 e0       	ldi	r25, 0x09	; 9
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <main+0x88>
 162:	00 c0       	rjmp	.+0      	; 0x164 <main+0x8e>
 164:	00 00       	nop
 166:	c4 cf       	rjmp	.-120    	; 0xf0 <main+0x1a>

00000168 <_exit>:
 168:	f8 94       	cli

0000016a <__stop_program>:
 16a:	ff cf       	rjmp	.-2      	; 0x16a <__stop_program>
